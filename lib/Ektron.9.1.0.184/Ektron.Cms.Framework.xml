<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ektron.Cms.Framework</name>
    </assembly>
    <members>
        <member name="T:Ektron.Cms.Framework.Activity.ActivityCommentManager">
            <summary>
            Activity Comment manager
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.CmsApi`1">
            <summary>
            Base API class for all Ektron CMS APIs.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.CmsApi`1.#ctor">
            <summary>
            Default API constructor.  By defualt the API, runs as the currently logged in user.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.CmsApi`1.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.CmsApi`1.Initialize">
            <summary>
            Initializes the base class for use.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.CmsApi`1.RequestInformation">
            <summary>
            Gets the current Request Information.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.CmsApi`1.ApiMode">
            <summary>
            Gets or sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.CmsApi`1.IsCommerceEnabled">
            <summary>
            Checking Commerce License
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.CmsApi`1.InPreviewMode">
            <summary> 
            Gets or sets the current Preview Mode.  Returns true if the site is in site preview mode.
            </summary> 
        </member>
        <member name="P:Ektron.Cms.Framework.CmsApi`1.ContentLanguage">
            <summary> 
            Gets or sets the current content language. 
            </summary> 
        </member>
        <member name="P:Ektron.Cms.Framework.CmsApi`1.UserId">
            <summary> 
            Gets or sets the currently logged in user ID. 
            </summary> 
            <value></value> 
            <returns>Long</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Framework.CmsApi`1.SitePath">
            <summary> 
            Gets the site path. 
            </summary> 
            <example> 
            An example of using this property can be found in the 
            Workarea source file <c>CMS400Demo\\Workarea\\isearch.aspx.vb</c>. 
            </example> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Framework.CmsApi`1.ApplicationPath">
            <summary>
            Gets the application path (the path to the Workarea).
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityCommentManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityCommentManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityCommentManager.Add(Ektron.Cms.Activity.ActivityCommentData)">
            <summary>
            Adds a new activity comment.
            </summary>
            <param name="comment">Activity comment to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityCommentManager.Update(Ektron.Cms.Activity.ActivityCommentData)">
            <summary>
            Updates an activity comment.
            </summary>
            <param name="comment">Activity comment to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityCommentManager.Delete(System.Int64)">
            <summary>
            Delete's an activity comment.
            </summary>
            <param name="id">The ID of activity comment to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityCommentManager.GetItem(System.Int64)">
            <summary>
            Returns a single Activity comment by ID.
            </summary>
            <param name="id">ID of Activtiy comment to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityCommentManager.GetList(Ektron.Cms.Activity.ActivityCommentCriteria)">
            <summary>
            Returns  a list of all activity comments based upon criteria supplied.
            </summary>
            <param name="criteria">Criteria used to filter results.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityCommentManager.ActivityCommentService">
            <summary>
            Gets instance to IActivityStream.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Activity.ActivityManager">
            <summary>
            Activity Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.Add(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Adds a new activity to the general feed.
            </summary>
            <param name="activity">Activity data to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.Update(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Updates an activity in the general feed.
            </summary>
            <param name="activity">Activity data to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.Delete(System.Int64)">
            <summary>
            Delete's an activity from the general feed.
            </summary>
            <param name="id">The ID of activity to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.AddActivityMessage(System.Int64,System.Int32,System.String)">
            <summary>
            Adds a language specific message for an activity in the general feed.
            </summary>
            <param name="activityId">Id of activity to add message for.</param>
            <param name="languageId">Id of language to add message for.</param>
            <param name="message">Activity message to be added.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.UpdateActivityMessage(System.Int64,System.Int32,System.String)">
            <summary>
            Updates an existing message for an activity in the general feed.
            </summary>
            <param name="activityId">Id of activity to add message for.</param>
            <param name="languageId">Id of language to add message for.</param>
            <param name="message">Activity message to be added.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.PurgeActivity(System.DateTime)">
            <summary>
            Purges the activity older than given date.
            </summary>
            <param name="purgeDate">Date for activity to purge.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.GetItem(System.Int64)">
            <summary>
            Returns a single ActivityStream Item by ID.
            </summary>
            <param name="id">ID of Activtiy to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.GetList(Ektron.Cms.Activity.ActivityCriteria)">
            <summary>
            Returns  a list of all activities based upon criteria supplied.
            </summary>
            <param name="criteria">Criteria used to filter results.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.GetListForUser(System.Int64,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of activities associated with a user.  These will be activities where the user is the subject or the Actor.
            </summary> 
            <param name="pagingInfo">Paging information for retrieval.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.GetListForUser(System.Int64,Ektron.Cms.PagingInfo,System.Int32)">
            <summary>
            Returns a list of activities associated with a user.  These will be activities where the user is the subject or the Actor.
            </summary> 
            <param name="pagingInfo">Paging information for retrieval.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <param name="returnCommentCount">Number of comments to return with each activity. 0 = no comments, -1 = all</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.GetList(Ektron.Cms.Activity.ActivityCriteria,Ektron.Cms.Common.EkEnumeration.ActivityFeedType,System.Int64)">
            <summary>
            Gets an Activity Feed based upon the feedtype and the Id.
            </summary>
            <param name="criteria">criteria for further filtering the feed, sorting, and paging.</param>
            <param name="feedType">The type of feed to retrieve.  For example, User or CommunityGroup.</param>
            <param name="feedTypeId">The id corresponding to the feed type.  For example, if FeedType = User, FeedTypeId would be the user Id to retrieve feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.IsSiteActivityPublishingEnabled(System.Int64)">
            <summary>
            IsSiteActivityPublishingEnabled
            </summary>
            <param name="siteId">site id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.EnableActivityPublishing(System.Int64)">
            <summary>
            Enables activity publishing for the site.  This will also setup default notification preferences for any existin users.  
            Warning, depending on the number of users, this call could be time consuming.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.DisableActivityPublishing(System.Int64)">
            <summary>
            Disables activity publishing for the site.  
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.EnableActivityEmailReply(System.Int64)">
            <summary>
            Enables Activity Email Replies for the site. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.DisableActivityEmailReply(System.Int64)">
            <summary>
            Disables Activity Email Replies for the site.  
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityManager.Publish(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Publishes an activity to all subscribers.
            </summary>
            <param name="activity">activity that has occured.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityManager.ActivityService">
            <summary>
            Gets instance to IActivityStream.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityManager.ActivityStreamService">
            <summary>
            Gets instance to IActivityStream.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityManager.IsActivityPublishingEnabled">
            <summary>
            Gets setting indicating if Activity Publishing is enabled.  Read Only - use EnableActivityPublishing and DisableActivityPublishing 
            to set property.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityManager.IsActivityEmailReplyEnabled">
            <summary>
            Gets setting indicating if Activity Email Replies are enabled.  Read Only - use EnableActivityEmailReply and DisableActivityEmailReply 
            to set property.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Activity.ActivityQueueManager">
            <summary>
            Api class for Queuing activities.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityQueueManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityQueueManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityQueueManager.Queue(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Adds an activity to the queue
            </summary>
            <param name="item">The ActivityData Item to add to the queue.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityQueueManager.Dequeue">
            <summary>
            Removes an activity from the queue
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Activity.ActivityStreamManager">
            <summary>
            Api class for managing activities in ActivityStreams.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStreamManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStreamManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStreamManager.GetUserActivityStream(System.Int64,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of activities in a user's ActivityStream.
            </summary> 
            <param name="paging">Pagign Information for retrieval.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStreamManager.GetUserActivityStream(Ektron.Cms.Activity.ActivityCriteria,System.Int64)">
            <summary>
            Returns a list of activities in a user's ActivityStream based upon supplied criteria.
            </summary> 
            <param name="criteria">Criteira by which to filter the stream.  UserId filter is ignored.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStreamManager.SendActivityToUsersStream(System.Int64,System.Int64)">
            <summary>
            Adds an activity existing in the general feed to a user's feed.
            </summary>
            <param name="activityId">Id of activity to add to users feed.</param>
            <param name="userId">Id of user.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStreamManager.SendActivityToStreams(System.Int64)">
            <summary>
            Sends the activity to all applicable streams based upon the activity and users preferences.
            </summary>
            <param name="activityId">Id of activity to send to streams.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStreamManager.SendActivityToAllStreams(System.Int64)">
            <summary>
            Sends the activity directly to all user's streams.
            </summary>
            <param name="activityId">Id of activity to send to streams.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityStreamManager.ActivityStreamService">
            <summary>
            Gets instance to IActivityStream.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Activity.ActivityTypeManager">
            <summary>
            Api class for managing builtin activity types and creating custom activity types in ActivityStreams.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityTypeManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityTypeManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityTypeManager.Add(Ektron.Cms.Activity.ActivityTypeData)">
            <summary>
            Adds a new ActivityType to Cms. The ActivityType.Id property will be populated with the new ActivityType's Id.
            </summary>
            <param name="ActivityTypeData">ActivityTypeData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityTypeManager.Update(Ektron.Cms.Activity.ActivityTypeData)">
            <summary>
            Updates an existing ActivityType in Cms.
            </summary>
            <param name="ActivityTypeData">ActivityTypeData object to save.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityTypeManager.Delete(System.Int64)">
            <summary>
            Deletes a ActivityType from the Cms.
            </summary>
            <param name="id">Id of ActivityType to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityTypeManager.GetItem(System.Int64)">
            <summary>
            Retrieves a ActivityType by Id.
            </summary>
            <param name="id">Id of ActivityType to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityTypeManager.GetList(Ektron.Cms.Activity.ActivityTypeCriteria)">
            <summary>
            Retrieves a list.
            </summary>
            <param name="criteria">Criteria by which to filter ActivityType being retrieved.</param>
            <returns>List of ActivityType data objects.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityTypeManager.ActivityTypeService">
            <summary>
            Activity Type Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventLogger">
            <summary>
            Provides an API (of static methods) to store Business-Analytics events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventLogger.CreateAnalyticsEventData">
            <summary>
            Creates an event-object with predifined defaults. Used with Log() to save information about an event.
            </summary>
            <returns>A pre-populated event object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventLogger.Log(Ektron.Cms.Framework.Analytics.BusinessAnalytics.IAnalyticsEventData)">
            <summary>
            Stores an event to the system for later reporting, using details from the supplied event-object.
            </summary>
            <param name="eventObject">An event-object, with information detailing the current event</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventLogger.Log(System.String)">
            <summary>
            Stores an event to the system for later reporting.
            </summary>
            <param name="eventName">the registered name of the event</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventLogger.Log(System.String,System.String)">
            <summary>
            Stores an event to the system for later reporting.
            </summary>
            <param name="eventName">the registered name of the event</param>
            <param name="xml">a container for custom information, is passed 
            all the way to the handling db stored procedure</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventLogger.Log(System.String,System.String,System.Int32)">
            <summary>
            Stores an event to the system for later reporting.
            </summary>
            <param name="eventName">the registered name of the event</param>
            <param name="xml">a container for custom information, is passed 
            all the way to the handling db stored procedure</param>
            <param name="count">the number of events to record</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventReporter">
            <summary>
            Provides an API (of static methods) to report on logged Business-Analytics events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventReporter.GetReportNameList">
            <summary>
            Used to obtain recognized report names. This is extensible by adding stored 
            procedures to handle new reports and registering them in the proper table.
            </summary>
            <returns>a list of supported report names</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventReporter.CreateQueryRequest">
            <summary>
            Used to obtain a prepulated object, that helps specify the desired report type and criteria.
            </summary>
            <returns>the base request object, common to all query requests</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventReporter.CreateContentQueryRequest">
            <summary>
            Used to obtain a prepulated object, that helps specify the desired report type and criteria.
            </summary>
            <returns>a request object tailored for content type query requests</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventReporter.GetList(Ektron.Cms.Framework.Analytics.BusinessAnalytics.IAnalyticsQueryRequest)">
            <summary>
            Used to run a report and obtain the results.
            </summary>
            <param name="queryRequest">specifies the desired report type and criteria</param>
            <returns>a list of report objects, of the base business analytics report type</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventReporter.GetList(Ektron.Cms.Framework.Analytics.BusinessAnalytics.IContentQueryRequest)">
            <summary>
            Used to run a report and obtain the results.
            </summary>
            <param name="queryRequest">specifies the desired report type and criteria</param>
            <returns>a list of report objects for content related information</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.BusinessAnalytics.EventReporter.UpdateReportData(System.String,System.DateTime)">
            <summary>
            Updates the designated report aggregation data from the event details.
            </summary>
            <param name="eventName">the name of the event data to update</param>
            <param name="eventDate">the date to use for processing</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Analytics.GoogleAnalyticsV3Manager">
            <summary>
            Google Analytics V3 Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.GoogleAnalyticsV3Manager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.GoogleAnalyticsV3Manager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added Google does not appear in search results nor is it displayed in activity streams when searching for Google added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.GoogleAnalyticsV3Manager.GetUserAccount">
            <summary>
            Get User Account Details
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.GoogleAnalyticsV3Manager.GetProfileId">
            <summary>
            Get Profile Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.GoogleAnalyticsV3Manager.GetKeyFilePath">
            <summary>
            Get Key File Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.GoogleAnalyticsV3Manager.GetEmailAddress">
            <summary>
            Get Email.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Analytics.GoogleAnalyticsV3Manager.GoogleService">
            <summary>
            returns an instance of the business objects Google Service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager">
            <summary>
            Report Analitics Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetLocations(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user geographic location report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetLocations(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user geographic location report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetNewVsReturningVisitors(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a report on new visitor vs. returning visitor by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetNewVsReturningVisitors(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a report on new visitor vs. returning visitor by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetLanguages(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a report on different languages used by the visitor by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetLanguages(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a report on different languages used by the visitor by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetVisitsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetVisitsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetAbsoluteUniqueVisitorsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an absolute unique visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetAbsoluteUniqueVisitorsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an absolute unique visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetPageViewsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a pageviews for all visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetPageViewsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a pageviews for all visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetAveragePageViewsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an average pageviews for all visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetAveragePageViewsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an average pageviews for all visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetTimeOnSiteTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a time on site for all visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetTimeOnSiteTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a time on site for all visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetBounceRateTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a bounce rate for all visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetBounceRateTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a bounce rate for all visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetReportTrend(System.String,Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a generic trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="reportName">the name of the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetReportTrend(Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a generic trend report by the default provider
            </summary>
            <param name="reportName">the name of the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetBrowsers(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a browser report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetBrowsers(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a browser report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetOperatingSystems(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an operating systems report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetOperatingSystems(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an operating systems report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetPlatforms(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a platforms report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetPlatforms(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a platforms report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetScreenColors(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a screen colors report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetScreenColors(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a screen colors report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetScreenResolutions(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a screen resolutions report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetScreenResolutions(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a screen resolutions report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetFlashVersions(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a flash versions report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetFlashVersions(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a flash versions report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetJavaSupport(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a java support report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetJavaSupport(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a java support report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetNetworkLocations(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a network location report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetNetworkLocations(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a network location report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetHostnames(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a hostnames report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetHostnames(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a hostnames report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetConnectionSpeeds(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a connection speeds report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetConnectionSpeeds(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user defined value report by the specified provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetUserDefinedValue(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user defined value report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetUserDefinedValue(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user defined value report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetDirectTraffic(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a direct traffic report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetDirectTraffic(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a direct traffic report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetReferringSites(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a referring sites report by the specified provider 
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetReferringSites(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a referring sites report by the default provider 
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetSearchEngines(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a search engines report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetSearchEngines(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            "a search engines report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetAllTrafficSources(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an all traffic sources report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetAllTrafficSources(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an all traffic sources report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetKeywords(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a keywords report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetKeywords(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a keywords report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetCampaigns(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a campaigns report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetCampaigns(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a campaigns report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetAdVersions(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an ad versions report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetAdVersions(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an ad versions report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetTopContent(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top content report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetTopContent(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top content report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetContentbyTitle(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a content by title report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetContentbyTitle(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a content by title report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetTopLandingPages(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top landing pages report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetTopLandingPages(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top landing pages report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetTopExitPages(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top exit pages report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetTopExitPages(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top exit pages report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetReportRanked(System.String,Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a generic ranked report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="reportName">the name of the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetReportRanked(Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a generic ranked report by the default provider
            </summary>
            <param name="reportName">the name of the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetCmsSearchTerms(System.DateTime,System.DateTime)">
            <summary>
            a Cms Search terms report
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetContentDetail(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top exit pages report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.GetContentDetail(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top exit pages report by the specified provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Analytics.ReportAnalyticsManager.AnalyticsService">
            <summary>
            Analytics Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Analytics.SearchAnalyticsManager">
            <summary>
            Search Analytics Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.SearchAnalyticsManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.SearchAnalyticsManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.SearchAnalyticsManager.TrackSearch(System.String,System.Int32,System.Boolean)">
            <summary>
            Search Phrase
            </summary>
            <param name="searchPhrase">searchPhrase</param>
            <param name="languageId">languageId</param>
            <param name="isWorkareaSearch">isWorkareaSearch</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Analytics.SearchAnalyticsManager.AnalyticsConfig">
            <summary>
            Adds an activity to the queue
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.ApiAccessMode">
            <summary>
            Enumeration used to indicate the access mode when using an API class.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.ApiAccessMode.LoggedInUser">
            <summary>
            Indicates that the API should run as the logged in user.
            This is the default setting.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.ApiAccessMode.Admin">
            <summary>
            Indicates that the API should run as an administrator. When running as internal admin, 
            all CMS actions will be recorded as being performed by the Internal Administrator.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Calendar.WebCalendarManager">
            <summary>
            WebCalendar Manager Class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.Add(Ektron.Cms.Common.Calendar.WebCalendarData)">
            <summary>
             Saves the current calendar as a new calendar.
            </summary>
            <param name="calendar">WebCalendarData object to add.</param>
            <returns>Returns the WebCalendarData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.Update(Ektron.Cms.Common.Calendar.WebCalendarData)">
            <summary>
            Saves this calendar.
            </summary>
            <param name="calendar">WebCalendarData object to update.</param>
            <returns>Returns the WebCalendarData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.Delete(System.Int64)">
            <summary>
            Deletes the current calendar.
            </summary>
            <param name="id">The ID of the calendar to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.GetPublicCalendar(System.Int64)">
            <summary>
            Retrieves a calendar with only public fields populated.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve.</param>
            <returns>WebCalendarData with only public fields populated.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.GetPublicCalendar(Ektron.Cms.Common.EkEnumeration.WorkSpace,System.Int64)">
            <summary>
            Get Public Calendar by owner type and ownerId
            </summary>
            <param name="ownerType">Owner type either User or Group</param>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.GetICalendarFeed(System.Int64)">
            <summary>
            Returns the ICalendar representation of the supplied calendar Id.
            </summary>
            <param name="calendarId">Id of calendar to retrieve ICalendar feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single WebCalendarData object from the CMS.
            </summary>
            <param name="calendarId">The ID of the calendar to retrieve.</param>
            <returns>Retrieved WebCalendarData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendarManager.GetList(Ektron.Cms.Common.Calendar.WebCalendarCriteria)">
            <summary>
            Retrieves a list of WebCalendar objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve calendars.</param>
            <returns>List with retrieved WebCalendarData items</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Calendar.WebCalendarManager.CalendarService">
            <summary>
            Calendar Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Calendar.WebEventManager">
            <summary>
            Webevent Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.Add(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            Adds a new WebEvent object to Cms. The WebEvent.Id property will be populated with the new WebEvent's Id.
            </summary>
            <param name="eventData">WebEventData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.Update(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            Updates an existing WebEventData object in Cms.
            </summary>
            <param name="eventData">WebEventData object to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.Delete(System.Int64)">
            <summary>
            Deletes a WebEvent from the Cms.
            </summary>
            <param name="id">Id of WebEvent to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.CreateVariance(System.Int64,System.DateTime)">
            <summary>
            Creates a WebEventData object representing variance event for the supplied recurring event id.  The WebEventData object has not been saved yet and should be passed to Add() when ready for saving.
            </summary>
            <param name="eventId">Id of the recurring event to create variance for.</param>
            <param name="occurrenceStartUtc">The event occurance date for which to create a variance.</param>
            <returns>An unsaved WebEvent representing the event variance.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.CreateVariance(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            reates a WebEventData object representing variance event for the supplied recurring event id.  The WebEventData object has not been saved yet and should be passed to Add() when ready for saving.
            </summary>
            <param name="eventId">Id of the recurring event to create variance for.</param>
            <param name="occurrenceStartUtc">The event occurance date for which to create a variance.</param>
            <param name="newStartUtc">The new occureance start date (UTC).</param>
            <returns>An unsaved WebEvent representing the event variance.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.CancelOccurrence(System.Int64,System.DateTime)">
            <summary>
            Cancels an occurence of a recurring event.
            </summary>
            <param name="eventId">Id of the recurring event to cancel an occurrence for.</param>
            <param name="occurrenceStartUtc">The event occurance date to cancel.</param>
            <returns>Id of the event variance created for the cancellation.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetItem(System.Int64)">
            <summary>
            Gets the fully populated EventData object for the supplied eventId.
            </summary>
            <param name="eventId">Id of the event to retrieve.</param>
            <returns>Retrieved WebEventData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetList(System.Int64)">
            <summary>
            Returns list of eventdata items for the calendar.  This will only return the actual event items and not the occurrences of the event.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns list of eventdata definition items for the calendar.  This will only return the actual event definitions and not the occurrences of the event that may fall within the given time frame.
            To get an exact list of events given a time frame, please use GetEventOccurrenceList, as definitions are broader in scope and may fall outside the supplied time frames.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetList(Ektron.Cms.Common.WebEventCriteria)">
            <summary>
             Returns a list of WebEvents based upon the supplied criteria.
             </summary>
             <param name="criteria">criteria used to restrict WebEvent retrieval.</param>
             <returns>Retrieved list of WebEventData objects</returns>
             <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetList(Ektron.Cms.EventTaxonomyCriteria)">
            <summary>
             Returns a list of WebEvents based upon the supplied criteria.
             </summary>
             <param name="criteria">criteria used to restrict WebEvent retrieval.</param>
             <returns>Retrieved list of WebEventData objects</returns>
             <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetEventOccurrenceList(Ektron.Cms.Common.WebEventCriteria)">
            <summary>
            Returns a list of events for the calendar that occur during the supplied time period.  This will return all event occurrences 
            including individual occurrences for recurring events.
            </summary>
            <param name="criteria">criteria used to restrict WebEvent retrieval.</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>
            EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetEventOccurrenceList(Ektron.Cms.EventTaxonomyCriteria)">
            <summary>
            Returns a list of events for the calendar that occur during the supplied time period.  This will return all event occurrences 
            including individual occurrences for recurring events.
            </summary>
            <param name="criteria">criteria used to restrict WebEvent retrieval.</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>
            EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetNonVariantEventList(System.Int64)">
            <summary>
            Returns list of original eventdata items for the calendar.  For recurring events, this will only return the actual event items and not the occurrences or variants of recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <returns>Retrieved list of WebEventData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetNonVariantEventList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns list of original eventdata items for the calendar.  For recurring events, this will only return the actual event items and not the occurrences or variants of recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <returns>Retrieved list of WebEventData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetVarianceEventList(System.Int64)">
            <summary>
            Returns an EventVarianceDictionary containing all the variances for the supplied calendar in the given time frame.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <returns>Retrieved WebEventVarianceDictionary object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetVarianceEventList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns an EventVarianceDictionary containing all the variances for the supplied calendar in the given time frame.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <returns>Retrieved WebEventVarianceDictionary object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetEventOccurrenceList(System.Int64,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Returns a list of events for the calendar that occur during the supplied time period.  This will return all event occurrences 
            including individual occurrences for recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of search span</param>
            <param name="endUtc">end of search span</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>
            EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEventManager.GetEventOccurrenceList(System.Int64,System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Returns a list of events for the calendar that occur during the supplied time period.  This will return all event occurrences 
            including individual occurrences for recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of search span</param>
            <param name="endUtc">end of search span</param>
            <param name="TaxonomyIds">List of the taxonomies assigned to the event</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>
            EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Framework.Calendar.WebEventManager.WebEventManagerService">
            <summary>
            Webevent manager service
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.Add(Ektron.Cms.CampaignManagement.CallToActionData)">
            <summary>
            To Add a New Call To Action.
            </summary>
            <param name="ctaData">CallToActionData</param>
            <returns>CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.Update(Ektron.Cms.CampaignManagement.CallToActionData)">
            <summary>
            Update an Existing Call To Action.
            </summary>
            <param name="ctaData">CallToActionData</param>
            <returns>CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.Save(Ektron.Cms.CampaignManagement.CallToActionData)">
            <summary>
            Saves a Call To Action.
            </summary>
            <param name="ctaData">CallToActionData</param>
            <returns>CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.Delete(System.Int64)">
            <summary>
            Deletes a Call To Action By ctaId.
            </summary>
            <param name="id">CTA Id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.GetItem(System.Int64)">
            <summary>
            Gets a Call To Action.
            </summary>
            <param name="id">CallToAction Id</param>
            <returns>CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.GetList(Ektron.Cms.CampaignManagement.CallToActionCriteria)">
            <summary>
            Get List of Call To Actions by CTACriteria.
            </summary>
            <param name="criteria">Call to Action Criteria.</param>
            <returns>List Of CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.GetAllAssociatedCTAByLandingPageId(System.Int64)">
            <summary>
            Get All Associated CTA's By LandingPageId
            </summary>
            <param name="landingPageId">LandingPageId</param>
            <returns>Call To Action List</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.GetEmbedCode(System.Int64)">
            <summary>
            Get Embed code by CTA Id.
            </summary>
            <param name="ctaId">long</param>
            <returns>string</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.GetEmbedCode(Ektron.Cms.CampaignManagement.CustomCampaignData)">
            <summary>
            Get Embed code of a  CTA by CustomCampaignData.
            </summary>
            <param name="customCampaignData">customCampaignData</param>
            <returns>string</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.GetRawHtml(System.Int64,System.String,System.Boolean,Ektron.Cms.CampaignManagement.CTAVersion,Ektron.Cms.CampaignManagement.CustomCampaignData)">
            <summary>
            Get Raw HTMl for Rendering by CTA Id.
            </summary>
            <param name="id">long</param>
            <param name="lang">string</param>
            <param name="preview">bool</param>
            <param name="ctaVersion">CTAVersion</param>
            <param name="customCampaignData">customCampaignData</param>
            <returns>string</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.CampaignManagement.CallToActionManager.CallToActionService">
            <summary>
            returns an instance of the business objects CTA Service.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.ExactTargetManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.ExactTargetManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.ExactTargetManager.Authenticate(Ektron.Cms.CampaignManagement.ExactTargetData)">
            <summary>
            Authenticate ExactTarget Client.
            </summary>
            <param name="exactTargetData">ExactTargetData</param>
            <returns>bool</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.CampaignManagement.ExactTargetManager.ExactTargetService">
            <summary>
            returns an instance of the business objects ExactTarget Service.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.Add(Ektron.Cms.CampaignManagement.LandingPageData)">
            <summary>
            Add a new Landing Page
            </summary>
            <param name="landingPageData">LandingPageData</param>
            <returns>LandingPageData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.Update(Ektron.Cms.CampaignManagement.LandingPageData)">
            <summary>
            Update a landing Page
            </summary>
            <param name="landingPageData">LandingPageData</param>
            <returns>LandingPageData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.Save(Ektron.Cms.CampaignManagement.LandingPageData)">
            <summary>
            save a landing page
            </summary>
            <param name="landingPageData">LandingPageData</param>
            <returns>LandingPageData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.Clone(System.Int64)">
            <summary>
            Clone a landing page
            </summary>
            <param name="landingPageId">long</param>
            <returns>New LandingPageData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.Delete(System.Int64)">
            <summary>
            Delete a landing page
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.GetItem(System.Int64)">
            <summary>
            get a landing page
            </summary>
            <param name="id">id of landing page to return</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.GetList(Ektron.Cms.CampaignManagement.LandingPageCriteria)">
            <summary>
            get landing pages based on criteria
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.GetManifestList">
            <summary>
            Get list of Manifest templates.
            </summary>
            <returns>list of ManifestData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.GetAllSocialChannelsList">
            <summary>
            Get list of All Avaliable Social Channels.
            </summary>
            <returns>list of SocialChannelData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.GetSocialChannelsByLandingPageId(System.Int64)">
            <summary>
            Get list of Social Channels for a given Landing Page.
            </summary>
            <param name="landingPageId">long</param>
            <returns>list of SocialChannelData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.GetCampaignManagementSettings">
            <summary>
            Get campaign management settings data.
            </summary>
            <returns>CampaignManagementSettingsData</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.CampaignManagement.LandingPageManager.LandingPageService">
            <summary>
            returns an instance of the business objects LandingPage Manager.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.BasketItemManager">
            <summary>
            Manipulates the product items in the basket
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketItemManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketItemManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketItemManager.Add(Ektron.Cms.Commerce.BasketItemData)">
            <summary>
            Adds the product or variant or kit items to the basket.
            </summary>
            <param name="basketItemData">BasketItemData object to be added.</param>
            <returns>Returns the added basketitem data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketItemManager.Update(Ektron.Cms.Commerce.BasketItemData)">
            <summary>
            Updates the Kitconfiguration data item in the basket.
            </summary>
            <param name="basketItemData">BasketItemData object to be updated.</param>
            <returns>Returns the basket item data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketItemManager.Delete(System.Int64,System.Int64)">
            <summary>
            Deletes the basket item from the basket.
            </summary>
            <param name="basketItemId">Basket Item Id.</param>
            <param name="basketId"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketItemManager.UpdateQuantity(System.Int64,System.Int64,System.Int32)">
            <summary>
            Updates the basket item quantity.
            </summary>
            <param name="basketItemId">Id of the basket item.</param>
            <param name="basketId">Id of the basket, in which the item quantity is updated.</param>        
            <param name="productQuantity">Product quantity to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketItemManager.GetKitConfiguration(System.Int64,System.Int64)">
            <summary>
            Retrieves the kit configuration data.
            </summary>       
            <param name="basketItemId">Id of the basket item</param>
            <param name="userId">Id of the user.</param>
            <returns>Kit configuration data for the basket item.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketItemManager.GetKitConfiguration(System.Int64,System.String)">
            <summary>
            Retrieves the kit configuration data.
            </summary>       
            <param name="basketItemId">Id of the basket item</param>        
            <param name="shopperId">Id of the shopper,it should be a GUID.</param>
            <returns>Kit configuration data for the basket item.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.BasketManager">
            <summary>
            This class can be used to manipulates the baskets in e-commerce.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.Add(Ektron.Cms.Commerce.BasketData)">
            <summary>
            Adds the new cart to the specific user in CMS. The basketData.Id will be populated with the Id of the new bakset.
            </summary>
            <param name="basketData">Basket object to be added.</param>
            <returns>Returns the added basket data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.Update(Ektron.Cms.Commerce.BasketData)">
            <summary>
            Updates the existing cart in the CMS.
            </summary>
            <param name="basketData">Basket object to be upadted.</param>
            <returns>Returns the updated basket data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.Delete(System.Int64)">
            <summary>
            Deletes a cart from the CMS by its Id.
            </summary>
            <param name="basketId">Id of cart to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.Empty(System.Int64)">
            <summary>
            Deletes all the items in a cart by it's cart Id.
            </summary>
            <param name="basketId">Id of the basket gets empty.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.SetDefault(System.Int64,System.Int64)">
            <summary>
            Sets the cart as default cart to the user.
            </summary>
             <param name="basketId">Id of the basket.</param>
             <param name="userId">Id of the user. </param>        
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.ApplyCoupon(System.Int64,System.Int64)">
            <summary>
            Apply the coupon to the basket.
            </summary>
            <param name="basketId">Id of the basket.</param>
            <param name="couponId">Id of the coupon to be applied to the basket.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.RemoveCoupon(System.Int64,System.Int64)">
            <summary>
            Remove the coupon from the basket.
            </summary>
            <param name="basketId">Id of the basket from which the coupon is removed.</param>
            <param name="couponId">Id of the coupon to be removed from basket.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single cart by its Id.
            </summary>
            <param name="basketId">Id of cart to be retrieved.</param>
            <returns>Returns the basket that matches the Id.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.GetDefault">
            <summary>
             Gets the default cart of logged in user.
            </summary>
            <returns>The default cart object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.GetDefault(System.Int64)">
            <summary>
            Gets the default cart of the specific user.
            </summary>
            <param name="userId">The ID of user.</param>        
            <returns>Returns the default cart of the user.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.GetDefault(System.String)">
            <summary>
            Gets a default cart for a non logged in user based upon the shopper's GUID string.
            </summary>
            <param name="shopperId">The GUID ID of the non logged in shopper.</param>
            <returns>Returns the default cart object of the shooper .</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.GetList(System.Int64)">
            <summary>
            Retrieves a list of saved carts of a user.
            </summary>        
            <param name="userId">ID of the user.</param>
            <returns>A list of saved cart objects of the user.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.BasketManager.GetAppliedCoupons(System.Int64)">
            <summary>
            Retrieves the list of coupon items which are applied to the basket.
            </summary>
            <param name="basketId">BasketId.</param>
            <returns>List of coupons.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.AddressManager">
            <summary>
            AddressManager class for managing Addresses in Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.AddressManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.AddressManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.AddressManager.Add(Ektron.Cms.Commerce.AddressData)">
            <summary>
            Adds a new address based on information in an AddressData object. 
            AddressData.Id will be populated with the newly created ID.
            </summary>
            <param name="addressData">The AddressData object to add.</param>
            <returns>returns added AddressData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.AddressManager.Add(Ektron.Cms.Commerce.AddressData,System.Int64)">
            <summary>
            Adds a new address based on information in an AddressData object and associates with a 
            customer. AddressData.Id will be populated with the newly created ID.
            </summary>
            <param name="addressData">The AddressData object to add.</param>
            <param name="customerId">The ID of customer to which this address belongs.</param>
            <remarks>Required: Name, AddressLine1, City, PostalCode, Phone.</remarks>
            <returns>returns added AddressData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.AddressManager.Update(Ektron.Cms.Commerce.AddressData)">
            <summary>
            Updates the supplied Address.
            </summary>
            <param name="addressData">The ID of the AddressData object to update.</param>
            <returns>returns updated AddressData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.AddressManager.UpdateOrderAddress(Ektron.Cms.Commerce.AddressData,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Updates an address associated with an order.  This update only affects this specific address and 
            does not affect the customer's actual saved address.
            </summary>
            <param name="addressData">Address info to update.</param>
            /// <param name="orderId">Id of order to update address for.</param>
            <param name="isBilling">If true, updates the billing address for an order.</param>
            <param name="isShipping">If true, updates the shipping address for an order.</param>
            <returns>returns updated AddressData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.AddressManager.Delete(System.Int64)">
            <summary>
            Deletes an address.
            </summary>
            <param name="addressId">The ID of the AddressData object to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.AddressManager.GetItem(System.Int64)">
            <summary>
            Retrieves an AddressData object by providing its ID.
            </summary>
            <param name="addressId">The ID the of AddressData object to retrieve.</param>
            <returns>An AddressData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.AddressManager.GetList(Ektron.Cms.Commerce.AddressCriteria)">
            <summary>
            Retrieves the list of addresses based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the address.</param>
            <returns>Returns the list of address data object.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.CatalogEntryManager">
            <summary>
            It can be used to manipulates the catalog entry data in CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.Add(Ektron.Cms.Commerce.EntryData)">
            <summary>
            Adds a new catalog entry into the CMS.
            </summary>
            <param name="entryData">The EntryData object to be added.</param>
            <returns>Returns  added EntryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.Update(Ektron.Cms.Commerce.EntryData)">
            <summary>
            Updates an existing catalog entry data.
            </summary>
            <param name="entryData">EntryData object to be updated.</param>
            <returns>Returns updated EntryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.Delete(System.Int64)">
            <summary>
            Deletes a catalog entry based on ID.
            </summary>
            <param name="entryId">The ID of the entry to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.CheckIn(System.Int64)">
            <summary>
            Check In the catalog entry item.
            </summary>
            <param name="entryId">Id of the entry data to be checked in.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.CheckOut(System.Int64)">
            <summary>
            Check out the catalog entry item for edit.
            </summary>
            <param name="entryId">Id of the entry data to be check out.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.Cancel(System.Int64)">
            <summary>
             Undo the last changes of catalog entry item.
            </summary>
            <param name="entryId">Id of entry data item.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.Submit(System.Int64)">
            <summary>
            Submits the catalog entry item for publish.
            </summary>
            <param name="entryId">Id of catalog entry item.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.Restore(System.Int64,System.Int64)">
            <summary>
            Restores a previous version of a catalog entry based on its ID and the version ID to restore.
            </summary>
            <param name="entryId">The ID of the catalog entry to Restore.</param>
            <param name="versionId">Version Id to restore.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.DisableInventory(System.Int64)">
            <summary>
            Disables the inventory option specific catalog entry item.
            </summary>
            <param name="entryId">Id of the catalog entry item.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.EnableInventory(System.Int64)">
            <summary>
            Enables the inventory option to specific catalog entry item.
            </summary>
            <param name="entryId">Id of the catalog entry item.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single catalog entry in the current language based on the entry's ID.
            </summary>
            <param name="entryId">The ID of catalog entry to be retrieved.</param>
            <returns>Entry data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.GetList(Ektron.Cms.Commerce.CatalogEntryCriteria)">
            <summary>
            Retrieves a list of EntryData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">The criteria for retrieving EntryData.</param>
            <returns>List of entry data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CatalogEntryManager.GetList(Ektron.Cms.Commerce.EntryAttributeCriteria)">
            <summary>
             Retrieves a list of EntryData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">EntryAttributeCriteria.</param>
            <returns>Returns list of entry data object.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.InventoryManager">
            <summary>
            Framework API class for managing inventory withing the CMS.  This API can be used for add the inventory using Inventory Manager.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.Add(Ektron.Cms.Commerce.InventoryData)">
            <summary>
            Adds the inventory data to catalog entry item.
            </summary>
            <param name="inventoryData">Inventory data object to be added.</param>
            <returns>InventoryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.Update(Ektron.Cms.Commerce.InventoryData)">
            <summary>
            Updates the inventory data to catalog entry item based on its entry id.
            </summary>
            <param name="inventoryData">Inventory data object to be added.</param>
            <returns>InventoryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.IncreaseStockLevel(System.Int64,System.Int32)">
            <summary>
            To increase the Stock level based on the entryId and quantity.
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <param name="quantity">Quantity of the catalog entry</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.DecreaseStockLevel(System.Int64,System.Int32)">
            <summary>
            To decrease the Stock level based on the entryId and quantity.
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <param name="quantity">Quantity of the catalog product</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.GetItem(System.Int64)">
            <summary>
            Retrieves the inventory data by it's entryId.
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <returns>InventoryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.GetUnitsInStock(System.Int64)">
            <summary>
            Get the Units in Stock based on entryId
            </summary>
            <param name="entryId">Id of the catalog entry.</param>
            <returns>Returns the number of units in stock.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.GetUnitsOnOrder(System.Int64)">
            <summary>
            Get the Units in order based on entryId
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <returns>Returns the number of units in order.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.GetReorderLevel(System.Int64)">
            <summary>
            Get the ReOrder level based on the entry ID
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <returns>Returns the reorder level of entry.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.IsItemAvailable(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Checks whether the number of items are availabe in the stock or not.
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <param name="quantity">quantity of the catalog product</param>
            <param name="checkInventoryDisabled">true or false the inventory disabled value</param>
            <returns>Returns the true, if the stock matches the quantity. Else false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.InventoryManager.GetList(Ektron.Cms.Commerce.InventoryCriteria)">
            <summary>
            Retrieves the list of inventorydata based on the supplied criteria.
            </summary>
            <param name="criteria">criteria by which to filter and sort inventory</param>
            <returns>List of inventory data objects that maches the criteria.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.ProductTypeManager">
            <summary>
            It can be used to manipulates the catalog's product type data in CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ProductTypeManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ProductTypeManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ProductTypeManager.Add(Ektron.Cms.Commerce.ProductTypeData)">
            <summary>
            Adds a new ProductType into the CMS. The ProductTypeData.Id property will be populated with the new ProductType's Id.
            </summary>
            <param name="productType">ProductTypeData object</param>
            <returns>returns the added ProductTypeData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ProductTypeManager.Update(Ektron.Cms.Commerce.ProductTypeData)">
            <summary>
            Updates an existing ProductType.
            </summary>
            <param name="productType">ProductTypeData object</param>
            <returns>returns the updated ProductTypeData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ProductTypeManager.Delete(System.Int64)">
            <summary>
            Deletes ProductType by it's Id.
            </summary>
            <param name="id">Identifier of ProductType</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ProductTypeManager.GetItem(System.Int64,System.Boolean)">
            <summary>
            Retrieves the single product type by its Id.
            </summary>
            <param name="productTypeId">The ID of the ProductType to Get</param>
            <param name="withAttributes">If it is true, it will fetch attributes otherwise not</param>
            <returns>returns ProductTypeData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ProductTypeManager.GetList(System.Int64)">
            <summary>
            Retrieves a list of ProductTypeData object by FolderId.
            </summary>
            <param name="folderId">ID of the Folder that uses ProductTypes</param>
            <returns>returns list of ProductTypeData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ProductTypeManager.GetList(Ektron.Cms.Commerce.ProductTypeCriteria)">
            <summary>
            Retrieves a list of ProductTypeData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve ProductTypes</param>
            <returns>returns list of ProductTypeData object</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.CouponManager">
            <summary>
             Framework API class for manipultes the coupon data in the CMS. It can be used for add,edit and gets the coupon data object.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.Add(Ektron.Cms.Commerce.CouponData)">
            <summary>
            Adds the new coupon data object into the CMS.The CouponData.Id property will be populated with the new Coupon's Id.
            </summary>
            <param name="couponData">Coupon data object to be added.</param>
            <returns>Coupon data object with new coupon Id.</returns>        
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.AddCouponToObject(Ektron.Cms.Commerce.CouponEntryData)">
            <summary>
            Adds new CouponEntry data object into the CMS.
            </summary>
            <param name="couponEntryData">CouponEntryData object to be added.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.SaveCouponApplications(System.Int64,System.Collections.Generic.List{Ektron.Cms.Commerce.CouponEntryData})">
            <summary>
            Saves all the applications (taxonomy, catalog, product) for a given coupon. This is assumed to be an all inclusive lists.  
            Any existing coupon applications that are not included will be deleted.
            </summary>
            <param name="couponId">Id of coupon to update.</param>
            <param name="couponEntryList">List of all CouponEntry applications for the given coupon.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.Update(Ektron.Cms.Commerce.CouponData)">
            <summary>
            Updates the existing coupon data object.
            </summary>
            <param name="couponData">Coupon data object to be updated.</param>
            <returns>Updated coupon data is returned.</returns>      
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.Delete(System.Int64)">
            <summary>
            Deletes an existing coupon from the CMS
            </summary>
            <param name="couponId">ID of the coupon to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.DeleteCouponApplications(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
            Deletes the existing Coupon Applications from the CMS.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <param name="exclusionIdList">List of Ids not included for delete.</param>
            <param name="objectType">Obeject type of CMSObjectTypes. Only Folder, Taxonomy and CatalogEntry object types are allowed.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.Deactivate(System.Int64)">
            <summary>
            Deactivate the existing coupon.
            </summary>
            <param name="couponId">Id of the coupon.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.GetItem(System.Int64)">
            <summary>
            Retrieve the single coupon item by ID.
            </summary>
            <param name="couponId">Id of the coupon to retrieved.</param>
            <returns>Returns the coupon data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.GetList(Ektron.Cms.Commerce.CouponCriteria)">
            <summary>
            Retrieves the list of coupon item based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the coupon.</param>
            <returns>Returns the list of coupon data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.GetProductList(Ektron.Cms.Commerce.CouponEntryCriteria)">
            <summary>
            Retrieves the list of product coupon item based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the product coupon entry.</param>
            <returns>Returns the list of product coupon entry data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.GetCatalogList(Ektron.Cms.Commerce.CouponEntryCriteria)">
            <summary>
            Retrieves the list of coupon entry item based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the coupon entry.</param>
            <returns>Returns the list ofcoupon entry data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.GetTaxonomyList(Ektron.Cms.Commerce.CouponEntryCriteria)">
            <summary>
            Retrieves the list of coupon entry item based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the coupon entry.</param>
            <returns>Returns the list ofcoupon entry data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.GetCouponId(System.String)">
            <summary>
            Retieve the coupon id by coupon code.
            </summary>
            <param name="couponCode">Code of the coupon</param>
            <returns>Returns the coupon id</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.Validate(System.Int64)">
            <summary>
            Validate the coupon by coupon id.
            </summary>
            <param name="couponId">Id of the coupon to validate.</param>
            <returns>Retuns true if validation is true.Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.Validate(System.Int64,System.Int64)">
            <summary>
            Validate the coupon by coupon id and product id.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <param name="productId">Id of the product.</param>
            <returns>Retuns true if validation is true.Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.IsCouponAppliedToObject(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
            Checks whether the coupon is applied to the particular object or not.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <param name="objectId">Id of the object.</param>
            <param name="objectType">CmsObjectTypes enum.</param>
            <returns>Returns true, if the coupon is applied to the object.Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.IsCouponUsedForOrder(System.Int64)">
            <summary>
            Checks whether the coupon is used in any order or not.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <returns>Returns true, if the coupon is used in order. Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.IsCouponUsedForBasket(System.Int64)">
            <summary>
            Checks whether the coupon is used in the basekt or not.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <returns>Returns true,if the coupon is used in any basket. Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CouponManager.IsCouponApplicabletoSubscriptions(System.Int64)">
            <summary>
            Checks whether the coupon is applicable to the subscribtion or not.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <returns>Returns true,if the coupon is applicable to the subscriptions.Otherwise false.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.CustomerManager">
            <summary>
            Manipulate e-commerce customer details in CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.Add(Ektron.Cms.Commerce.CustomerData)">
            <summary>
            Adds a new customer. The Customer.Id property will be populated with the new Customer's Id.
            </summary>
            <param name="customerData">Customer data to be added.</param>
            <returns>Returns customer data with new customer's Id.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.Add(Ektron.Cms.Commerce.CustomerData,Ektron.Cms.Commerce.AddressData)">
            <summary>
            Adds a new customer with a billing address. The Customer.Id property will be populated with the new Customer's Id.
            </summary>
            <param name="customerData">Customer data to be added.</param>
            <param name="billingAddress">Billing address of the customer.  Also serves as shipping address.</param>
            <returns>Returns customer data with new customer's Id.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.Add(Ektron.Cms.Commerce.CustomerData,Ektron.Cms.Commerce.AddressData,Ektron.Cms.Commerce.AddressData)">
            <summary>
            Adds a new customer with seperate billing and shipping addresses. The Customer.Id property will be populated with the new Customer's Id.
            </summary>
            <param name="customerData">Customer data to be added.</param>
            <param name="billingAddress">Billing address of the customer.</param>
            <param name="shippingAddress">Shipping address of the customer.</param>
            <returns>Returns customer data with new customer's Id.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.Add(Ektron.Cms.Commerce.CustomerData,Ektron.Cms.Commerce.AddressData,Ektron.Cms.Commerce.AddressData,System.Boolean)">
            <summary>
            Adds a new customer with seperate billing and shipping addresses. The Customer.Id property will be populated with the new Customer's Id.
            </summary>
            <param name="customerData">Customer data to be added.</param>
            <param name="billingAddress">Billing address of the customer.</param>
            <param name="shippingAddress">Shipping address of the customer.</param>
            <param name="ISGuestCheckout">Is GuestCheckOut or Not.</param>
            <returns>Returns customer data with new customer's Id.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.Update(Ektron.Cms.Commerce.CustomerData)">
            <summary>
            Updates an existing customer.
            </summary>
            <param name="customerData">Customer data to be updated.</param>
            <returns>Returns customer data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.Delete(System.Int64)">
            <summary>
            Deletes a customer from the Cms.
            </summary>
            <param name="customerId">Id of the customer to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.SetBillingAddress(System.Int64,System.Int64)">
            <summary>
            Sets a customers billing address.
            </summary>
            <param name="customerId">Id of the customer.</param>
            <param name="addressId">Id of the address to be set as billing address to the customer.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.SetShippingAddress(System.Int64,System.Int64)">
            <summary>
            Sets a customers shipping address.
            </summary>
            <param name="customerId">Id of the customer.</param>
            <param name="addressId">Id of address to be set as shipping address to the customer.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.IsUserNameExists(System.String)">
            <summary>
            Returns whether the given UserName is available to add new user or not
            </summary>
            <param name="userName">Name of the User.</param>
            <returns>returns true, If UserName is available to add a new user.Otherwise false.</returns>        
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.GetItem(System.Int64)">
            <summary>
            Retrieves a customer.
            </summary>
            <param name="customerId">Id of customer to be retrieved.</param>
            <returns>CustomerData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CustomerManager.GetList(Ektron.Cms.Commerce.CustomerCriteria)">
            <summary>
            Returns a list of customers based upon supplied criteria.
            </summary>
            <param name="criteria">criteria by which to retrieve customer objects.</param>
            <returns>List of CustomerData</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.OrderManager">
            <summary>
            Api class for managing commerce orders in Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.PlaceOrder(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,Ektron.Cms.Commerce.PaymentMethod,System.String,System.String)">
            <summary>
            Create new order to the CMS.
            </summary>
            <param name="basketId">Id of the basket.</param>
            <param name="customerId">Id of the customer.</param>
            <param name="billingAddressId">Id of billing address.</param>
            <param name="shippingAddressId">Id of the shipping address.</param>
            <param name="shippingMethodId">Id of the shipping method.</param>
            <param name="orderPayment">PaymentMethod object.</param>
            <param name="specialInstructions">Special Instructions</param>
            <param name="httpHost">HostUrl</param>
            <returns>Placed order data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.Update(Ektron.Cms.Commerce.OrderData)">
            <summary>
            Update the existing order.
            </summary>
            <param name="orderData">Order data object.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.Delete(System.Int64)">
            <summary>
            Deletes the order by giving the option only to e-commerce admin or site admin
            </summary>
            <param name="orderId"> Id of the order</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.SetTrackingNumber(System.Int64,System.String,System.Boolean)">
            <summary>
            Sets the tracking number for an order part.
            </summary>
            <param name="orderId">Id of order to set tracking number.</param>
            <param name="trackingNumber">The tracking number</param>
            <param name="markAsShipped">mark the item as shipped.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.Capture(System.Int64)">
            <summary>
            Captures the payment for an order.
            </summary>
            <param name="orderId">Id of order</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.Capture(System.Int64,System.Int64)">
            <summary>
            Captures the payment for an order
            </summary>
            <param name="orderId">Id of an order</param>
            <param name="paymentId">Id of the payment</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.SetFraud(System.Int64)">
            <summary>
            Marks an order as fraudulent.
            </summary>
            <param name="orderId">Id of order</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.SetHold(System.Int64)">
            <summary>
            Sets an order to OnHold.
            </summary>
            <param name="orderId">Id of order</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.SetStatus(System.Int64,Ektron.Cms.Common.EkEnumeration.OrderStatus)">
            <summary>
            Sets the status of an order.
            </summary>
            <param name="orderId">Id of order</param>
            <param name="status">Status to change the order to.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.ApplyCoupon(System.Int64,System.Int64)">
            <summary>
            Applied coupon to specific order.
            </summary>
            <param name="orderId">OrderId</param>
            <param name="couponId">CouponId</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single order.
            </summary>
            <param name="orderId">Id of order to retrieve.</param>
            <returns>OrderData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.GetList(Ektron.Cms.Commerce.OrderCriteria)">
            <summary>
            Retrieves a list of orders.
            </summary>
            <param name="criteria">criteria by which to retrieve orders.</param>
            <returns>List of OrderData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.GetStatus(System.Int64)">
            <summary>
            Returns the status of an order.
            </summary>
            <param name="orderId">Id of order to retrieve status for.</param>
            <returns>Order status</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.OrderManager.GetOrderPaymentList(Ektron.Cms.Commerce.OrderPaymentCriteria)">
            <summary>
            Returns the list of order payment data.
            </summary>
            <param name="criteria">criteria by which to retrieve orders.</param>
            <returns>List of order payment data.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.CountryManager">
            <summary>
            It can be used to manipultes the country data in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CountryManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CountryManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CountryManager.Add(Ektron.Cms.Commerce.CountryData)">
            <summary>
            Adds a new country to CMS400.NET based on the CountryData object. The Country.Id property will be 
            populated with the new Country's ID.
            </summary>
            <param name="countryData">The CountryData object to add.</param>
            <returns>returns newly created CountryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CountryManager.Update(Ektron.Cms.Commerce.CountryData)">
            <summary>
            Updates an existing country in CMS400.NET based on the CountryData object.
            </summary>
            <param name="countryData">The CountryData object to save.</param>
            <returns>returns updated CountryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CountryManager.Delete(System.Int32)">
            <summary>
            Deletes a country from the CMS400.NET based on its ID.
            </summary>
            <param name="countryId">The ID of country to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CountryManager.CanDelete(System.Int32)">
            <summary>
            Checks to see if a country can be deleted. A country cannot be deleted if a region or 
            address uses the country.  
            </summary>
            <param name="countryId">The ID of the country to delete.</param>        
            <returns>Returns true if country can safely be deleted.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CountryManager.GetItem(System.Int32)">
            <summary>
            Retrieves a country by its ID.
            </summary>
            <param name="countryId">The ID of country to retrieve.</param>
            <returns>A CountryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CountryManager.GetList(Ektron.Cms.Commerce.CountryCriteria)">
            <summary>
            Retrieves a list of countries based on filters set in the <c>Criteria</c> property.
            </summary>
            <param name="criteria">Criteria by which to filter the list of countries being retrieved.</param>
            <returns>A list of countries meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.RegionManager">
            <summary>
            Api class for managing regions in Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RegionManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RegionManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RegionManager.Add(Ektron.Cms.Commerce.RegionData)">
            <summary>
            Adds a new Region to the Cms.  The Region.Id property will be populated with the new regions Id.
            </summary>
            <param name="regionData">RegionData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RegionManager.Update(Ektron.Cms.Commerce.RegionData)">
            <summary>
            Updates an existing Region in the Cms.
            </summary>
            <param name="regionData">RegionData object to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RegionManager.Delete(System.Int64)">
            <summary>
            Deletes a region from the Cms.
            </summary>
            <param name="regionId">Id of region to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RegionManager.CanDelete(System.Int64)">
            <summary>
            Checks to see if  a Region can be deleted.
            </summary>
            <param name="regionId">Id of Region to delete.</param>        
            <returns>true if region can safely be deleted.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RegionManager.GetItem(System.Int64)">
            <summary>
            Retrieves a region by region Id.
            </summary>
            <param name="regionId">Id of region to retrieve.</param>
            <returns>Region data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RegionManager.GetList(Ektron.Cms.Commerce.RegionCriteria)">
            <summary>
            Retrieves a list of regions.
            </summary>
            <param name="criteria">Criteria by which to filter regions being retrieved.</param>
            <returns>List of regions meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.PasswordHistoryManager">
            <summary>
            PasswordHistoryManager class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.Add(Ektron.Cms.Commerce.PasswordHistoryData)">
            <summary>
            Adds a new PasswordHistory to Cms. The PasswordHistory.Id property will be populated with the new PasswordHistory's Id.
            </summary>
            <param name="PasswordHistoryData">PasswordHistoryData object to add.</param>
             <returns>PasswordHistory data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.Update(Ektron.Cms.Commerce.PasswordHistoryData)">
            <summary>
            Updates an existing PasswordHistory in Cms.
            </summary>
            <param name="PasswordHistoryData">PasswordHistoryData object to save.</param>
             <returns>PasswordHistory data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.Delete(System.Int64)">
            <summary>
            Deletes a PasswordHistory from the Cms.
            </summary>
            <param name="id">Id of PasswordHistory to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.Purge(System.Int64,System.Int32)">
            <summary>
            Deletes a PasswordHistory from the Cms.
            </summary>
            <param name="userId">Id of user to delete PasswordHistory</param>
            <param name="number">Deletes PasswordHistory except given number of recently added PasswordHistory.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.GetItem(System.Int64)">
            <summary>
            Retrieves a PasswordHistory by Id.
            </summary>
            <param name="id">Id of PasswordHistory to retrieve.</param>
            <returns>PasswordHistory data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.GetList(Ektron.Cms.Commerce.PasswordHistoryCriteria)">
            <summary>
            Retrieves a list of PasswordHistory data objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria by which to filter PasswordHistory being retrieved.</param>
            <returns>List of PasswordHistory data objects.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.GetRecentPasswords(System.Int64,System.Int32)">
            <summary>
            Retrieves the last N number of passwords for a user.
            </summary>
            <param name="userId">The user id to retrieve the recent passwords for.</param>
            <param name="number">The number of recent passwords to get.</param>
            <returns>List of PasswordHistory data objects.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PasswordHistoryManager.MatchesRecentPassword(System.Int64,System.String,System.Int32)">
            <summary>
            Returns whether the password matches the user's last N number of passwords.
            </summary>
            <param name="userId">The user id to matches the recent passwords for.</param>
            <param name="passwordHash">Hashed password to match.</param>
            <param name="number">The number of recent passwords to look in.</param>
            <returns>returns true, if password matches.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.CreditCardTypeManager">
            <summary>
            CreditCardTypeManager class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.Add(Ektron.Cms.Commerce.CreditCardTypeData)">
            <summary>
            Adds a new credit card type to Cms. The Id property will be populated with the new credit card type's Id.
            </summary>
            <param name="item">credit card type object to add.</param>
            <returns>returns added CreditCardTypeData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.Update(Ektron.Cms.Commerce.CreditCardTypeData)">
            <summary>
            Updates an existing credit card type in Cms.
            </summary>
            <param name="item">credit card type object to save.</param>
            <returns>returns updated CreditCardTypeData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.Delete(System.Int64)">
            <summary>
            Deletes a credit card type from the Cms.
            </summary>
            <param name="id">Id of credit card type to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.GetItem(System.Int64)">
            <summary>
            Retrieves a credit card type by Id.
            </summary>
            <param name="id">Id of credit card type to retrieve.</param>
            <returns>Return the credit card type data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.GetList(Ektron.Cms.Commerce.CreditCardTypeCriteria)">
            <summary>
            Retrieves a list of credit card types.
            </summary>
            <param name="criteria">criteria object used for sorting, paging, and filtering results.</param>
            <returns>Return the credit card type data list</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.GetAcceptedCreditCardList">
            <summary>
            Retrieves a list of accepted credit card types.
            </summary>
            <returns>Return the accepted creditcard type data list</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.IsDateValid(Ektron.Cms.Commerce.CreditCardPayment)">
            <summary>
            Validates the date of a creditCard vs the server's datetime.
            </summary>
            <param name="creditcard">Credit card payment details.</param>
            <returns>To retrun the boolean value</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CreditCardTypeManager.IsCardValid(Ektron.Cms.Commerce.CreditCardPayment,System.Boolean)">
            <summary>
            Validates creditCard values and date. Does Not talk to the payment gateway.
            </summary>
            <param name="creditcard">Credit card payment details.</param>
            <param name="requireCCID">true or false for required ccid value</param>
            <returns>To retrun the boolean value</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.PaymentGatewayManager">
            <summary>
            Api class for managing commerce paymentgateway in Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PaymentGatewayManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PaymentGatewayManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PaymentGatewayManager.Add(Ektron.Cms.Commerce.PaymentGatewayData)">
            <summary>
             Adds a new PaymentGateway to Cms. The PaymentGateway.Id property will be populated with the new PaymentGateway's Id.
            </summary>        
            <param name="gatewayData">PaymentGatewayData object to add.</param>
            <returns>Paymentgateway data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PaymentGatewayManager.Update(Ektron.Cms.Commerce.PaymentGatewayData)">
            <summary>
            Update the existing PaymentGatewayData object.
            </summary>
            <param name="gatewayData">PaymentGatewayData object to update.</param>
            <returns>Paymentgateway data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PaymentGatewayManager.Delete(System.Int64)">
            <summary>
            Delete the existing Payamentgateway.
            </summary>
            <param name="gatewayId">Id of the gateway to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PaymentGatewayManager.SetDefault(System.Int64)">
            <summary>
            Mark the existing gateway as default gateway.
            </summary>
            <param name="gatewayId">Id of the gateway to become default.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PaymentGatewayManager.GetDefault">
            <summary>
            Returns default paymentgateway.
            </summary>
            <returns>Default paymentgateway data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PaymentGatewayManager.GetItem(System.Int64)">
            <summary>
            Retrieves the payamentgateway by gateway id.
            </summary>
            <param name="gatewayId">Id of the gateway to retrieved.</param>
            <returns>Paymentgateway data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PaymentGatewayManager.GetList(Ektron.Cms.Commerce.PaymentGatewayCriteria)">
            <summary>
            Retrieves a list of paymentgateways.
            </summary>
            <param name="criteria">Criteria by which to filter paymentgateway being retrieved.</param>
            <returns>List of paymentgateways meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.ExchangeRateManager">
            <summary>
            Api class for managing commerce exchange rates in Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ExchangeRateManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ExchangeRateManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ExchangeRateManager.Add(Ektron.Cms.Commerce.ExchangeRateData)">
            <summary>
            Adds a new Exchange Rate to the Cms. 
            </summary>
            <param name="exchangeRateData">Exchange rate data to be added.</param>
            <returns>Exchange rate data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ExchangeRateManager.Update(Ektron.Cms.Commerce.ExchangeRateData)">
            <summary>
            Updates an existing Exchange Rate in Cms.
            </summary>
            <param name="exchangeRateData">Exchange rate data to be updated.</param>
            <returns>Exchage rate data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ExchangeRateManager.Delete(Ektron.Cms.Commerce.ExchangeRateData)">
            <summary>
            Deletes an Exchange Rate from the Cms.
            </summary>
            <param name="exchangeRateData">ExchangeRate data to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ExchangeRateManager.GetCurrentExchangeRate">
            <summary>
            Retrieves the current exchange rate.
            </summary>
            <returns>Exchange rate data object retrieved.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ExchangeRateManager.GetCurrentExchangeRate(System.Int32)">
            <summary>
            Retrieves the current exchange rate by exchange currency Id.
            </summary>
            <param name="exchangeCurrencyId">Id of exchangeRate to retrieve.</param>
            <returns>Exchange rate data object retrieved.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ExchangeRateManager.GetList(Ektron.Cms.Commerce.ExchangeRateCriteria)">
            <summary>
            Retrieves a list of exchange rates.
            </summary>
            <param name="criteria">Criteria by which to filter exchange rates being retrieved.</param>
            <returns>List of exchange rates meeting criteria filters.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ExchangeRateManager.GetCurrentList(Ektron.Cms.Commerce.ExchangeRateCriteria)">
            <summary>
            Retrieves a list of current exchange rates.
            </summary>
            <param name="criteria">Criteria by which to filter exchange rates being retrieved.</param>
            <returns>List of exchange rates meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.RecommendationManager">
            <summary>
            It can be used to manipulates the recommendated items to the catalog entry.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RecommendationManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RecommendationManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RecommendationManager.UpdateCrossSell(System.Int64,System.Collections.Generic.IEnumerable{Ektron.Cms.Commerce.RecommendationItemData})">
            <summary>
            Updates the CrossSell.
            </summary>
            <param name="entryId">Id of entry</param>
            <param name="recommendations">Enumerable of RecommendationItemData object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RecommendationManager.UpdateUpSell(System.Int64,System.Collections.Generic.IEnumerable{Ektron.Cms.Commerce.RecommendationItemData})">
            <summary>
            Updates the UpSell.
            </summary>
            <param name="entryId">Id of entry</param>
            <param name="recommendations">Enumerable of RecommendationItemData object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RecommendationManager.Delete(System.Int64)">
            <summary>
            Deletes a recommendation.
            </summary>
            <param name="recommendationId">Id of recommendation to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RecommendationManager.DeleteByEntry(System.Int64)">
            <summary>
            Delete recommendations associated with a catalog entry.
            </summary>
            <param name="entryId">Id of entry to delete recommendations for.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RecommendationManager.GetItem(System.Int64)">
            <summary>
            Retrieves a recommendation by id.
            </summary>
            <param name="recommendationId">Id of recommendation to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.RecommendationManager.GetList(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.RecommendationType)">
            <summary>
             Retrieves a list of RecommendationItemData objects based upon the supplied criteria.
            </summary>
            <param name="entryId">Catalog entry Id.</param>
            <param name="entryLanguage">Catalog entry language.</param>
            <param name="type">Recommendation type.</param>
            <returns>Returns list of recommendation items which are matches the criteria. </returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.PackageManager">
            <summary>
            Api class for managing commerce packages in Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PackageManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PackageManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PackageManager.Add(Ektron.Cms.Commerce.PackageData)">
            <summary>
            Adds a new Package to Cms. The Package.Id property will be populated with the new Package's Id.
            </summary>
            <param name="packageData">PackageData object to add.</param>
            <returns>Package data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PackageManager.Update(Ektron.Cms.Commerce.PackageData)">
            <summary>
            Updates an existing Package in Cms.
            </summary>
            <param name="packageData">PackageData object to save.</param>
            <returns>Package data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PackageManager.Delete(System.Int64)">
            <summary>
            Deletes a Package from the Cms.
            </summary>
            <param name="id">Id of Package to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PackageManager.GetItem(System.Int64)">
            <summary>
            Retrieves a package by package Id.
            </summary>
            <param name="id">Id of package to retrieve.</param>
            <returns>Package data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.PackageManager.GetList(Ektron.Cms.Commerce.PackageCriteria)">
            <summary>
            Retrieves a list of Packages.
            </summary>
            <param name="criteria">Criteria by which to filter package being retrieved.</param>
            <returns>List of Packages meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.ShippingMethodManager">
            <summary>
            Api class for managing shipping methods in CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ShippingMethodManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ShippingMethodManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ShippingMethodManager.Add(Ektron.Cms.Commerce.ShippingMethodData)">
            <summary>
            Adds a new shipping method to Cms.
            </summary>
            <param name="shippingMethodData">ShippingMethodData object to add.</param>
            <returns>ShippingMethod data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ShippingMethodManager.Update(Ektron.Cms.Commerce.ShippingMethodData)">
            <summary>
            Updates an existing shipping method in Cms.
            </summary>
            <param name="shippingMethodData">ShippingMethodData object to save.</param>
            <returns>ShippingMethod data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ShippingMethodManager.Delete(System.Int64)">
            <summary>
            Deletes a shipping method from CMS.
            </summary>
            <param name="shippingMethodId">Id of the Shipping method to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ShippingMethodManager.GetItem(System.Int64)">
            <summary>
            Retrieves the single shipping method by shipping method id.
            </summary>
            <param name="shippingMethodId">Id of the shipping method to retrieved.</param>
            <returns>ShippingMethod data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.ShippingMethodManager.GetList(Ektron.Cms.Commerce.ShippingMethodCriteria)">
            <summary>
            Retrieves a list of shipping methods.
            </summary>
            <param name="criteria">Criteria by which to filter shipping methods being retrieved.</param>
            <returns>List of shipping methods meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.TaxClassManager">
            <summary>
              Api class for managing tax class in CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxClassManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxClassManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxClassManager.Add(Ektron.Cms.Commerce.TaxClassData)">
            <summary>
            Adds a new Tax Class to Cms. The TaxClass.Id property will be populated with the new TaxClass's Id.
            </summary>
            <param name="taxClassData">TaxClassData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxClassManager.Update(Ektron.Cms.Commerce.TaxClassData)">
            <summary>
            Updates an existing Tax Class in Cms.
            </summary>
            <param name="taxClassData">TaxClassData object to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxClassManager.Delete(System.Int64)">
            <summary>
            Deletes a Tax Class from the Cms.
            </summary>
            <param name="id">Id of TaxClass to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxClassManager.IsUsed(System.Int64)">
            <summary>
            Returns whether a TaxClass is used in a product or not.
            </summary>
            <param name="id">Id of TaxClass.</param>
            <returns>returns true, If TaxClass is used in a product.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxClassManager.GetItem(System.Int64)">
            <summary>
            Retrieves a tax class by Id.
            </summary>
            <param name="id">Id of taxClass to retrieve.</param>
            <returns>TaxClassData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxClassManager.GetList(Ektron.Cms.Commerce.TaxClassCriteria)">
            <summary>
            Retrieves a list of Tax Classes.
            </summary>
            <param name="criteria">Criteria by which to filter taxClass being retrieved.</param>
            <returns>List of TaxClass data objects.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.TaxRateManager">
            <summary>
            CMS Class for managing Commerce Tax rates in Cms information.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.Add(Ektron.Cms.Commerce.TaxRateData)">
            <summary>
            Adds a new Tax rate to Cms. The Tax.Id property will be populated with the new Tax's Id.
            </summary>
            <param name="taxRateData">TaxRateData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.Update(Ektron.Cms.Commerce.TaxRateData)">
            <summary>
            Updates an existing tax rate in Cms.
            </summary>
            <param name="taxRateData">TaxRateData object to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.Delete(System.Int64)">
            <summary>
            Deletes a Tax rate from the Cms.
            </summary>
            <param name="taxRateId">Id of Tax to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.DeleteByRegion(System.Int64)">
            <summary>
            Deletes all rates associated with a region
            </summary>
            <param name="regionId">Id of Region to delete rates for.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.DeleteByCountry(System.Int32)">
            <summary>
            Deletes all rates associated with a country
            </summary>
            <param name="countryId">Id of country to delete rates for.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.GetItem(System.Int64)">
            <summary>
            Gets a TaxRate based upon Tax Rate Id.
            </summary>
            <param name="taxRateId">Id of tax rate to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.GetList(Ektron.Cms.Commerce.TaxRateCriteria)">
            <summary>
            Gets alist of rates based upon the supplied criteria.
            </summary>
            <param name="criteria">criteria by which to filter and sort TaxRates.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.GetApplicableTaxRateList(Ektron.Cms.Commerce.AddressData,Ektron.Cms.Commerce.AddressData)">
            <summary>
            Returns a list of applicable tax rates for the supplied addresses.  There will be at most one rate for each available tax class for the the specified addresses.
            </summary>
            <param name="shipFromAddress">Address where the products are coming from.</param>
            <param name="shipToAddress">Address where products are going.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxRateManager.GetApplicableTaxRate(Ektron.Cms.Commerce.AddressData,Ektron.Cms.Commerce.AddressData,System.Int64)">
            <summary>
            Returns the applicable tax rate for the supplied addresses and tax class.  
            </summary>
            <param name="shipFromAddress">Address where the products are coming from.</param>
            <param name="shipToAddress">Address where products are going.</param>
            <param name="taxClassId">The taxClass for which to retrieve a rate</param>
            <returns></returns> 
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.TaxTypeManager">
            <summary>
            Api class for managing Commerce tax types in Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxTypeManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxTypeManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxTypeManager.Add(Ektron.Cms.Commerce.TaxTypeData)">
            <summary>
            Adds a new Tax Type Cms. The TaxType.Id property will be populated with the new TaxType's Id.
            </summary>
            <param name="taxTypeData">TaxTypeData object to add.</param>
            <returns>tax type data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxTypeManager.Update(Ektron.Cms.Commerce.TaxTypeData)">
            <summary>
            Updates an existing Tax Type in Cms.
            </summary>
            <param name="taxTypeData">TaxTypeData object to save.</param>
            <returns>tax type data object</returns> 
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxTypeManager.Delete(System.Int64)">
            <summary>
            Deletes a Tax Type from the Cms.
            </summary>
            <param name="id">Id of TaxType to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxTypeManager.GetItem(System.Int64)">
            <summary>
            Retrieves a tax type by Id.
            </summary>
            <param name="id">Id of taxType to retrieve.</param>
            <returns>tax type data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.TaxTypeManager.GetList(Ektron.Cms.Commerce.TaxTypeCriteria)">
            <summary>
            Retrieves a list of Tax Types.
            </summary>
            <param name="criteria">Criteria by which to filter taxType being retrieved.</param>
            <returns>List of TaxTypeData objects.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.WarehouseManager">
            <summary>
            Api class for managing commerce Warehouses in Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.WarehouseManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.WarehouseManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.WarehouseManager.Add(Ektron.Cms.Commerce.WarehouseData)">
            <summary>
            Adds new warehouse to the CMS.The WarehouseData.Id property will be populated with the new Warehouse's Id.
            </summary>
            <param name="warehouseData">Warehouse data object to add.</param>
            <returns>Warehouse data object addeded</returns> 
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.WarehouseManager.Update(Ektron.Cms.Commerce.WarehouseData)">
            <summary>
            Updates the existing warehouse.
            </summary>
            <param name="warehouseData">WarehouseData object to update.</param>
            <returns>Warehouse data object Updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.WarehouseManager.Delete(System.Int64)">
            <summary>
            Deletes the warehouse from CMS
            </summary>
            <param name="warehouseId">Id of the warehouse to deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.WarehouseManager.SetDefault(System.Int64)">
            <summary>
            Marks the existing warehouse as default warehouse.
            </summary>
            <param name="warehouseId">Id of the warehouse to become default warehouse.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.WarehouseManager.GetDefault">
            <summary>
            Gets the default warehouse.
            </summary>
            <returns>Warehouse data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.WarehouseManager.GetItem(System.Int64)">
            <summary>
            Gets the single warehouse data object by warehouse Id.
            </summary>
            <param name="warehouseId">Id of the warehouse to retrieved.</param>
            <returns>Warehouse data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.WarehouseManager.GetList(Ektron.Cms.Commerce.WarehouseCriteria)">
            <summary>
            Retuns the list of warehouse data object by supplied criteria.
            </summary>
            <param name="criteria">Criteria by which to filter warehouse being retrieved.</param>
            <returns>List of warehouses meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.CommunityGroupManager">
            <summary>
            Community Group Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.Add(Ektron.Cms.CommunityGroupData)">
            <summary>
            Adds a new CommunityGroup, with details from the supplied CommunityGroupData object.
            </summary>
            <param name="communityGroupData">The CommunityGroupData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.Update(Ektron.Cms.CommunityGroupData)">
            <summary>
             Updates a CommunityGroup, with details from the supplied CommunityGroupData object.
            </summary>
            <param name="communityGroupData">The CommunityGroupData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.Delete(System.Int64)">
            <summary>
            Deletes an existing CommunityGroup.
            </summary>
            <param name="id">the identifier of the CommunityGroup to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetItem(System.Int64)">
            <summary>
            Returns details of a CommunityGroup.
            </summary>
            <param name="id">the identifier of the CommunityGroup to get</param>
            <returns>CommunityGroup details in a CommunityGroupData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetList(Ektron.Cms.Community.CommunityGroupCriteria)">
            <summary>
            Returns a list of CommunityGroups that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the CommunityGroups to return</param>
            <returns>a list of CommunityGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetList(Ektron.Cms.Community.UserToCommunityGroupCriteria)">
            <summary>
            Returns a list of CommunityGroups that fit the supplied criteria, which in this case can have be all the groups given a supplied user id.
            </summary>
            <param name="criteria">used to specify, or filter, the CommunityGroups to return</param>
            <returns>a list of CommunityGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetUserList(System.Int64)">
            <summary>
             Returns a list of DirectoryUsers that fit the communityGroupId.
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns>a list of DirectoryUsers</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.IsUserInGroup(System.Int64,System.Int64)">
            <summary>
            Determines if the user is in the group
            </summary>
            <param name="userId">the identifier of the user</param>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetBlogId(System.Int64)">
            <summary>
            Gets the blog id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetFolderId(System.Int64)">
            <summary>
            Gets the folder id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetCalendarId(System.Int64)">
            <summary>
            Gets the calendar id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetDiscussionBoardId(System.Int64)">
            <summary>
            Gets the discussionBoard id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetTaxonomyId(System.Int64)">
            <summary>
            Gets the taxonomy id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.AddUser(System.Int64,System.Int64)">
            <summary>
            Adds a user to a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.RemoveUser(System.Int64,System.Int64)">
            <summary>
            Removes a user from a Community Group
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetMemberStatus(System.Int64,System.Int64)">
            <summary>
            Gets the member status of the user in the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.Invite(System.Int64,System.Int64)">
            <summary>
            Invites a user to a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.Invite(System.Int64,System.String)">
            <summary>
            Invites a email to a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="email">the email of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.RequestJoin(System.Int64,System.Int64)">
            <summary>
            Requests a join to a user
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.AcceptInvite(System.Int64,System.Int64)">
            <summary>
            Accepts an invitation of a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.DeclineInvite(System.Int64,System.Int64)">
            <summary>
            Declines an invitation of a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.GetAdminList(System.Int64)">
            <summary>
            Get the list of admin users for a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.ApproveJoin(System.Int64,System.Int64)">
            <summary>
            Accepts a user join request for community group
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.CommunityGroupManager.DeclineJoin(System.Int64,System.Int64)">
            <summary>
            Decline a user join request for community group
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.CommunityGroupManager.CommunityGroupManagerService">
            <summary>
            returns an instance of the business objects task manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.FavoriteManager">
            <summary>
            Favorite Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteManager.Add(Ektron.Cms.Community.FavoriteItemData)">
            <summary>
            Adds a new Favorite, with details from the supplied FavoriteItemData object.
            </summary>
            <param name="favoriteItemData">The FavoriteItemData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteManager.Update(Ektron.Cms.Community.FavoriteItemData)">
            <summary>
            Updates a Favorite, with details from the supplied FavoriteItemData object.
            </summary>
            <param name="favoriteItemData">The FavoriteItemData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteManager.Delete(System.Int64,Ektron.Cms.Common.FavoriteType)">
            <summary>
            Deletes an existing Favorite.
            </summary>
            <param name="id">the identifier of the Favorite to delete</param>
            <param name="type">favorite type</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteManager.GetItem(System.Int64,Ektron.Cms.Common.FavoriteType)">
            <summary>
            Gets a FavoriteItemData object by ID
            </summary>
            <param name="id">the identifier of the Favorite to get</param>
            <param name="type">favorite type</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteManager.GetList(Ektron.Cms.Community.FavoriteItemCriteria)">
            <summary>
            Gets a list of FavoriteItemData by Criteria
            </summary>
            <param name="criteria">Criteria utilized to retrieve objects</param>
            <returns>a list of FavoriteItemData</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.FavoriteManager.FavoriteManagerService">
            <summary>
            returns an instance of the business objects favorite manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager">
            <summary>
            Framework API class for managing Favorite Taxonomys.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager.Add(Ektron.Cms.Community.FavoriteTaxonomyData)">
            <summary>
            Adds a Favorite's Taxonomy to the CMS.
            </summary>
            <param name="favoriteTaxonomyData">The FavoriteTaxonomyData object to add</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager.Update(Ektron.Cms.Community.FavoriteTaxonomyData)">
            <summary>
            Updates a Favorite's Taxonomy.
            </summary>
            <param name="favoriteTaxonomyData">The FavoriteTaxonomyData object to update</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager.Delete(System.Int64)">
            <summary>
            Deletes a Favorite's Taxonomy item
            </summary>
            <param name="id">The FavoriteTaxonomy Id to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager.GetItem(System.Int64)">
            <summary>
            Gets a single favorite's Taxonomy.  To retrieve the whole or partial parts of the tree, use GetTree().
            </summary>
            <param name="id">ID of the Favortie's Taxonomy to retreive. Internally the folder is stored as Taxonomy so this is the corresponding taxonomy ID.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager.GetTree(System.Int64,System.Int32,System.Boolean,Ektron.Cms.PagingInfo)">
            <summary>
            Gets a Favorite's Taxonomy Tree.
            </summary>
            <param name="id">The FavoriteTaxonomyData id to be retrieved.  Internally the folder is stored as Taxonomy so this is the corresponding taxonomy ID.</param>
            <param name="depth">The FavoriteTaxonomyData structure depth to retrieve</param>
            <param name="includeItems">Set whether the returned object contains included items or not.</param>
            <param name="pagingInfo">Set Paging details</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager.GetUserTaxonomy(System.Int64)">
            <summary>
            Gets a user's Favorites Taxonomy.
            </summary>
            <param name="userId">The user id</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.FavoriteTaxonomyManager.FavoriteFolderManagerService">
            <summary>
            returns an instance of the business objects task manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.FlagManager">
            <summary>
            Flag Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FlagManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FlagManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FlagManager.Add(Ektron.Cms.ObjectFlagData)">
            <summary>
            Adds new flag to content
            </summary>
            <param name="objectFlagData"> The ObjectFlag object</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FlagManager.Update(Ektron.Cms.ObjectFlagData)">
            <summary>
            Update flag type on content
            </summary>
            <param name="objectFlagData"> The ObjectFlag object</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FlagManager.Delete(System.Int64)">
            <summary>
            Delete flag type from content
            </summary>
            <param name="objectFlagId"> The ID of the ObjectFlag type to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FlagManager.GetItem(System.Int64)">
            <summary>
            Get the content item flag information from content item
            </summary>
            <param name="objectFlagId">The ID of the ObjectFlag type to Get.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FlagManager.GetList(Ektron.Cms.Community.FlagCriteria)">
            <summary>
            Returns a list of flag items that fit the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.FlagManager.FlagManagerService">
            <summary>
            returns an instance of the business objects FlagManager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.FriendsManager">
            <summary>
            Friends Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.Add(Ektron.Cms.Community.FriendsData)">
            <summary>
            Adds a new friend. 
            </summary>
            <param name="friendsData">The FriendsData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.Update(Ektron.Cms.Community.FriendsData)">
            <summary>
            Updates an existing friends in the CMS.
            </summary>
            <param name="friendsData">The FriendsData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.Delete(System.Int64)">
            <summary>
            Deletes a friend in the CMS for the currently logged in user.
            </summary>
            <param name="friendId">The ID of the friend to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.Delete(System.Int64,System.Int64)">
            <summary>
            Deletes a friend in the CMS for the supplied user.
            </summary>
            <param name="friendId">The ID of the friend to delete.</param>
            <param name="userId">Id of user deleting friend.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.Invite(System.Int64,System.String,System.String)">
            <summary>
            Invites a user to be your friend.
            </summary>
            <param name="friendId">User ID of person to invite as a friend.</param>
            <param name="subject">Subject ofthe invitation to be sent.</param>
            <param name="message">Message of the invitation to be sent.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.Invite(Ektron.Cms.Common.InvitationSendRequestData)">
            <summary>
            Invites a user to be your friend.
            </summary>
            <param name="invitationSendRequestData">InvitationSendRequestData</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.AcceptInvite(Ektron.Cms.Community.PendingFriendsData)">
            <summary>
            Accepts a friend's invitation.
            </summary>
            <param name="pendingFriendData">Invitation details</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.DeclineInvite(Ektron.Cms.Community.PendingFriendsData)">
            <summary>
            Declines an friend invitation.
            </summary>
            <param name="pendingFriendData">Invitation details</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single FriendsData object from the CMS.
            </summary>
            <param name="friendId">The ID of the user's friend to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.GetItem(System.Int64,System.Int64)">
            <summary>
            Retrieves a single FriendsData object from the CMS for the supplied user..
            </summary>
            <param name="friendId">The ID of the user's friend to retrieve.</param>
            <param name="userId">The ID of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.GetList(Ektron.Cms.Community.FriendsCriteria)">
            <summary>
            Retrieves a list of FriendsData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve friends.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.GetPendingList(System.Int64)">
            <summary>
            Retrieves a list of PendingFriendsData objects with pending state.
            </summary>
            <param name="userId">userId used to retrieve friends.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.GetInvitedList(System.Int64)">
            <summary>
            Retrieves a list of PendingFriendsData objects with invited state.
            </summary>
            <param name="userId">userId used to retrieve friends.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsManager.IsFriend(System.Int64)">
            <summary>
            Check the user is friend to the currently logged in user or not.
            </summary>
            <param name="friendId">Friend UserId</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.FriendsManager.FriendsManagerService">
            <summary>
            returns an instance of the business objects friends manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.FriendsTaxonomyManager">
            <summary>
            Friends taxonomy mamager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsTaxonomyManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsTaxonomyManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsTaxonomyManager.Add(Ektron.Cms.Community.FriendTaxonomyData)">
            <summary>
            Adds a new FriendTaxonomyData item, with details from the supplied FriendTaxonomyData object.
            </summary>
            <param name="friendTaxonomyData">The FriendTaxonomyData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsTaxonomyManager.Update(Ektron.Cms.Community.FriendTaxonomyData)">
            <summary>
            Updates a FriendTaxonomyData item, with details from the supplied friendTaxonomyData object.
            </summary>
            <param name="friendTaxonomyData">The FriendTaxonomyData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsTaxonomyManager.Delete(System.Int64)">
            <summary>
            Deletes an existing FriendTaxonomyData.
            </summary>
            <param name="id">the identifier of the FriendTaxonomyData item to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsTaxonomyManager.GetItem(System.Int64)">
            <summary>
            Returns details of a FriendTaxonomyData item. To retrieve the whole or partial parts of the tree, use GetTree().
            </summary>
            <param name="id">The ID of the FriendTaxonomyData item to get.  Internally the folder is stored as Taxonomy so this is the corresponding taxonomy ID.</param>
            <returns>FriendTaxonomyData details in a FriendTaxonomyData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsTaxonomyManager.GetTree(System.Int64,System.Int32,System.Boolean,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a Friend's Taxonomy Tree.
            </summary>
            <param name="id">Taxonomy ID.  Internally the folder is stored as Taxonomy so this is the corresponding taxonomy ID.</param>
            <param name="depth">depth</param>
            <param name="includeItems">Should items be included?</param>
            <param name="pagingInfo">Set Paging details</param>
            <returns>FriendTaxonomyData details in a FriendTaxonomyData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.FriendsTaxonomyManager.GetUserTaxonomy(System.Int64)">
            <summary>
            Gets a user's Friends Taxonomy.
            </summary>
            <param name="userId">The user ID of the user to retrieve friends Taxonomy for.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.FriendsTaxonomyManager.FriendsFolderManagerService">
            <summary>
            returns an instance of the business objects task manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.MessageBoardManager">
            <summary>
            MessageBoard Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.Add(Ektron.Cms.MessageBoardData)">
            <summary>
            Adds a new MessageBoard post with details from the supplied MessageBoardData object.
            </summary>
            <param name="messageBoardData">messageboard post data to add</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.Update(Ektron.Cms.MessageBoardData)">
            <summary>
            Updates a MessageBoard post with details from the supplied MessageBoardData object.
            </summary>
            <param name="messageBoardData">messageboard post data to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.Delete(System.Int64)">
            <summary>
            Deletes an existing MessageBoard post by ID.
            </summary>
            <param name="id">the ID of the MessageBoard post to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.Delete(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType)">
            <summary>
            Deletes all messageboard posts for a given object.
            </summary>
            <param name="objectId">ID of the object to delete posts for. The type of object identified by the ID is defined by the objectType parameter.</param>
            <param name="objectType">the type of the object delete posts for.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.Delete(System.Collections.Generic.List{System.Int64})">
            <summary>
            Deletes a list existing MessageBoard posts.
            </summary>
            <param name="ids">the list of the ids</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.GetItem(System.Int64)">
            <summary>
            Returns details of a MessageBoard post.
            </summary>
            <param name="id">the identifier of the MessageBoard to get</param>
            <returns>MessageBoard details in a MessageBoardData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.GetList(Ektron.Cms.Community.MessageBoardCriteria)">
            <summary>
            Returns a list of MessageBoard posts that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the MessageBoards to return</param>
            <returns>a list of MessageBoards</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.Approve(System.Int64)">
            <summary>
            Approves a Messageboard post.
            </summary>
            <param name="id">the identifier of the Messageboard post.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.Approve(System.Collections.Generic.List{System.Int64})">
            <summary>
            Approves a list of Messages,
            </summary>
            <param name="ids">the list of the ids</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.GetReplyList(System.Int64)">
            <summary>
            Get a list of replies for  agiven message.
            </summary>
            <param name="id">the identifier of the Message</param>
            <returns>a list of MessageBoards</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.GetUnapprovedList(Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,Ektron.Cms.PagingInfo)">
            <summary>
            Get a list of Unapproved messages from a messageboard for a given object.
            </summary>
            <param name="objectType">Type of object to retrieve pending messages for.</param>
            <param name="objectId">ID of object to retreive pending messages for.</param>
            <param name="paging">Paging parameter to control paging of list.</param>
            <returns>List of MessageBoardData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MessageBoardManager.IsUserMessageBoardAdmin(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
            <summary>
            Check the user that who is the MessageBoard admin or not.
            </summary>
            <param name="objectId"></param>
            <param name="objectType"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.MessageBoardManager.MessageBoardManagerService">
            <summary>
            returns an instance of the business objects messageboard manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.MicromessageManager">
            <summary>
            Micro Message Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.GetList(Ektron.Cms.MicroMessageCriteria)">
            <summary>
            Gets data from the database using the criteria object.
            </summary>
            <param name="criteria">Criteria used to filter results.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.GetUserMessageList(System.Int64,Ektron.Cms.PagingInfo)">
            <summary>
            Gets a list of messages that the user has sent.
            </summary>
            <param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
            <param name="userId">The user ID to get message list for.</param>
            <returns>Returns a list of for the user messages.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.GetPublicMessageList(Ektron.Cms.PagingInfo)">
            <summary>
            Gets a filtered list of messages that the requesting user can see. The list includes public and colleagues messages.
            </summary>
            <param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
            <returns>Returns a list of for the user messages.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.GetColleagueMessageList(Ektron.Cms.PagingInfo)">
            <summary>
            Gets a list of only colleagues Messages.
            </summary>
            <param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.GetItem(System.Int64)">
            <summary>
            Gets a single record from the database.
            </summary>
            <param name="id">The id of the message.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.GetSearchList(System.String,Ektron.Cms.PagingInfo)">
            <summary>
            Gets the search results for test search.
            </summary>
            <param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
            <param name="searchText">The searchText to search</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.IsFullTextSearchInstalled">
            <summary>
            Checks if full text search is installed on the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.Add(Ektron.Cms.MicroMessageData)">
            <summary>
            Adds a new message.
            </summary>
            <param name="data">The micro message data.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.Delete(System.Int64)">
            <summary>
            Deletes a record from the database.
            </summary>
            <param name="Id">The id of the message to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.GetReplyList(System.Int64)">
            <summary>
            Gets a list of replies for a Message.
            </summary>
            <param name="parentMessageId">The id of the message that has replies.</param>
            <returns>Returns a list of replies for the message. </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.AddReply(System.Int64,System.String)">
            <summary>
            Adds a new reply. 
            </summary>
            <param name="parentMessageId">The id of the message to add a reply to.</param>
            <param name="messageText">The text of the reply</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.MicromessageManager.IsSpam(Ektron.Cms.Common.EkEnumeration.MicroMessageSpamControlType,System.Int32,Ektron.Cms.MicroMessageData)">
            <summary>
            Returns a boolean indicating wheather a message is IsSpam or not
            </summary>
            <param name="spamControlType">spamControlType</param>
            <param name="SpamTimeSpan">SpamTimeSpan</param>
            <param name="data">data</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.MicromessageManager.MicromessageManagerService">
            <summary>
            returns an instance of the business objects micromessage manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.PrivateMessageManager">
            <summary>
            Private Message Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.PrivateMessageManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.PrivateMessageManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.PrivateMessageManager.Send(Ektron.Cms.PrivateMessageData)">
            <summary>
            Sends a new private message based on the supplied PrivateMessageData object. Multiple recipients can be added using PrivateMessageData.Recipients property.
            </summary>
            <param name="messageData">The PrivateMessageData object to send.</param>
            <returns>Returns the PrivateMessageData object added.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.PrivateMessageManager.Delete(System.Int64)">
            <summary>
            Deletes a private message for the currently logged in users private message box.
            </summary>
            <param name="id">The ID of the message to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.PrivateMessageManager.MarkRead(System.Int64)">
            <summary>
            Marks the supplied message as read for the currently logged in user.  This method will not work in ApiAccessMode.Admin.  A user is in charge of their own private messages.
            </summary>
            <param name="messageId">Id of Message to mark as read.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.PrivateMessageManager.MarkUnread(System.Int64)">
            <summary>
            Marks the supplied message as unread for the currently logged in user.  This method will not work in ApiAccessMode.Admin.  A user is in charge of their own private messages.
            </summary>
            <param name="messageId">Id of Message to mark as read.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.PrivateMessageManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single PrivateMessageData object from the CMS.
            </summary>
            <param name="id">The ID of the message to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.PrivateMessageManager.GetList(Ektron.Cms.Community.PrivateMessageCriteria)">
            <summary>
            Retrieves a list of PrivateMessageData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve messages.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.PrivateMessageManager.MessageManagerService">
            <summary>
            returns an instance of the business objects message manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.RatingManager">
            <summary>
            Rating Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.Add(Ektron.Cms.RatingData)">
            <summary>
            Adds new Rating for the object
            </summary>
            <param name="ratingData"> The RatingData object</param>
            <returns>The custom RatingData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.Update(Ektron.Cms.RatingData)">
            <summary>
            Update Rating for the object
            </summary>
            <param name="ratingData"> The RatingData object</param>
            <returns>The custom RatingData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.Delete(System.Int64)">
            <summary>
            Delete Rating
            </summary>
            <param name="ratingId"> Rating to be deleted by ID</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.GetItem(System.Int64)">
            <summary>
            Get the Rating item
            </summary>
            <param name="ratingId">The ID of the Rating type to Get.</param>
            <returns>RatingData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.GetList(Ektron.Cms.Community.RatingCriteria)">
            <summary>
            Retrieves a list based on the criteria
            </summary>
            <param name="criteria">Criteria used to retrieve Rating.</param>
            <returns>List of RatingData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.GetStatistics(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
             Retrieves the rating statistic object by object type and object id  
            </summary>
            <param name="objectType">Type of the object has rated</param>
            <param name="objectId">Rated object id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.Purge(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.DateTime,System.DateTime)">
            <summary>
             Purges all ratings of a particular objectId and ObjectType.
            </summary>
            <param name="objectId">The ID of the object that is having its ratings purged.</param>
            <param name="objectType">The Type of the object that is having its ratings purged.</param>
            <param name="startDate">The start date of object that is having its ratings purged.</param>   
            <param name="endDate">The end date of object that is having its ratings purged.</param> 
        </member>
        <member name="M:Ektron.Cms.Framework.Community.RatingManager.Purge(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.DateTime,System.DateTime,Ektron.Cms.Common.EkEnumeration.RatingState)">
            <summary>
             Purges all ratings of a particular objectId and ObjectType.
            </summary>
            <param name="objectId">The ID of the object that is having its ratings purged.</param>
            <param name="objectType">The Type of the object that is having its ratings purged.</param>
            <param name="startDate">The start date of object that is having its ratings purged.</param>   
            <param name="endDate">The end date of object that is having its ratings purged.</param> 
            <param name="ratingState">The rating state of object that is having its ratings purged.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.RatingManager.RatingService">
            <summary>
            returns an instance of the business objects Rating Service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.TagManager">
            <summary>
            Tag Manager 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.Add(Ektron.Cms.TagData)">
            <summary>
            Adds a new tag based on information in a TagData object. 
            tag.Id will be populated with the newly created ID.
            </summary>
            <param name="tagData">The TagData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.Update(Ektron.Cms.TagData)">
            <summary>
            Updates an existing tag in the CMS.
            </summary>
            <param name="tagData">The TagData object to update.</param>
            <returns>Returns the custom CmsData object update</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.Delete(System.Int64)">
            <summary>
            Deletes a tag from the CMS.
            </summary>
            <param name="id">The ID of the tag to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single TagData object from the CMS.
            </summary>
            <param name="id">Tag's id to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.GetList(Ektron.Cms.Community.TagCriteria)">
            <summary>
            Retrieves a list of TagData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve tags.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.Tag(System.String,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
            Tags a content with the given details.
            </summary>
            <param name="tag">The string that contains the tag text</param>
            <param name="objectId">The Object Id to be tagged</param>
            <param name="objectType">The Object Type to be tagged</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.GetTagCloud(Ektron.Cms.Community.TagCloudRequestData,System.Int32@)">
            <summary>
            Returns a TagCloud based upon the request.
            </summary>
            <param name="request">contains the parameters for the tagcloud to retrieve.</param>
            <param name="totalRecords">Returns the total number of tags available in the requested cloud.</param>
            <returns>A TagCloud object representing the request.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TagManager.GetTags(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
            Get Tags by Object Id.
            </summary>
            <param name="objectId">long</param>
            <param name="objectType">CMSObjectTypes</param>
            <returns>List of Tags data</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.TagManager.TagManagerService">
            <summary>
            returns an instance of the business objects TagManager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Content.AssetManager">
            <summary>
            Asset Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.AssetManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.AssetManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.AssetManager.Add(Ektron.Cms.Content.ContentAssetData)">
            <summary>
            Adds new content. (This Method is Not Supported on WCF mode.)
            </summary>
            <param name="assetData"> The assetData object</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.AssetManager.Update(Ektron.Cms.Content.ContentAssetData)">
            <summary>
            Update content. (This Method is Not Supported on WCF mode.)
            </summary>
            <param name="assetData"> The assetData object</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.AssetManager.Delete(System.Int64)">
            <summary>
            Delete content
            </summary>
            <param name="contentId"> The ID of the content to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.AssetManager.GetItem(System.Int64,System.Boolean)">
            <summary>
            Retrieves a single asset item by ID.
            </summary>
            <param name="id">The ID of the content to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.AssetManager.GetList(Ektron.Cms.Content.AssetCriteria)">
            <summary>
            Retrieves a list based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns>List of ContentAssetData objects matching the supplied criteria.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Content.AssetManager.AssetService">
            <summary>
            returns an instance of the business objects Asset Service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Content.ContentRatingManager">
            <summary>
            Content Rating Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentRatingManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentRatingManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentRatingManager.Add(Ektron.Cms.ContentRatingData)">
            <summary>
            Adds new contentRating type
            </summary>
            <param name="contentRating"> The contentRatingTypeData object</param>
            <returns>The custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentRatingManager.Update(Ektron.Cms.ContentRatingData)">
            <summary>
            Update contentRating type
            </summary>
            <param name="contentRating"> The contentRatingtTypeData object</param>
            <returns>The custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentRatingManager.Delete(System.Int64)">
            <summary>
            Delete contentRating type
            </summary>
            <param name="contentRatingId"> The ID of the contentRating type to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentRatingManager.GetItem(System.Int64)">
            <summary>
            Get the content item
            </summary>
            <param name="contentRatingId">The ID of the contentRating type to Get.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentRatingManager.GetList(Ektron.Cms.Content.ContentRatingCriteria)">
            <summary>
            Retrieves a list based on the criteria
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentRatingManager.Purge(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Purges all ratings of a particular content block over a defined date/time range. 
            </summary>
            <param name="contentId">The ID of the content that is having its ratings purged.</param>
            <param name="startDate">The beginning of the date range of content to be purged.</param>
            <param name="endDate">The end of the date range of content to be purged.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Content.ContentRatingManager.ContentRatingService">
            <summary>
            returns an instance of the business objects Content Rating Service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Content.FormManager">
            <summary>
            Framework API class for managing form items withing the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.FormManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.FormManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.FormManager.GetFormFieldList(System.Int64)">
            <summary>
            Retrieves the list of form fields defined in the specified form.
            </summary>
            <param name="FormId">
            	Specifies the form. 
            	Value Type: <see cref="!:Long"/> (System.Long)
            </param>
            <returns>The list for defined fields in the given form.	<see cref="T:Ektron.Cms.FormFieldList"/> (Ektron.Cms.FormFieldList)</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.FormManager.GetSubmittedFormList(Ektron.Cms.Common.FormSubmittedCriteria)">
            <summary>
            Retrieves a list of Submitted Forms with data given the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to define forms to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.FormManager.GetList(Ektron.Cms.Common.FormCriteria)">
            <summary>
            Retrieves a list of HTML FormData without submitted results.
            </summary>
            <param name="criteria">Criteria is used to define which forms to be retrieved.</param>
            <returns>List of HTML FormData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.FormManager.GetItem(System.Int64,System.Int64)">
            <summary>
            Retrieves a single HTML FormData object without submitted results.
            </summary>
            <param name="formId">The HTML form's id to be retrieved.</param>
            <param name="langId">The HTML form's language type id.</param>
            <returns>A FormData Object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.FormManager.Add(Ektron.Cms.FormData)">
            <summary>
            Adds a new HTML Form type of content to the CMS.  formData.Id will be populated with the Id of the new form item.
            </summary>
            <param name="contentData"> The formData object to add to the CMS.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.FormManager.Update(Ektron.Cms.FormData)">
            <summary>
            Updates an existing HTML Form item in the CMS.
            </summary>
            <param name="contentData">The formData object to update.</param>
            <returns>Returns the custom CmsData object update</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.FormManager.Delete(System.Int64,System.Int32)">
            <summary>
            Deletes an existing HTML Form item from the cms, including the submitted data.
            </summary>
            <param name="formId">HTML Form ID to be delted.</param>
            <param name="langId">HTML Form Language ID.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Content.FormManager.FormService">
            <summary>
            returns an instance of the business objects Content Service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Content.LibraryManager">
            <summary>
            Library Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.LibraryManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.LibraryManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.LibraryManager.Add(Ektron.Cms.LibraryData)">
            <summary>
            Adds a new library based on information in an LibraryData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="libraryData">The LibraryData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.LibraryManager.Update(Ektron.Cms.LibraryData)">
            <summary>
            Updates an existing library in the CMS.
            </summary>
            <param name="libraryData">The LibraryData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.LibraryManager.Delete(System.Int64)">
            <summary>
            Deletes a library in the CMS.
            </summary>
            <param name="id">The ID of the library to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.LibraryManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single LibraryData object from the CMS.
            </summary>
            <param name="id">The ID of the library to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.LibraryManager.GetList(Ektron.Cms.Content.LibraryCriteria)">
            <summary>
            Retrieves a list of LibraryData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve librarys.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.LibraryManager.GetLibraryItemByContentId(System.Int64,System.Int32)">
            <summary>
            Retrieves a LibraryData object based upon the ContentId.
            </summary>
            <param name="contentId">ContentId of the Library item to retrieve.</param>
            <param name="languageId">languageId of the Library item to retrieve.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Content.LibraryManager.LibraryManagerService">
            <summary>
            returns an instance of the business objects library manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Content.MetadataTypeManager">
            <summary>
            Meta data type manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.MetadataTypeManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.MetadataTypeManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor with Api mode
            </summary>
            <param name="mode">Api mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.MetadataTypeManager.Add(Ektron.Cms.ContentMetaData)">
            <summary>
            Adds new metadata type
            </summary>
            <param name="metadata"> The metadataTypeData object</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.MetadataTypeManager.Update(Ektron.Cms.ContentMetaData)">
            <summary>
            Update metadata type
            </summary>
            <param name="metadata"> The metadatatTypeData object</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.MetadataTypeManager.Delete(System.Int64)">
            <summary>
            Delete metadata type
            </summary>
            <param name="metadataTypeId"> The ID of the metadata type to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.MetadataTypeManager.GetItem(System.Int64)">
            <summary>
            Get the content item
            </summary>
            <param name="metadataTypeId">The ID of the metadata type to Get.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.MetadataTypeManager.GetList(Ektron.Cms.Content.MetadataTypeCriteria)">
            <summary>
            Retrieves a list based on the criteria
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Content.MetadataTypeManager.MetadataTypeService">
            <summary>
            returns an instance of the business objects MetadataType Service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Content.ContentManager">
            <summary>
            Framework API class for managing Content items withing the CMS.  This API can be used for retreiving both Content and Assets, 
            but for managing assets and retrieving assets specifically, use Ektron.Cms.Framework.Content.AssetManager.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.Add(Ektron.Cms.ContentData)">
            <summary>
            Adds a new piece of content to the CMS.  contentData.Id will be populated with the Id of the new content item.
            </summary>
            <param name="contentData"> The contentData object to add to the CMS.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.Update(Ektron.Cms.ContentData)">
            <summary>
            Updates an existing content item in the CMS.
            </summary>
            <param name="contentData">The contentData object to update.</param>
            <returns>Returns the custom CmsData object update</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.Save(Ektron.Cms.ContentData)">
            <summary>
            Saves an existing content item in the CMS.
            </summary>
            <param name="contentData">The contentData object to save.</param>
            <returns>Returns the custom CmsData object saved</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.Delete(System.Int64)">
            <summary>
            Deletes an existing content item from the CMS.
            </summary>
            <param name="contentId">The ID of the content to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.GetItem(System.Int64,System.Boolean)">
            <summary>
            Retrieves a single content item by ID.
            </summary>
            <param name="id">The ID of the content to retrieve.</param>
            <param name="returnMetadata">Flag indicating whether or not ContentMetadata should also be retreived with the content item.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.GetList(Ektron.Cms.Content.ContentCriteria)">
            <summary>
            Retrieves a list of content based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns>List of ContentData objects matching the supplied criteria.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.GetAssignedTaxonomyList(System.Int64,System.Int32)">
            <summary>
            Retrieves a list of Category/Taxonomy Data that a given content is assigned to.
            </summary>
            <param name="contentId">The content you wish to find all assigned taxonomy for.</param>
            <param name="languageId">The content's language.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.GetList(Ektron.Cms.Content.ContentMetadataCriteria)">
            <summary>
            Retrieves a list of content based on metadata criteria.  Use this method to retreive content based upon metadata values.
            </summary>
            <param name="criteria">Metadata criteria used to retrieve content.</param>
            <returns>List of ContentData objects matching the supplied criteria.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.GetList(Ektron.Cms.Content.ContentCollectionCriteria)">
            <summary>
            Retrieves a list of content based on collection criteria. Use this method to retreive content based upon Collections the content is in.
            </summary>
            <param name="criteria">Content collection criteria used to retrieve content by collections.</param>
            <returns>List of ContentData objects matching the supplied criteria.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.GetList(Ektron.Cms.Content.ContentTaxonomyCriteria)">
            <summary>
            Retrieves a list of content based on taxonomy criteria.  Use this method to retreive content based upon taxonomies the content is in.
            </summary>
            <param name="criteria">taxonomy criteria used to retrieve content.</param>
            <returns>List of ContentData objects matching the supplied criteria.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.GetContentByHistoryId(System.Int64)">
            <summary>
            Retrieves the corresponding content by the history ID.
            </summary>
            <param name="historyId">The history ID</param>
            <returns>Ektron.Cms.ContentData</returns>
            <remarks>Read permission required.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.GetHistoryList(System.Int64)">
            <summary>
            Retrieves a list of ContentHistoryData objects based on Content Id.
            </summary>
            <param name="contentId">Identifier of the Content</param>
            <returns>List of Ektron.Cms.ContentHistoryData</returns>
            <remarks>Read permission is required to perform this operation.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.CheckOut(System.Int64)">
            <summary>
            Checks out a content item
            </summary>
            <param name="contentId">ID of the content item to be checked out.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.CheckIn(System.Int64)">
            <summary>
            Checks in a content item.
            </summary>
            <param name="contentId">ID of the content item to be checked in.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.Submit(System.Int64)">
            <summary>
            Submits a content item for publishing.
            </summary>
            <param name="contentId">ID of the content item to be submitted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.Approve(System.Int64)">
            <summary>
            Submits a content item for publishing.
            </summary>
            <param name="contentId">ID of the content item to be submitted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.Decline(System.Int64,System.String)">
            <summary>
            Declines a Content Item for Declining 
            </summary>
            <param name="contentId"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.Cancel(System.Int64)">
            <summary>
            Undo the last changes of the content
            </summary>
            <param name="contentId">Content Id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.GetHtmlDifference(System.String,System.String)">
            <summary>
            Returns the differences between two strings of content html. 
            </summary>
            <param name="oldHtml">The old text.</param>
            <param name="newHtml">The new text.</param>
            <returns>string of differences</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.AssignTaxonomy(System.Int64,System.Int64)">
            <summary>
            Assigns a Content item to a Taxonomy category.
            </summary>
            <param name="contentId">ID of the Content item to assign to a category.</param>
            <param name="categoryId">ID of the Taxonomy Category to assign content to.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.RemoveTaxonomy(System.Int64,System.Int64)">
            <summary>
            Removes a Content item from a Taxonomy category.
            </summary>
            <param name="contentId">ID of the Content item to remove from category.</param>
            <param name="categoryId">ID of the Taxonomy Category to remove content from.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.MoveContent(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            Move content from one folder to another folder that specified as folderid
            </summary>
            <param name="contentIds">List of content Ids to moved</param>        
            <param name="folderId">Id of the folder to hold the content</param>           
        </member>
        <member name="M:Ektron.Cms.Framework.Content.ContentManager.CopyContent(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Copy content from one folder to another folder that specified as folderid
            </summary>
            <param name="contentId"></param>
            <param name="folderId"></param>
            <param name="languageId"></param>
            <param name="isPublish"></param>
        </member>
        <member name="P:Ektron.Cms.Framework.Content.ContentManager.ContentService">
            <summary>
            returns an instance of the business objects Content Service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Content.TemplateManager">
            <summary>
            Template Manager Class 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.TemplateManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.TemplateManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.       
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.TemplateManager.Add(Ektron.Cms.TemplateData)">
            <summary>
            Adds a new Template based on information in a TemplateData.
            </summary>
            <param name="templateData">The TemplateData object to add</param>
            <returns>TemplateData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.TemplateManager.Update(Ektron.Cms.TemplateData)">
            <summary>
            Updates an existing Template in the CMS.
            </summary>
            <param name="templateData">The TemplateData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.TemplateManager.Delete(System.Int64)">
            <summary>
            Deletes a Template in the CMS.
            </summary>
            <param name="templateId">The ID of the Template to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.TemplateManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single TemplateData object from the CMS.
            </summary>
            <param name="templateId">The ID of the Template to retrieve.</param>
            <returns>TemplateData object found.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Content.TemplateManager.GetList(Ektron.Cms.Common.TemplateCriteria)">
            <summary>
            Retrieves a list of TemplateData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Object used to perform filtering based on several TemplateData object properties.</param>
            <returns>A list of TemplateData objects found</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Content.TemplateManager.TemplateService">
            <summary>
            returns an instance of the business objects Template Service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Device.CmsDeviceConfiguration">
            <summary>
            CmsDeviceConfiguration
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.CmsDeviceConfiguration.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.CmsDeviceConfiguration.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.CmsDeviceConfiguration.Add(Ektron.Cms.Device.CmsDeviceConfigurationData)">
            <summary>
            Adds a new Device, with details from the supplied CmsDeviceConfigurationData object.
            </summary>
            <param name="deviceType">The CmsDeviceConfigurationData object to add.</param>
            <returns>Returns the Id of the CmsDeviceConfigurationData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.CmsDeviceConfiguration.Update(Ektron.Cms.Device.CmsDeviceConfigurationData)">
            <summary>
            Updates a Device, with details from the supplied CmsDeviceConfigurationData object.
            </summary>
            <param name="deviceType">The CmsDeviceConfigurationData object to update.</param>
            <returns>Returns the Id of the CmsDeviceConfigurationData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.CmsDeviceConfiguration.Delete(System.Int64)">
            <summary>
            Deletes an existing Device.
            </summary>
            <param name="id">The identifier number of the Device to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.CmsDeviceConfiguration.GetItem(System.Int64)">
            <summary>
            Retrieves Device Item by the specified Id
            </summary>
            <param name="id">Id of the Device object to retrieve</param>
            <returns>CmsDeviceConfigurationData object with details of the Device</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.CmsDeviceConfiguration.GetList(Ektron.Cms.Device.CmsDeviceConfigurationCriteria)">
            <summary>
            Returns a list of Devices that fit the supplied criteria.
            </summary>
            <param name="criteria">Used to specify, or filter, the Devices to return</param>
            <returns>A list of Devices</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.CmsDeviceConfiguration.Reorder(System.Collections.Generic.List{Ektron.Cms.Device.CmsDeviceConfigurationData})">
            <summary>
            Reorder devices.
            </summary>
            <param name="deviceTypes">Devices types to reorder.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Device.CmsDeviceConfiguration.CmsDeviceConfigurationService">
            <summary>
            returns an instance of the CmsDeviceConfiguration service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Device.DevicePreviewManager">
            <summary>
            Provides access to previews associated with device breakpoints.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.Device.DevicePreviewManager.devicePreviewService">
            <summary>
            The device preview manager instance.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.Device.DevicePreviewManager"/> class
            with the default values.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.Device.DevicePreviewManager"/> class
            in the specified mode.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.Add(Ektron.Cms.Mobile.DevicePreviewData)">
            <summary>
            Adds the specified device preview.
            </summary>
            <param name="preview">The device preview.</param>
            <returns>
            The added device preview
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.Delete(System.Int64)">
            <summary>
            Deletes the device preview with the specified ID.
            </summary>
            <param name="id">The device preview ID.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.GetAll">
            <summary>
            Gets all available preview devices
            </summary>
            <returns>
            The list of all preview devices
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.GetItem(System.Int64)">
            <summary>
            Gets the specified device preview.
            </summary>
            <param name="id">The ID of the device preview.</param>
            <returns>
            The specified device preview or null.
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.DevicePreviewProperty})">
            <summary>
            Gets a list of device previews matching the specified criteria.
            </summary>
            <param name="criteria">The search criteria.</param>
            <returns>
            The list of matching preview devices
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.GetList(System.Int64)">
            <summary>
            Gets a list of device previews associated with the specified breakpoint ID.
            </summary>
            <param name="breakpointId">The breakpoint ID.</param>
            <returns>
            The list of matching preview devices
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.GetList(System.Int64,System.Int64)">
            <summary>
            Gets a list of device previews associated with the specified breakpoint ID and
            device preview template ID.
            </summary>
            <param name="breakpointId">The breakpoint ID.</param>
            <param name="templateId">The template ID.</param>
            <returns>
            The list of matching preview devices
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.GetTemplates">
            <summary>
            Gets a list of all device preview templates.
            </summary>
            <returns>
            The list of all device preview templates.
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.Update(Ektron.Cms.Mobile.DevicePreviewData)">
            <summary>
            Updates the specified device preview.
            </summary>
            <param name="preview">The device preview.</param>
            <returns>
            The updated device preview.
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Device.DevicePreviewManager.Update(System.Int64,System.Boolean)">
            <summary>
            Updates the device preview.
            </summary>
            <param name="id">ID of the device preview.</param>
            <param name="enablePreview">if set to <c>true</c> enables the device preview in the UI.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Device.DevicePreviewManager.DevicePreviewService">
            <summary>
            Gets the device preview manager instance.
            </summary>
            <value>
            The device preview manager instance.
            </value>
        </member>
        <member name="T:Ektron.Cms.Framework.Flag.FlagDefinitionManager">
            <summary>
            FlagDefinition Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Flag.FlagDefinitionManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Flag.FlagDefinitionManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Flag.FlagDefinitionManager.Add(Ektron.Cms.FlagDefData)">
            <summary>
            Adds a new FlagDefinitionData object.         
            </summary>
            <param name="FlagDefinitionData">The FlagDefinitionData object to add.</param>
            <returns>Returns the FlagDefinitionData added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Flag.FlagDefinitionManager.Update(Ektron.Cms.FlagDefData)">
            <summary>
            Updates an existing FlagDefinitionData in the CMS.
            </summary>
            <param name="FlagDefinitionData">The FlagDefinitionData object to update.</param>
            <returns>Returns the FlagDefinitionData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Flag.FlagDefinitionManager.Delete(System.Int64)">
            <summary>
            Deletes a FlagDefinitionData in the CMS.
            </summary>
            <param name="id">The ID of the FlagDefinitionData to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Flag.FlagDefinitionManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single FlagDefinitionData object from the CMS.
            </summary>
            <param name="id">The ID of the FlagDefinitionData to retrieve.</param>
            <returns>FlagDefinitionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Flag.FlagDefinitionManager.GetList(Ektron.Cms.Flag.FlagDefinitionCriteria)">
            <summary>
            Retrieves a list of FlagDefinitionData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve FlagDefinitionData.</param>
            <returns>List of FlagDefinitionData</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Flag.FlagDefinitionManager.FlagDefinitionManagerService">
            <summary>
            returns an instance of the business objects flag definition manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Notifications.NotificationManager">
            <summary>
            Api class for sending out notifications in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationManager.Send(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Sends notifications based upon the supplied activity.
            </summary>
            <param name="activity">The activity that has occured and will result in notifications being sent.  The Activity.Message property is ignored and will be retrieved based upon CMS message settings.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationManager.Send(Ektron.Cms.Notifications.NotificationMessageData)">
            <summary>
            Sends notifications based upon supplie dnotification message data.
            </summary>
            <param name="notificationMessage">data object defining message to send and the user to send it to.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Notifications.NotificationManager.NotificationService">
            <summary>
            Notification Service
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Notifications.NotificationManager.IsNotificationReplyMessagePrepended">
            <summary>
            Gets setting indicating if the Notification Email Reply message should be prepended to the notification email.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Organization.MenuManager">
            <summary>
            Menu Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.Add(Ektron.Cms.Organization.MenuData)">
            <summary>
            Adds the specified menu data.
            </summary>
            <param name="menuData">The menu data.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.Add(Ektron.Cms.Organization.MenuItemData)">
            <summary>
            Adds the specified menu item data.
            </summary>
            <param name="menuItemData">The menu item data.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.Add(Ektron.Cms.Organization.SubMenuData)">
            <summary>
            Adds the specified Sub menu data.
            </summary>
            <param name="subMenuData">The Sub Menu Data.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.DeleteMenu(System.Int64)">
            <summary>
            Deletes the menu and all of its children.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.DeleteMenuItem(System.Int64)">
            <summary>
            Deletes the menu item and all of its children.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.GetMenu(System.Int64)">
            <summary>
            Retrieves a menu item by ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.GetMenuItem(System.Int64)">
            <summary>
            Retrieves a menu item by ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.GetTree(System.Int64)">
            <summary>
            Gets the menu and all of its children by MenuId. Can get the root level or from a SubMenu.
            </summary>
            <param name="menuId">The menu id.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.GetMenuList(Ektron.Cms.Organization.MenuCriteria)">
            <summary>
            Get a list of MenuData, not menubase data, based upon the supplied criteria.
            </summary>
            <param name="criteria">The criteria to get menus.</param>
            <returns>A list of Menudata.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.GetMenuItemList(Ektron.Cms.Organization.MenuItemCriteria)">
            <summary>
            Returns a list of menu ites based upon the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the menu items to return</param>
            <returns>A list of menuitemdata</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.Update(Ektron.Cms.Organization.MenuData)">
            <summary>
            Updates the specified menu data.
            </summary>
            <param name="menuData">The menu data.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.Update(Ektron.Cms.Organization.MenuItemData)">
            <summary>
            Updates the specified menu item data.
            </summary>
            <param name="menuItemData">The menu item data.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.MenuManager.Update(Ektron.Cms.Organization.SubMenuData)">
            <summary>
            Updates Menu Data Only for the sub menu item
            </summary>
            <param name="subMenuData"></param>
        </member>
        <member name="P:Ektron.Cms.Framework.Organization.MenuManager.MenuManagerService">
            <summary>
            returns an instance of the business objects task manager service.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Packaging.PackageManager.Add(Ektron.Cms.Contracts.Packaging.Package)">
            <summary>
            Add a new package to the system
            </summary>
            <param name="package">The package to add</param>
            <returns>The package added complete with assigned Id</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Packaging.PackageManager.Update(Ektron.Cms.Contracts.Packaging.Package)">
            <summary>
            Updates an existing package
            </summary>
            <param name="package">The package to update</param>
            <returns>The updated package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Packaging.PackageManager.Delete(System.Guid)">
            <summary>
            Delete a single package 
            </summary>
            <param name="Id">The ID of the package to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Packaging.PackageManager.GetItem(System.Guid)">
            <summary>
            Get a single package from the system
            </summary>
            <param name="Id">The Id of the package to retrieve</param>
            <returns>A package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Packaging.PackageManager.GetList(Ektron.Cms.Contracts.Packaging.PackageCriteria)">
            <summary>
            Gets a list of packages from the system based on the provided criteria
            </summary>
            <param name="criteria">Package Crieria used for list retrieval</param>
            <returns>A list of packages</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.PageBuilder.PageAssociationManager">
            <summary>
            Page association Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.PageBuilder.PageAssociationManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.PageBuilder.PageAssociationManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.PageBuilder.PageAssociationManager.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.PageBuilder.PageAssociationProperty})">
            <summary>
            Gets the list of page to object associations.
            </summary>
            <returns>List of page to object associations</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.PageBuilder.PageAssociationManager.PageAssociationService">
            <summary>
            Gets instance to IPageAssociation.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Search.QueryPropositionManager">
            <summary>
            The QueryPropositionManager provides access to query completion functionality
            of the configured search provider. It predicts search terms based on partial
            term inputs.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.QueryPropositionManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.QueryPropositionManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">
            Sets the current API access mode. If set to Admin, the API runs with the 
            permissions of an administrator.
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.QueryPropositionManager.GetQuerySuggestions(System.String,System.Int32)">
            <summary>
            Return Query suggestions based on request parameters.
            </summary>
            <param name="searchText">Query text</param>
            <param name="maxCount">Maximum number of query completions requested</param>
            <returns>Query suggestions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="T:System.ArgumentNullException">null request object passed to the function</exception>
            <exception cref="T:System.ArgumentException">One or more properties of the request object are null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="T:System.NotSupportedException">GetQuerySuggestions Not Supported Exception</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.QueryPropositionManager.GetQuerySuggestions(Ektron.Cms.Search.QuerySuggestionRequest)">
            <summary>
            Return Query suggestions based on request parameters.
            </summary>
            <param name="request">QuerySuggestionRequest parameters</param>
            <returns>Query suggestions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="T:System.ArgumentNullException">null request object passed to the function</exception>
            <exception cref="T:System.ArgumentException">One or more properties of the request object are null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="T:System.NotSupportedException">GetQuerySuggestions Not Supported Exception</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.QueryPropositionManager.GetQueryCompletions(Ektron.Cms.Search.QueryCompletionRequest)">
            <summary>
            Gets query completions as directed by the specified query completion 
            request parameters.
            </summary>
            <param name="request">Query completion request parameters</param>
            <returns>Query completions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="T:System.ArgumentNullException">Null request object passed to the function</exception>
            <exception cref="T:System.ArgumentException">One or more properties of the request object are null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="T:System.NotSupportedException">GetQueryCompletions Not Supported Exception</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.QueryPropositionManager.GetQueryCompletions(System.String,System.Int32)">
            <summary>
            Gets query completions as directed by the specified query completion 
            request parameters.
            </summary>
            <param name="searchText">Search term</param>
            <param name="maxCount">
            Suggested maximum count of query completions for the search engine. Actual counts
            may vary according to term availability as determined by the search engines internal
            algorithms.
            </param>
            <returns>Query completions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="T:System.ArgumentException">The 'searchText' parameter is null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="T:System.NotSupportedException">GetQueryCompletions Not Supported Exception</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.QueryPropositionManager.GetQueryCompletions(System.String,System.Int32,Ektron.Cms.Search.QueryCompletionSortOrder)">
            <summary>
            Gets query completions as directed by the specified query completion 
            request parameters.
            </summary>
            <param name="searchText">Search term</param>
            <param name="maxCount">
            Suggested maximum count of query completions for the search engine. Actual counts
            may vary according to term availability as determined by the search engines internal
            algorithms.
            </param>
            <param name="sortOrder">Order in which to return query completions</param>
            <returns>Query completions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="T:System.ArgumentException">The 'searchText' parameter is null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="T:System.NotSupportedException">GetQueryCompletions Not Supported Exception</exception>
        </member>
        <member name="P:Ektron.Cms.Framework.Search.QueryPropositionManager.QueryPropositionService">
            <summary>
            Gets the underlying query proposition service supporting the configured
            search provider.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Search.SearchManager">
            <summary>
            The SearchManager provides access to query the index of a
            configured search provider.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">
            Sets the current API access mode.  If set to Admin, the API runs with 
            the permissions of an administrator.
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchManager.Search(Ektron.Cms.Search.AdvancedSearchCriteria)">
            <summary>
            Submits a query according to the specified criteria. The AdvancedSearchCriteria is
            intended to target specific, narrow, sets of data. The length and complexity of queries 
            supported by this method are subject to the limitations of the configured search provider.
            For some search providers, this method may also allow for longer or more complicated queries 
            than may be allowed with the KeywordSearchCriteria. This method is not supported for all 
            search providers. Please see the Ektron Developer Reference for guidance.
            </summary>
            <param name="criteria">Advanced search criteria</param>
            <returns>Search response data</returns>
            <exception cref="T:Ektron.Cms.Search.AllNoiseException">Query contained only noise words</exception>
            <exception cref="T:Ektron.Cms.Search.EmptyQueryException">Search criteria contained an empty query</exception>
            <exception cref="T:Ektron.Cms.Search.EmptyReturnPropertiesException">No return properties were specified</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidOrderByException">A specified "order by" property was not included in the return properties collection</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidPropertyException">A specified property does not exist</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidScopeException">The specified scope is invalid or does not exist</exception>
            <exception cref="T:Ektron.Cms.Search.MalformedExpressionException">The specified expression is invalid</exception>
            <exception cref="T:Ektron.Cms.Search.NoResultsException">The query yielded no results</exception>
            <exception cref="T:Ektron.Cms.Search.SearchAuthorizationException">The configured credentials are invalid</exception>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">The site has not been configured for search</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchManager.Search(Ektron.Cms.Search.KeywordSearchCriteria)">
            <summary>
            Submits a query according to the specified criteria. The criteria may be a combination
            of free form search terms and programmatically generated query expressions. The length
            and complexity of queries supported by this method are subject to the limitations of the
            configured search provider.
            </summary>
            <param name="criteria">Search criteria</param>
            <returns>Search response data</returns>
            <exception cref="T:Ektron.Cms.Search.AllNoiseException">Query contained only noise words</exception>
            <exception cref="T:Ektron.Cms.Search.EmptyQueryException">Search criteria contained an empty query</exception>
            <exception cref="T:Ektron.Cms.Search.EmptyReturnPropertiesException">No return properties were specified</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidOrderByException">A specified "order by" property was not included in the return properties collection</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidPropertyException">A specified property does not exist</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidScopeException">The specified scope is invalid or does not exist</exception>
            <exception cref="T:Ektron.Cms.Search.MalformedExpressionException">The specified expression is invalid</exception>
            <exception cref="T:Ektron.Cms.Search.NoResultsException">The query yielded no results</exception>
            <exception cref="T:Ektron.Cms.Search.SearchAuthorizationException">The configured credentials are invalid</exception>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">The site has not been configured for search</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
        </member>
        <member name="P:Ektron.Cms.Framework.Search.SearchManager.SearchService">
            <summary>
            Gets the underlying service facilitating access to the configured search
            provider.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Search.SearchPropertyRuleManager">
            <summary>
            SearchPropertyRuleManager manages formatting rules for outgoing search properties. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchPropertyRuleManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchPropertyRuleManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchPropertyRuleManager.Process(Ektron.Cms.Search.SearchResultData)">
            <summary>
            Formats the given search result based on the list of added rules.
            </summary>
            <param name="result">Result to be formatted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchPropertyRuleManager.Process(Ektron.Cms.Search.SearchCriteria)">
            <summary>
            Processes the given search criteria.
            </summary>
            <param name="criteria">Criteria to be processed</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchPropertyRuleManager.Add(Ektron.Cms.Search.ISearchResultRule)">
            <summary>
            Adds a formatting rule.
            </summary>
            <param name="rule">Formatting rule</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchPropertyRuleManager.Add(Ektron.Cms.Search.ISearchCriteriaRule)">
            <summary>
            Adds a criteria processing rule.
            </summary>
            <param name="rule">Criteria processing rule</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Search.SearchPropertyRuleManager.SearchPropertyRuleService">
            <summary>
            Search Property Rule Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Search.SearchSettingsManager">
            <summary>
            Search Settings Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchSettingsManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchSettingsManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Search.SearchSettingsManager.Get">
            <summary>
            Gets the site search settings.
            </summary>
            <returns>Instance of requested SearchSettings.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Search.SearchSettingsManager.SearchSettingsService">
            <summary>
            Gets instance to ISearchSettings.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.Mobile.AdaptiveImageSettingManager">
            <summary>
            Manager for adaptive image
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.AdaptiveImageSettingManager.GetSettings">
            <summary>
            Get setting from CMS
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.AdaptiveImageSettingManager.SaveSettings(Ektron.Cms.Settings.Mobile.AdaptiveImageSettingData)">
            <summary>
            Save settings to DB
            </summary>
            <param name="setting"></param>
        </member>
        <member name="T:Ektron.Cms.Settings.Authoring.StyleManager">
            <summary>
            StyleManager class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Settings.Authoring.StyleManager.#ctor">
            <summary>
            Constructor - Initializes a new instance of the StyleManager  class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Settings.Authoring.StyleManager.Add(Ektron.Cms.Settings.Authoring.StyleData)">
            <summary>
            Add the StyleData
            </summary>
            <param name="data">StyleData object.</param>
            <returns>returns added StyleData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Settings.Authoring.StyleManager.Update(Ektron.Cms.Settings.Authoring.StyleData)">
            <summary>
            Updates the StyleData.
            </summary>
            <param name="data">StyleData object.</param>
            <returns>returns updated StyleData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Settings.Authoring.StyleManager.Delete(System.Int64)">
            <summary>
            Deletes Style by StyleId.
            </summary>
            <param name="StyleId">Id of Style.</param>
        </member>
        <member name="M:Ektron.Cms.Settings.Authoring.StyleManager.GetItem(System.Int64)">
            <summary>
            Gets Style by StyleID.
            </summary>
            <param name="StyleId">Id of the Style.</param>
            <returns>returns StyleData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Settings.Authoring.StyleManager.GetList(Ektron.Cms.Settings.Authoring.StyleCriteria)">
            <summary>
            Gets list of style based on supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the Style.</param>
            <returns>returns list of StyleData object.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.CustomPropertyManager">
            <summary>
            Custom property manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyManager.Add(Ektron.Cms.UserCustomPropertyData)">
            <summary>
            Adds a new UserCustomProperty, with details from the supplied UserCustomPropertyData object.
            </summary>
            <param name="UCPData"></param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyManager.Update(Ektron.Cms.UserCustomPropertyData)">
            <summary>
            Updates a UserCustomProperty, with details from the supplied UserCustomPropertyData object.
            </summary>
            <param name="UCPData"></param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyManager.Delete(System.Int64)">
            <summary>
            Deletes an existing UserCustomProperty.
            </summary>
            <param name="id">the identifier of the UserCustomProperty to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyManager.GetItem(System.Int64)">
            <summary>
            Returns details of a UserCustomProperty.
            </summary>
            <param name="id">the identifier of the UserCustomProperty to get</param>
            <returns>UserCustomProperty details in a UserCustomPropertyData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyManager.GetList(Ektron.Cms.User.CustomPropertyCriteria)">
            <summary>
            Returns a list of UserCustomProperties that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the UserCustomProperties to return</param>
            <returns>a list of UserCustomProperties</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.CustomPropertyManager.CustomPropertyManagerService">
            <summary>
            returns an instance of the business objects CustomPropertyManager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.CustomPropertyObject">
            <summary>
            custom propery object class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyObject.#ctor">
            <summary>
            constructor 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyObject.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor with api mode
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyObject.GetItem(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,System.Int64)">
            <summary>
            Returns details of a CustomProperty
            </summary>
            <param name="objectId">Identifier of the CustomProperty to get</param>
            <param name="languageId">Language id of the CustomProperty to get</param>
            <param name="cmsObjectType">ObjectType of the CustomProperty to get</param>
            <param name="propertyId">Property id of the CustomPropery to get</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyObject.GetList(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,Ektron.Cms.PagingInfo)">
            <summary>
            
            </summary>
            <param name="objectId">Identifier of the CustomProperty to get</param>
            <param name="languageId">Language id of the CustomProperty to get</param>
            <param name="cmsObjectType">ObjectType of the CustomProperty to get</param>
            <param name="paging">Paging info details</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyObject.Add(Ektron.Cms.Common.CustomPropertyObjectData)">
            <summary>
            Adds a new CustomPropertyObjectData.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyObject.Update(Ektron.Cms.Common.CustomPropertyObjectData)">
            <summary>
            Update method
            </summary>
            <param name="data">data</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CustomPropertyObject.Delete(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,System.Int64)">
            <summary>
            Delete Method.
            </summary>
            <param name="objectId">ObjectId.</param>
            <param name="languageId">LanguageId.</param>
            <param name="cmsObjectType">EkEnumeration.CustomPropertyObjectType.</param>
            <param name="propertyId">PropertyId.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.CustomPropertyObject.GetInstance">
            <summary>
            Get Instance an ICustomPropertyObject.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.Mobile.DeviceBreakpointManager">
            <summary>
            Api class for managing device breakpoints in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.DeviceBreakpointManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.DeviceBreakpointManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.DeviceBreakpointManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single DeviceBreakpointData object from the CMS.
            </summary>
            <param name="id">The ID of the DeviceBreakpointData object to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.DeviceBreakpointManager.GetList(Ektron.Cms.Settings.Mobile.DeviceBreakpointCriteria)">
            <summary>
            Retrieves a list of DeviceBreakpointData objects based upon the supplied criteria.
            </summary>
            <param name="id">Criteria used to retrieve DeviceBreakpointData.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.DeviceBreakpointManager.Add(Ektron.Cms.Settings.Mobile.DeviceBreakpointData)">
            <summary>
            Add a DeviceBreakpointData objects to CMS.
            </summary>
            <param name="deviceBreakpointData">DeviceBreakpointData to be added</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.DeviceBreakpointManager.Update(Ektron.Cms.Settings.Mobile.DeviceBreakpointData)">
            <summary>
            Update a DeviceBreakpointData objects to CMS.
            </summary>
            <param name="deviceBreakpointData"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.DeviceBreakpointManager.Delete(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.DxH.DxHConnectionManager">
            <summary>
            Api class for managing DxHConnection in the CMS.
            </summary>
            
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHConnectionManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHConnectionManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHConnectionManager.Add(Ektron.Cms.Settings.DxH.DxHConnectionData)">
            <summary>
            Adds a new DxHConnectionData object in the CMS. 
            DxHConnectionData.Id will be populated with the newly created ID.
            </summary>
            <param name="dxhConnectionData">The DxHConnectionData object to add.</param>
            <returns>Returns the DxHConnectionData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHConnectionManager.Update(Ektron.Cms.Settings.DxH.DxHConnectionData)">
            <summary>
            Updates an existing DxHConnectionData in the CMS.
            </summary>
            <param name="dxhConnectionData">The DxHConnectionData object to update.</param>
            <returns>Returns the DxHConnectionData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHConnectionManager.Delete(System.Int64)">
            <summary>
            Deletes a DxHConnectionData object in the CMS.
            </summary>
            <param name="id">The ID of the DxHConnectionData to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHConnectionManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single DxHConnectionData object from the CMS.
            </summary>
            <param name="id">The ID of the DxHConnectionData object to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHConnectionManager.GetList(Ektron.Cms.Settings.DxH.DxHConnectionCriteria)">
            <summary>
            Retrieves a list of DxHConnectionData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve DxHConnectionData.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.DxH.DxHConnectionManager.DxHConnectionDataService">
            <summary>
            Gets instance to DxHConnectionManager.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.DxH.DxHUserConnectionManager">
            <summary>
            Api class for managing DXHUserConnection in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHUserConnectionManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHUserConnectionManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHUserConnectionManager.Add(Ektron.Cms.Settings.DxH.DxHUserConnectionData)">
            <summary>
            Adds a new DxHUserConnectionData object in the CMS. 
            DxHUserConnectionData.Id will be populated with the newly created ID.
            </summary>
            <param name="dxhUserConnectionData">The DxHUserConnectionData object to add.</param>      
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHUserConnectionManager.Update(Ektron.Cms.Settings.DxH.DxHUserConnectionData)">
            <summary>
            Updates an existing DxHUserConnectionData in the CMS.
            </summary>
            <param name="dxhUserConnectionData">The DxHUserConnectionData object to update.</param>       
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHUserConnectionManager.Delete(System.Int64)">
            <summary>
            Deletes a DxHUserConnectionData object in the CMS.
            </summary>
            <param name="id">The ID of the DxHUserConnectionData to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHUserConnectionManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single DxHUserConnectionData object from the CMS.
            </summary>
            <param name="id">The ID of the DxHUserConnectionData object to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHUserConnectionManager.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Settings.DxH.DxHUserConnectionProperty})">
            <summary>
            Retrieves a list of DxHUserConnectionData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve DxHUserConnectionData.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.DxH.DxHUserConnectionManager.DxHUserConnectionDataService">
            <summary>
            Gets instance to DxHUserConnectionManager.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager">
            <summary>
            Api class for managing DxHMappingData in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.Add(Ektron.Cms.Settings.DxH.DxHMappingData)">
            <summary>
            Adds a new DxHMappingData object in the CMS. 
            DxHMappingData.Id will be populated with the newly created ID.
            </summary>
            <param name="DxHMappingData">The DxHMappingData object to add.</param>
            <returns>Returns the DxHMappingData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.Update(Ektron.Cms.Settings.DxH.DxHMappingData)">
            <summary>
            Updates an existing DxHMappingData in the CMS.
            </summary>
            <param name="DxHMappingData">The DxHMappingData object to update.</param>
            <returns>Returns the DxHMappingData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.Delete(System.Int64)">
            <summary>
            Deletes a DxHMappingData object in the CMS.
            </summary>
            <param name="id">The ID of the DxHMappingData to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single DxHMappingData object from the CMS.
            </summary>
            <param name="id">The ID of the DxHMappingData object to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.GetList(Ektron.Cms.Settings.DxH.DxHMappingCriteria)">
            <summary>
            Retrieves a list of DxHMappingDataCriteria objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve DxHMappingData.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.SaveCmsMappings(Ektron.Cms.Settings.DxH.DxHCmsMappingData)">
            <summary>
             Saves a new DxHCmsMappingData object in the CMS.
            </summary>
            <param name="dxhCmsmappingData"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.DeleteCmsMappings(Ektron.Cms.Settings.DxH.DxHCmsMappingData)">
            <summary>
            Delete a existing DxHCmsMappingData object in the CMS.
            </summary>
            <param name="dxhCmsmappingData"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.GetCmsMappingList(System.Int64)">
            <summary>
            Get the list of DxhCmsMappingList
            </summary>
            <param name="mapId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.GetCmsMappingList(Ektron.Cms.Settings.DxH.DxHCmsMappingCriteria)">
            <summary>
             Retrieves a list of DxhCmsMappingList based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve DxHCmsMappingData.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.DxH.DxHMappingManager.DxHMappingDataService">
            <summary>
            Gets instance to IDxHMappingData.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.LocaleManager">
            <summary>
            Localization API
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.Settings.LocaleManager.service">
            <summary>
            Reference to the business object
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.#ctor">
            <summary>
            Initializes a new instance of the Locale class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Initializes a new instance of the Locale class.
            </summary>
            <param name="mode">Authorization mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.Add(Ektron.Cms.Localization.LocaleData)">
            <summary>
            Adds a new locale
            </summary>
            <param name="data">Locale data</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.Update(Ektron.Cms.Localization.LocaleData)">
            <summary>
            Updates an existing locale
            </summary>
            <param name="data">Locale data</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.Delete(System.Int32)">
            <summary>
            Deletes an existing locale
            </summary>
            <param name="id">Unique ID of the locale</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.GetItem(System.Int32)">
            <summary>
            Get locale data by ID
            </summary>
            <param name="id">Unique ID of the locale</param>
            <returns>Locale data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.GetList(Ektron.Cms.Localization.LocaleCriteria)">
            <summary>
            Gets a list of locale data given criteria
            </summary>
            <param name="criteria">Criteria defining which locales to get</param>
            <returns>List of locale data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.FindLocale(System.Collections.Generic.List{Ektron.Cms.Localization.LocaleData},System.Int32)">
            <summary>
            Finds a locale given a list and an ID
            </summary>
            <param name="list">The list of locales to search</param>
            <param name="id">The locale ID</param>
            <returns>The locale with the given ID or null if not found.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.GetEnabledLocale(System.Int32)">
            <summary>
            Gets locale data for the given id, if it is enabled, otherwise returns null.
            </summary>
            <param name="id">A unique ID</param>
            <returns>An <see cref="T:Ektron.Cms.Localization.LocaleData"/> object or null</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.GetEnabledLocales">
            <summary>
            Gets list of locale data that are enabled.
            </summary>
            <returns>List of LocaleData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.GetEnabledLocales(System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets list of locale data for the given list of ids, for each one that is enabled.
            </summary>
            <param name="ids">List of language ids</param>
            <returns>List of LocaleData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.IsLocaleUsed(System.Int32)">
            <summary>
            Gets a value indicating whether the locale specified is or has been used.
            </summary>
            <param name="id">A unique ID</param>
            <returns>Returns true if the locale is in use, even if it is currently disabled.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocaleManager.IsFallbackLocale(System.Int32)">
            <summary>
            Gets a value indicating whether the locale specified is a fallback locale for at least one other locale.
            </summary>
            <param name="id">A unique ID</param>
            <returns>Returns true if the locale is the fallback for another locale.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.LocaleManager.Service">
            <summary>
            Gets the ILocaleManager instance
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.LocalizationObject">
            <summary>
            ILocalization Object API
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.Settings.LocalizationObject.service">
            <summary>
            member variable to store the server
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.#ctor">
            <summary>
            Initializes a new instance of the LocalizationObject class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Initializes a new instance of the LocalizationObject class
            </summary>
            <param name="mode">Authorization mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.GetContentLocalizationState(System.Int64,Ektron.Cms.ContentData)">
            <summary>
            Get the localization state of the specified content.
            </summary>
            <param name="contentId">Id of the content</param>
            <param name="contentData">ContentData object of the content specified</param>
            <returns>Localization state e.g., Ready for translation, Not ready for translation, Do not translate, Needs translation, Out for translation, Translated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.GetContentLocalizationState(System.Int64,Ektron.Cms.ContentData,System.Int32@,System.DateTime@)">
            <summary>
            Get the localization state of the specified content.
            </summary>
            <param name="contentId">Id of the content</param>
            <param name="contentData">ContentData object of the content specified</param>
            <param name="sourceLanguage">If content is a translation (or will be), sourceLanguage is the original language, otherwise -1</param>
            <param name="sourceDateModified">If content has been translated, the date the original source was last edited, otherwise DateTime.MinValue</param>
            <returns>Localization state e.g., Ready for translation, Not ready for translation, Do not translate, Needs translation, Out for translation, Translated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.GetLocalizationObjectList(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Gets a list of localization object data given object information
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object</param>
            <returns>List of localization object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.GetObjectLanguages(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64)">
            <summary>
            Gets the list of languages that exist for the given CMS object
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <returns>A list of locale IDs</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.MarkReadyForTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as ready to be localized.
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="sourceLanguage">Language of the object</param>
            <returns>ID of the "mark"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.MarkNotReadyForTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as NOT ready to be localized. Published content is always considered ready for translation.
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object</param>
            <returns>ID of the "mark"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.MarkDoNotTranslate(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as do NOT translate. 
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object</param>
            <returns>ID of the "mark"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.MarkNeedsTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32,System.Int32)">
            <summary>
            Marks an object, e.g., content, as existing in the target language, but needs to be localized. 
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="targetLanguage">Language of the object needing translation, i.e., the target language</param>
            <param name="sourceLanguage">Original language of the object</param>
            <returns>Returns an ID to the database record of the "marking"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.MarkNeedsTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as existing in the target language, but needs to be localized. 
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object needing translation, i.e., the target language</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.MarkOutForTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks that an object (for a given target language) is currently being translated
            </summary>
            <param name="objectType">The Localizable Cms Object Type</param>
            <param name="objectId">The ID of the object</param>
            <param name="objectLanguage">The target locale of the object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.MarkTranslated(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks that an object (for a given target language) has been translated
            </summary>
            <param name="objectType">The Localizable Cms Object Type</param>
            <param name="objectId">The ID of the object</param>
            <param name="objectLanguage">The target locale of the object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.LocalizationObject.Delete(System.Int64)">
            <summary>
            Deletes the LocalizationObject record from the database
            </summary>
            <param name="id">The record ID as LocalizationObjectData.Id or returned by MarkReadyForTranslation or MarkNeedsTranslation</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.LocalizationObject.Service">
            <summary>
            Gets ILocalizationObject instance
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.CmsMessageManager">
            <summary>
            Api class for managing Messages in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageManager.Add(Ektron.Cms.Messaging.CmsMessageData)">
            <summary>
            Adds a new message based on information in an CmsMessageData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="message">The CmsMessageData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageManager.Update(Ektron.Cms.Messaging.CmsMessageData)">
            <summary>
            Updates an existing message in the CMS.
            </summary>
            <param name="message">The CmsMessageData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageManager.Delete(System.Int64)">
            <summary>
            Deletes a message in the CMS.
            </summary>
            <param name="id">The ID of the message to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single CmsMessageData object from the CMS in the current language.
            </summary>
            <param name="id">The ID of the message to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageManager.GetItemCollection(System.Int64)">
            <summary>
            Gets a single message from the CMS in all available languages.
            </summary>
            <param name="id">The ID of the message to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageManager.GetDefaultItemByType(System.Int64)">
            <summary>
            Gets the default message for a given message type in the CMS.  
            All available languages of the message are returned as part of the CmsMessageDataCollection.
            </summary>
            <param name="messageTypeId">The ID of the message type to retrieve the default message for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageManager.GetList(Ektron.Cms.Messaging.CmsMessageCriteria)">
            <summary>
            Retrieves a list of CmsMessageData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve messages.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.CmsMessageManager.MessageService">
            <summary>
            Gets instance to ICmsMessage.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.CmsMessageTypeManager">
            <summary>
            Api class for managing MessageTypes in the Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageTypeManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageTypeManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor with API mode
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageTypeManager.Add(Ektron.Cms.Messaging.CmsMessageTypeData)">
            <summary>
            Adds a new message type based on information in an CmsMessageTypeData object. 
            messageType.Id will be populated with the newly created ID.
            </summary>
            <param name="messageType">The CmsMessageData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageTypeManager.Update(Ektron.Cms.Messaging.CmsMessageTypeData)">
            <summary>
            Updates an existing message type in the CMS.
            </summary>
            <param name="messageType">The CmsMessageTypeData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageTypeManager.Delete(System.Int64)">
            <summary>
            Deletes a message type in the CMS.
            </summary>
            <param name="id">The ID of the message to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageTypeManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single CmsMessageTypeData object from the CMS.
            </summary>
            <param name="id">The ID of the message type to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageTypeManager.GetList(Ektron.Cms.Messaging.CmsMessageTypeCriteria)">
            <summary>
            Retrieves a list of CmsMessageTypeData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve message types.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.CmsMessageTypeManager.GetTokenList(System.Int64)">
            <summary>
            Returns the list of applicable replacement tokens for a given MessageTypeId.
            </summary>
            <param name="messageTypeId">ID of Message Type to retrieve tokens for.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.CmsMessageTypeManager.MessageTypeService">
            <summary>
            Gets instance to ICmsMessageType.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager">
            <summary>
            Api class for managing settings for Notification Agent settings.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.Add(Ektron.Cms.Notifications.NotificationAgentData)">
            <summary>
            Adds a new notification agent to the system.
            </summary>
            <param name="agentData">Agent settings to save.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.Update(Ektron.Cms.Notifications.NotificationAgentData)">
            <summary>
            Updates an existing notification agent settings.
            </summary>
            <param name="agentData">Agent settings to save.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.Delete(System.Int64)">
            <summary>
            Deletes a notification agent settings from the CMS.
            </summary>
            <param name="id">Id of agent to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.GetItem(System.Int64)">
            <summary>
            Retrieves a notifcation agent setting object.
            </summary>
            <param name="id">Id of agent to retrieve settings for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.GetList(Ektron.Cms.Notifications.NotificationAgentCriteria)">
            <summary>
            Retrieves a list of Notification Agent settings in the CMS based upon the supplied criteria.
            </summary>
            <param name="criteria">criteira by which to retrieve agent settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.GetAgent(System.Int64)">
            <summary>
            Returns actual NotificationAgent based upon Agent Id.
            </summary>
            <param name="id">Id of agent to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.GetRegisteredAgentList">
            <summary>
            Retrieves a list of the Notification Agents registered in the web.config.
            </summary>
            <returns>a list of notificationAgent</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.Notifications.NotificationAgentSettingManager.AgentSettingService">
            <summary>
            Notification Agent Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager">
            <summary>
            Api class for managing user notification preferences in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.Add(Ektron.Cms.Notifications.NotificationPreferenceData)">
            <summary>
            Saves a new notification preference.
            </summary>
            <param name="preferenceData">preference data to save.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.SaveUserPreferences(System.Collections.Generic.List{Ektron.Cms.Notifications.NotificationPreferenceData})">
            <summary>
            Saves a set of notification preferences for a given user. 
            Preferences marked as added will be added and those marked as deleted will be removed.
            </summary>
            <param name="preferenceList">preference data to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.Update(Ektron.Cms.Notifications.NotificationPreferenceData)">
            <summary>
            Updates an existing notification preference.
            </summary>
            <param name="preferenceData">preference data to save.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.Delete(System.Int64)">
            <summary>
            Deletes a notification preference.
            </summary>
            <param name="id">Id of NotificationPreference to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.GetItem(System.Int64)">
            <summary>
            Returns a single notification preference by Id.
            </summary>
            <param name="id">Id of NotificationPreference to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.GetList(Ektron.Cms.Notifications.NotificationPreferenceCriteria)">
            <summary>
            Returns a list of user notification preferences based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which preferences to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.GetDefaultPreferenceList(Ektron.Cms.Notifications.NotificationPreferenceCriteria)">
            <summary>
            Returns a list of default notification preferences based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which default preferences to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.GetUserNotificationListForActivity(Ektron.Cms.Activity.ActivityData,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of users and their nortfication settings for a given activity ocurrence.
            </summary>
            <param name="activity">Activity defintion to retrieve notifications for.</param>
            <param name="paging">paging information for the retrieval.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.Notifications.NotificationPreferenceManager.NotificationPreferenceService">
            <summary>
            notification preference service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.Notifications.NotificationPublishPreferenceManager">
            <summary>
            Framework API class for managing a users notification publishing preferences.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPublishPreferenceManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPublishPreferenceManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">API mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPublishPreferenceManager.Add(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Sets the list of Activity Types for publishing for a given user.  Any Activity Types not listed will be disabled.
            </summary>
            <param name="userId">UserId to add Notification Publishng</param>
            <param name="ActivityTypeIdList">List Of Activity Type IDs to enable publishing for.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPublishPreferenceManager.AllowPublication(System.Int64,System.Int64)">
            <summary>
            Returns true if the supplied activity type id is enabled for publishing for the supplied User Id.
            </summary>
            <param name="userId">User Id to check publishing preferences for.</param>
            <param name="activityTypeId">Activity Type Id to check publishing preferences for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPublishPreferenceManager.GetDefaultList">
            <summary>
            Returns the list of default notification publishing preferences for the system.
            </summary>
            <returns>Returned List of NotificationPublishPreferenceData objects </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPublishPreferenceManager.UpdateDefaultPreferences(System.Collections.Generic.List{System.Int64})">
            <summary>
            Sets the default list of Activity Types for publishing.  Any Activity Types not listed will be disabled.
            </summary>
            <param name="ActivityTypeIdList">List Of Activity Type IDs to enable publishing for.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.NotificationPublishPreferenceManager.GetList(System.Int64)">
            <summary>
            Gets list of notification publishing preferences for a given user.
            </summary>
            <param name="userId">User ID to return publishing preferences for.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager">
            <summary>
            Api class for managing user notification settings in the CMS.  UserNotificationSettigns are user settings per notification agent.  
            For example, to recieve notifications via Email, the user would need to provide his\her email address, etc.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager.Add(Ektron.Cms.Notifications.UserNotificationSettingData)">
            <summary>
            Adds a new user notification setting.
            </summary>
            <param name="userSettingData">user setting data to save.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager.Update(Ektron.Cms.Notifications.UserNotificationSettingData)">
            <summary>
            Updates an existing user notification setting.
            </summary>
            <param name="userSettingData">user setting data to save.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager.Delete(System.Int64)">
            <summary>
            Deletes a User Notification Setting.
            </summary>
            <param name="id">Id of User Notification Setting to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager.GetItem(System.Int64)">
            <summary>
            Returns a single UserNotificationSettingData by Id.
            </summary>
            <param name="id">Id of UserNotificationSettingData to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager.GetList(Ektron.Cms.Notifications.UserNotificationSettingCriteria)">
            <summary>
            Returns a list of UserNotificationSettingData based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which UserNotificationSettingData to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager.VerifyValidationCode(System.Int64,System.String)">
            <summary>
            Verifies that the validation code is correct and enables users notfication settings.
            </summary>
            <param name="userSettingId">Id of user notification setting.</param>
            <param name="verificationCode">Verification code to validate.</param>
            <returns>true if the verification code is correct.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.Notifications.UserNotificationSettingManager.UserSettingService">
            <summary>
            USer Setting Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.PermissionManager">
            <summary>
            Framework API Class for managing permissions on content and folders.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.Add(Ektron.Cms.UserPermissionData)">
            <summary>
             Adds a new UserPermission, with details from the supplied UserPermissionData object.
            </summary>
            <param name="permissionData"></param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.Update(Ektron.Cms.UserPermissionData)">
            <summary>
            Updates a UserPermission, with details from the supplied UserPermissionData object.
            </summary>
            <param name="permissionData"></param>
            <returns>Returns the UserPermissionData object that was updated.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.Delete(System.Int64)">
            <summary>
            Deletes an existing UserPermission.
            </summary>
            <param name="id">User or Group Id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.GetItem(System.Int64)">
            <summary>
            Returns details of a UserPermission.
            </summary>
            <param name="id">the identifier of the UserPermission to get</param>
            <returns>UserPermission details in a UserPermissionData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.GetList(Ektron.Cms.Settings.PermissionCriteria)">
            <summary>
            Returns a list of UserPermissions that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the UserPermissions to return</param>
            <returns>a list of UserPermissions</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.DeletePermissionsForUser(Ektron.Cms.Settings.ItemType,System.Int64,System.Int64)">
            <summary>
            Deletes a Permission for an object, with details from the supplied type and user.
            </summary>
            <param name="type">Type of the object to delete associated permission</param>
            <param name="userId">UserId of the user to which delete associated permissions</param>
            <param name="objectId">Id of the object to delete permissions</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.DeletePermissionForGroup(Ektron.Cms.Settings.ItemType,System.Int64,System.Int64)">
            <summary>
            Deletes a Permission for an object, with details from the supplied type and group.
            </summary>
            <param name="type">Type of the object to delete associated permission</param>
            <param name="groupId">groupId of the group to which delete associated permissions</param>
            <param name="objectId">Id of the object to delete permissions</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.IsLoggedInUserAdmin">
            <summary>
            Checks if currently logged in user is a CMS administrator
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.GetUserPermissionForContent(System.Int64,System.Int64,System.Int32)">
            <summary>
            Gets the users permission to a piece of content, for either the user or group the user is part of.
            </summary>
            <param name="userid">User Id to get permissions for.</param>
            <param name="contentid">Content Id to get permissions for.</param>
            <returns>UserPermissionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.GetUserPermissionForContent(System.Int64,System.Int32)">
            <summary>
            Gets the users permission to a piece of content, for loggedIn User.
            </summary>
            <param name="contentid">Content Id to get permissions for.</param>
            <param name="languageId">Language of the content.</param>
            <returns>UserPermissionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.GetUserPermissionForFolder(System.Int64,System.Int64,System.Int32)">
            <summary>
            Gets the users permission to a folder, for either the user or group the user is part of.
            </summary>
            <param name="userid">User Id to get permissions for.</param>
            <param name="contentid">Folder Id to get permissions for.</param>
            <returns>UserPermissionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.PermissionManager.GetUserPermissionForFolder(System.Int64,System.Int32)">
            <summary>
            Gets the users permission to a folder, for loggedIn User.
            </summary>
            <param name="folderid">Folder Id to get permissions for.</param>
            <param name="languageId">Language Id of the folder.</param>
            <returns>UserPermissionData</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.PermissionManager.PermissionManagerService">
            <summary>
            returns an instance of the business objects PermissionManager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager">
            <summary>
            Smart form Configuration Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager.Add(Ektron.Cms.SmartFormConfigurationData)">
            <summary>
            Adds a new smartFormConfiguration based on information in an SmartFormConfigurationData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="smartFormConfigurationData">The SmartFormConfigurationData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager.Update(Ektron.Cms.SmartFormConfigurationData)">
            <summary>
            Updates an existing smartFormConfiguration in the CMS.
            </summary>
            <param name="smartFormConfigurationData">The SmartFormConfigurationData object to update.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager.Delete(System.Int64)">
            <summary>
            Deletes a smartFormConfiguration in the CMS.
            </summary>
            <param name="id">The ID of the smartFormConfiguration to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single SmartFormConfigurationData object from the CMS.
            </summary>
            <param name="id">The ID of the smartFormConfiguration to retrieve.</param>
            <returns></returns>
            
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager.GetList(Ektron.Cms.Content.SmartFormConfigurationCriteria)">
            <summary>
            Retrieves a list of SmartFormConfigurationData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve smartFormConfigurations.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager.GetXmlSearchFieldData(System.Int64)">
            <summary>
            Retrieves a list of SmartFormIndexFieldData objects for the supplied smart form config id.
            </summary>
            <param name="id">The ID of the smartFormConfiguration to retrieve index search field data for.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.SmartFormConfigurationManager.SmartFormConfigurationManagerService">
            <summary>
            returns an instance of the business objects smartFormConfiguration manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.TaskCategoryManager">
            <summary>
            Task Category Manager Class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCategoryManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCategoryManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCategoryManager.Add(Ektron.Cms.TaskCategoryData)">
            <summary>
            Adds a new task category based on information in an TaskCategoryData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="taskCategoryData">The TaskCategoryData object to add.</param>
            <returns>Added TaskCategoryData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCategoryManager.Update(Ektron.Cms.TaskCategoryData)">
            <summary>
            Updates an existing task category in the CMS.
            </summary>
            <param name="taskCategoryData">The TaskCategoryData object to update.</param>
            <returns>Updated TaskCategoryData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCategoryManager.Delete(System.Int64)">
            <summary>
            Deletes a task category in the CMS.
            </summary>
            <param name="id">The ID of the task category to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCategoryManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single TaskCategoryData object from the CMS.
            </summary>
            <param name="id">The ID of the task category to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCategoryManager.GetList(Ektron.Cms.TaskCategoryCriteria)">
            <summary>
            Retrieves a list of TaskCategoryData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve task categories.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.TaskCategoryManager.TaskCategoryManagerService">
            <summary>
            returns an instance of the business objects task manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.TodoItemCommentManager">
            <summary>
            Manages access to TodoItemCommentCommentData objects.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemCommentManager.#ctor">
            <summary>
            TodoItemComment Manager Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemCommentManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            TodoItemComment Manager Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemCommentManager.Add(Ektron.Cms.ToDo.TodoItemCommentData)">
            <summary>
            Adds a new TodoItemComment.
            </summary>
            <param name="TodoItemComment">TodoItemComment to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemCommentManager.Update(Ektron.Cms.ToDo.TodoItemCommentData)">
            <summary>
            Updates a TodoItemComment.
            </summary>
            <param name="TodoItemComment">TodoItemComment to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemCommentManager.Delete(System.Int64)">
            <summary>
            Deletes a TodoItemComment by its ID.
            </summary>
            <param name="id">ID of the TodoItemComment to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemCommentManager.GetItem(System.Int64)">
            <summary>
            Gets a TodoItemComment by its ID.
            </summary>
            <param name="id">ID of the TodoItemComment to get.</param>
            <returns>Instance of requested TodoItemComment.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemCommentManager.GetList(Ektron.Cms.ToDo.TodoItemCommentCriteria)">
            <summary>
            Gets a list of TodoItemComments filtered by the given criteria.
            </summary>
            <param name="criteria">Criteria with which to filter the TodoItemComments.</param>
            <returns>A list of TodoItemComments filtered using the criteria parameter.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.TodoItemCommentManager.TodoItemCommentService">
            <summary>
            Gets instance to ITodoItemComment.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.TodoItemManager">
            <summary>
            Manages access to TodoItemData objects.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemManager.#ctor">
            <summary>
            TodoItem Manager Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            TodoItem Manager Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemManager.Add(Ektron.Cms.ToDo.TodoItemData)">
            <summary>
            Adds a new TodoItem.
            </summary>
            <param name="TodoItem">TodoItem to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemManager.Update(Ektron.Cms.ToDo.TodoItemData)">
            <summary>
            Updates a TodoItem.
            </summary>
            <param name="TodoItem">TodoItem to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemManager.Delete(System.Int64)">
            <summary>
            Deletes a TodoItem by its ID.
            </summary>
            <param name="id">ID of the TodoItem to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemManager.GetItem(System.Int64)">
            <summary>
            Gets a TodoItem by its ID.
            </summary>
            <param name="id">ID of the TodoItem to get.</param>
            <returns>Instance of requested TodoItem.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoItemManager.GetList(Ektron.Cms.ToDo.TodoItemCriteria)">
            <summary>
            Gets a list of TodoItems filtered by the given criteria.
            </summary>
            <param name="criteria">Criteria with which to filter the TodoItems.</param>
            <returns>A list of TodoItems filtered using the criteria parameter.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.TodoItemManager.TodoItemService">
            <summary>
            Gets instance to ITodoItem.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Community.TodoListManager">
            <summary>
            Manages access to TodoListDAta objects.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoListManager.#ctor">
            <summary>
            TodoList Manager Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoListManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            TodoList Manager Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoListManager.Add(Ektron.Cms.ToDo.TodoListData)">
            <summary>
            Adds a new TodoList.
            </summary>
            <param name="todoList">TodoList to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoListManager.Update(Ektron.Cms.ToDo.TodoListData)">
            <summary>
            Updates a TodoList.
            </summary>
            <param name="todoList">TodoList to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoListManager.Delete(System.Int64)">
            <summary>
            Deletes a TodoList by its ID.
            </summary>
            <param name="id">ID of the TodoList to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoListManager.GetItem(System.Int64)">
            <summary>
            Gets a TodoList by its ID.
            </summary>
            <param name="id">ID of the TodoList to get.</param>
            <returns>Instance of requested TodoList.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Community.TodoListManager.GetList(Ektron.Cms.ToDo.TodoListCriteria)">
            <summary>
            Gets a list of TodoLists filtered by the given criteria.
            </summary>
            <param name="criteria">Criteria with which to filter the TodoLists.</param>
            <returns>A list of TodoLists filtered using the criteria parameter.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Community.TodoListManager.TodoListService">
            <summary>
            Gets instance to ITodoList.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCommentManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCommentManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCommentManager.Add(Ektron.Cms.TaskCommentData)">
            <summary>
            Adds a new task comment based on information in an TaskCommentData object. 
            CommentId will be populated with the newly created ID.
            </summary>
            <param name="taskCommentData">The TaskCommentData object to add.</param>
            <returns>The added TaskCommentData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCommentManager.Update(Ektron.Cms.TaskCommentData)">
            <summary>
            Updates an existing task comment in the CMS.
            </summary>
            <param name="taskCommentData">The TaskCommentData object to update.</param>
            <returns>The updated TaskCommentData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCommentManager.Delete(System.Int64)">
            <summary>
            Deletes a task comment in the CMS.
            </summary>
            <param name="id">The ID of the task comment to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCommentManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single TaskCommentData object from the CMS.
            </summary>
            <param name="id">The ID of the task comment to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskCommentManager.GetList(Ektron.Cms.TaskCommentCriteria)">
            <summary>
            Retrieves a list of TaskCommentData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve tasks.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.TaskCommentManager.TaskCommentManagerService">
            <summary>
            returns an instance of the business objects task comment manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager">
            <summary>
            Framework API class for managing Taxonomy Custom property definitions.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.GetItem(System.Int64,System.Int32)">
            <summary>
             Returns details of a CustomProperty.
            </summary>
            <param name="propertyId">Id of the CustomProperty</param>
            <param name="languageId">Language id of the CustomProperty to get</param>
            <returns>CustomProperty details in a CustomPropertyData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.GetList(System.Int32,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of CustomPropertyData objects with their details.
            </summary>
            <param name="languageId">Language id of the CustomProperties to get</param>
            <param name="paging">Paging details</param>
            <returns>List of CustomPropertyData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.GetList(Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,System.Int32,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of CustomPropertyData objects with their details.
            </summary>
            <param name="cmsObjectType">Type of the CustomProperties to get</param>
            <param name="languageId">Language id of the CustomProperties to get</param>
            <param name="paging">Paging details</param>
            <returns>List of CustomPropertyData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.GetListNonTranslated(System.Int64)">
            <summary>
             Returns a list of non translated LanguageData objects.
            </summary>
            <param name="propertyId">Id of the CustomProperty</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.GetListTranslated(System.Int64)">
            <summary>
             Returns a list of translated LanguageData objects.
            </summary>
            <param name="propertyId">Id of the CustomProperty</param>
            <returns>List of LanguageData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.Add(Ektron.Cms.Common.CustomPropertyData)">
            <summary>
            Adds a new Taxonomy Custom Property.
            </summary>
            <param name="data">CustomPropertyData object with the details to add</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.Update(Ektron.Cms.Common.CustomPropertyData)">
            <summary>
            Updates an existing Taxonomy CustomProperty.
            </summary>
            <param name="data">CustomPropertyData object with the details to update</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaxonomyCustomPropertyManager.Delete(System.Int64,System.Int32)">
            <summary>
            Deletes an existing CustomProperty
            </summary>
            <param name="propertyId">Id of the CustomProperty to delete</param>
            <param name="languageId">Language Id of the CustomProperty to delete</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager">
            <summary>
            Auto Alias Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.#ctor">
            <summary>
            Constructor - Initializes a new instance of the AutoAliasManager  class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor - Initializes a new instance of the AutoAliasManager  class.
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.Add(Ektron.Cms.Common.UrlAliasAutoData)">
            <summary>
            Adds a new UrlAliasAutoData
            </summary>
            <param name="data">UrlAliasAutoData data</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.Update(Ektron.Cms.Common.UrlAliasAutoData)">
            <summary>
            Updates an existing UrlAutoAlias 
            </summary>
            <param name="data">UrlAutoAlias  data</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.Delete(System.Int64)">
            <summary>
            Deletes an existing UrlAutoAlias
            </summary>
            <param name="id">Unique ID of the AutoAlias</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.GetItem(System.Int64)">
            <summary>
            Get AutoAlias data by ID
            </summary>
            <param name="id">Unique ID of the AutoAlias</param>
            <returns>UrlAliasAutoData data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.GetList(Ektron.Cms.UrlAliasing.AutoAliasCriteria)">
            <summary>
            Gets a list of AutoAlias data given criteria
            </summary>
            <param name="criteria">Criteria defining which AutoAlias to get</param>
            <returns>List of UrlAliasAutoData data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.GetTarget(System.String,System.String)">
            <summary>
            Get Target data by UrlAlias and Host
            </summary>
            <param name="urlAlias">urlAlias of the Target to retrieve</param>
            <param name="host">Host of the Target to retrieve</param>
            <returns>Target string</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.GetTarget(System.String,System.String,Ektron.Cms.Common.EkEnumeration.AutoAliasType)">
            <summary>
            Get Target data by UrlAlias, Host and autoAliasType
            </summary>
            <param name="urlAlias">urlAlias of the Target to retrieve</param>
            <param name="host">Host of the Target to retrieve</param>
            <param name="autoAliasType">AutoAliasType of the Target to retrieve</param>
            <returns>Target string</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AutoAliasManager.ClearCache">
            <summary>
            ClearCache
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.UrlAliasing.CommonAliasManager">
            <summary>
            Common alias Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommonAliasManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommonAliasManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommonAliasManager.GetContentAlias(System.Int64)">
            <summary>
            Get Alias of a Content
            </summary>
            <param name="contentId">the identifier of the content</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommonAliasManager.GetTarget(System.Uri)">
            <summary>
            Get Target of a Url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager">
            <summary>
            Community Alias Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager.Add(Ektron.Cms.Common.UrlAliasCommunityData)">
            <summary>
            Adds a new UrlAliasCommunity, with details from the supplied UrlAliasCommunityData object.
            </summary>
            <param name="data"></param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager.Update(Ektron.Cms.Common.UrlAliasCommunityData)">
            <summary>
            Updates a UrlAliasCommunity, with details from the supplied UrlAliasCommunityData object.
            </summary>
            <param name="data"></param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager.Delete(System.Int64)">
            <summary>
            Deletes an existing UrlAliasCommunity.
            </summary>
            <param name="id">Community Alias Id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager.GetItem(System.Int64)">
            <summary>
            Returns details of a UrlAliasCommunity.
            </summary>
            <param name="id">the identifier of the UrlAliasCommunity to get</param>
            <returns>UrlAliasCommunity details in a UrlAliasCommunityData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager.GetList(Ektron.Cms.UrlAliasing.CommunityAliasCriteria)">
            <summary>
            Returns a list of UrlAliasCommunity that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the list of UrlAliasCommunity to return</param>
            <returns>a list of UrlAliasCommunity</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager.GetCommunityGroupAlias(System.Int64)">
            <summary>
            Returns the CommunityGroupAlias
            </summary>
            <param name="groupId">the identifier of the group</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.CommunityAliasManager.GetUserAlias(System.Int64)">
            <summary>
            Returns the UserAlias
            </summary>
            <param name="userId">the identifier of the userId</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager">
            <summary>
            Manual Alias Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager.#ctor">
            <summary>
            Initializes a new instance of the ManualAliasManager class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Initializes a new instance of the ManualAliasManager class.
            </summary>
            <param name="mode">Authorization mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager.Add(Ektron.Cms.Common.UrlAliasManualData)">
            <summary>
            Adds a new UrlAliasManualData
            </summary>
            <param name="data">UrlAliasManualData data</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager.Update(Ektron.Cms.Common.UrlAliasManualData)">
            <summary>
            Updates an existing UrlAliasManualData 
            </summary>
            <param name="data">UrlAliasManualData  data</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager.Delete(System.Int64)">
            <summary>
            Deletes an existing ManualAlias
            </summary>
            <param name="id">Unique ID of the ManualAlias</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager.GetItem(System.Int64)">
            <summary>
            Get ManualAlias data by ID
            </summary>
            <param name="id">Unique ID of the ManualAlias</param>
            <returns>Locale data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager.GetList(Ektron.Cms.UrlAliasing.ManualAliasCriteria)">
            <summary>
            Gets a list of UrlAliasManualData given criteria
            </summary>
            <param name="criteria">Criteria defining which UrlAliasManualData to get</param>
            <returns>List of UrlAliasManualData data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager.GetDefaultAlias(System.Int64)">
            <summary>
            Gets a Content Default Alias
            </summary>
            <param name="id">Content Id</param>
            <returns>UrlAliasManualData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.ManualAliasManager.ClearCache">
            <summary>
            ClearCache
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.TemplateToDeviceGroupManager.Add(Ektron.Cms.Settings.Mobile.TemplateToDeviceGroupData)">
            <summary>
            Add a TemplateToDeviceGroupData to CMS
            </summary>
            <param name="templateToBreakpointData"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.TemplateToDeviceGroupManager.Update(Ektron.Cms.Settings.Mobile.TemplateToDeviceGroupData)">
            <summary>
            Update a TemplateToDeviceGroupData in CMS
            </summary>
            <param name="templateToBreakpointData"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.TemplateToDeviceGroupManager.Delete(System.Int64,System.Int64)">
            <summary>
            Delete a TemplateToDeviceGroupData from CMS
            </summary>
            <param name="templateID"></param>
            <param name="DeviceGroupID"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.TemplateToDeviceGroupManager.GetItem(System.Int64,System.Int64)">
            <summary>
            Get a single TemplateToDeviceGroupData
            </summary>
            <param name="templateID"></param>
            <param name="DeviceGroupID"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.TemplateToDeviceGroupManager.GetList(Ektron.Cms.Settings.Mobile.TemplateToDeviceGroupCriteria)">
            <summary>
            Get a list of TemplateToDeviceGroupData
            </summary>
            <param name="templateToBreakpointCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.Mobile.TemplateToDeviceGroupManager.GetListModelOs(Ektron.Cms.Settings.Mobile.TemplateToDeviceGroupCriteria)">
            <summary>
            Get a list of TemplateToDeviceGroupData
            </summary>
            <param name="templateToBreakpointCriteria"></param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager">
            <summary>
            AliasManager class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.#ctor">
            <summary>
            Constructor - Initializes a new instance of the AliasManager  class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor - Initializes a new instance of the AliasManager  class.
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.GetTarget(System.Uri,System.Int64)">
            <summary>
            Gets the Alias information for given Url.
            </summary>
            <param name="url">Url to get alias information.</param>
            <param name="LanguageId">Id of language.</param>
            <returns>returns AliasData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.Add(Ektron.Cms.Settings.UrlAliasing.DataObjects.AliasData)">
            <summary>
            Add the AliasData
            </summary>
            <param name="data">AliasData object.</param>
            <returns>returns added AliasData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.Update(Ektron.Cms.Settings.UrlAliasing.DataObjects.AliasData)">
            <summary>
            Updates the AliasData.
            </summary>
            <param name="data">AliasData object.</param>
            <returns>returns updated AliasData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.Delete(System.Int64)">
            <summary>
            Deletes Alias by AliasId.
            </summary>
            <param name="AliasId">Id of Alias.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.DeleteAll">
            <summary>
            Deletes all Alias.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.GetItem(System.Int64)">
            <summary>
            Gets Alias by AliasId.
            </summary>
            <param name="AliasId">Id of the Alias.</param>
            <returns>returns AliasData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.GetList(Ektron.Cms.Settings.UrlAliasing.DataObjects.AliasCriteria)">
            <summary>
            Gets list of alias based on supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the Alias.</param>
            <returns>returns list of AliasData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.GetAlias(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.TargetType)">
            <summary>
            Gets Alias by TargetId, LanguageId and TargetType.
            </summary>
            <param name="TargetId">Id of the target.</param>
            <param name="LanguageId">Id of Lanaguage.</param>
            <param name="targetType">Type of target.</param>
            <returns>retuns AliasData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasManager.IsValidEktronAlias(System.String)">
            <summary>
            Checks given Aliasname is valid or not.
            </summary>
            <param name="AliasName">Name of the Alias.</param>
            <returns>returns true, if Aliasname is valid.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager">
            <summary>
            AliasRuleManager class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.#ctor">
            <summary>
            Constructor - Initializes a new instance of the AliasRuleManager  class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.Add(Ektron.Cms.Settings.UrlAliasing.DataObjects.AliasRuleData)">
            <summary>
            Adds a new AliasRuleData. AliasRuleData.Id will be populated with the newly created ID.
            </summary>
            <param name="data">AliasRuleData object.</param>
            <returns>returns added AliasRuleData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.Update(Ektron.Cms.Settings.UrlAliasing.DataObjects.AliasRuleData)">
            <summary>
            Updates the supplied AliasRule.
            </summary>
            <param name="data">AliasRuleData object.</param>
            <returns>returns updated AliasRuleData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.Delete(System.Int64)">
            <summary>
            Deletes AliasRule and Aliases by ConfigId.
            </summary>
            <param name="ConfigId">Id of AliasRule Configuration.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.DeleteAliases(System.Int64)">
            <summary>
            Delete Aliases by ConfigId.
            </summary>
            <param name="ConfigId">Id of AliasRule Configuration</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.DisableAliases(System.Int64)">
            <summary>
            Disables Aliases by ConfigId.
            </summary>
            <param name="ConfigId">Id of AliasRule Configuration.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.EnableAliases(System.Int64)">
            <summary>
            Enables Aliases by ConfigId.
            </summary>
            <param name="ConfigId">Id of AliasRule Configuration.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.GetItem(System.Int64)">
            <summary>
            Retrieves AliasRuleData object by ConfigId.
            </summary>
            <param name="ConfigId">Id of AliasRule Configuration.</param>
            <returns>returns AliasRuleData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.GetList(Ektron.Cms.Settings.UrlAliasing.DataObjects.AliasRuleCriteria)">
            <summary>
            Retrieves list of AliasRuleData objects based on supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the AliasRule.</param>
            <returns>returns list of AliasRuleData objects.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.GetList(System.Int64,Ektron.Cms.Common.EkEnumeration.AliasRuleType,System.Int64,System.Int32)">
            <summary>
            Retrieves list of AliasRuleData objects by SourceId, AliasRuleType, SiteId and LanguageId.
            </summary>
            <param name="SourceId">Id of Source, for that AliasRule is created.</param>
            <param name="type">Type of AliasRule.</param>
            <param name="siteId">Id of Site.</param>
            <param name="languageId">Id of Language.</param>
            <returns>returns list of AliasRuleData objects.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasRuleManager.DisableAll">
            <summary>
            Disables all AliasRules.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager">
            <summary>
            AliasSettingsManager class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.#ctor">
            <summary>
            Constructor - Initializes a new instance of the AliasSettingsManager  class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor - Initializes a new instance of the AliasSettingsManager  class.
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.Update(Ektron.Cms.Settings.UrlAliasing.DataObjects.AliasSettingName,System.String,System.Int64)">
            <summary>
            Updates the Setting, If Setting Name and Site Id matches in database else inserts new record.
            </summary>
            <param name="settingName">Name of Setting.</param>
            <param name="settingvalue">Value of Setting.</param>
            <param name="siteID">Id of Site.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.Update(Ektron.Cms.Settings.UrlAliasing.DataObjects.AliasSettings)">
            <summary>
            Updates supplied AliasSettings object.
            </summary>
            <param name="settings">AliasSettings object.</param>
            <returns>returns updated AliasSettings object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.Get(Ektron.Cms.Settings.UrlAliasing.DataObjects.AliasSettingName,System.Int64)">
            <summary>
            Retrieves Setting Value by Setting Name and Site Id.
            </summary>
            <param name="settingName">Name of Setting.</param>
            <param name="siteID">Id of Site.</param>
            <returns>returns Setting Value.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.Get(System.Int64)">
            <summary>
            Retrieves AliasSettings object by SiteId.
            </summary>
            <param name="siteID">Id of Site.</param>
            <returns>returns AliasSettings object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.Get">
            <summary>
            Retrieves AliasSettings object.
            </summary>
            <returns>returns AliasSettings object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.AddFileExtension(Ektron.Cms.Settings.UrlAliasing.DataObjects.FileExtension)">
            <summary>
            Adds a new FileExtension. FileExtension.Id will be populated with the newly created ID.
            </summary>
            <param name="extension">FileExtension object.</param>
            <returns>returns FileExtension object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.DeleteExtension(System.Int64)">
            <summary>
            Deletes Extension by Extension Id.
            </summary>
            <param name="extensionId">Id of Extension.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.GetExtension(System.Int64)">
            <summary>
            Retrieves FileExtension object by Extension Id.
            </summary>
            <param name="extensionId">Id of Extension.</param>
            <returns>returns FileExtension object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.GetAllExtensions(System.Int64)">
            <summary>
            Retrieves list of FileExtension objects by SiteId.
            </summary>
            <param name="siteID">Id of Site.</param>
            <returns>returns list of FileExtension objects.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.GetAllExtensionsOnly(System.Int64)">
            <summary>
            Retrieves list of FilesExtensions.
            </summary>
            <param name="siteID">Id of Site.</param>
            <returns>returns list of FilesExtensions.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.GetAllExtensions">
            <summary>
            Retrieves list of All FileExtension objects.
            </summary>
            <returns>returns list of All FileExtension objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.GetAllExtensionsOnly">
            <summary>
            Retrieves list of All FileExtensions.
            </summary>
            <returns>returns list of All FileExtensions.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.AliasSettingsManager.ClearCache(System.String)">
            <summary>
            Clears Cache by SegmentKey.
            </summary>
            <param name="segmentkey">Key of Segment.</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager">
            <summary>
            RedirectManager class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager.#ctor">
            <summary>
            Constructor - Initializes a new instance of the RedirectManager class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor - Initializes a new instance of the RedirectManager class.
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager.GetTarget(System.Uri)">
            <summary>
            Retrieves RedirectData object by Source Url.
            </summary>
            <param name="url">Url of Source.</param>
            <returns>returns RedirectData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager.Add(Ektron.Cms.Settings.UrlAliasing.DataObjects.RedirectData)">
            <summary>
            Adds a new RedirectData. RedirectData.Id will be populated with the newly created ID.
            </summary>
            <param name="data">RedirectData object.</param>
            <returns>returns added RedirectData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager.Update(Ektron.Cms.Settings.UrlAliasing.DataObjects.RedirectData)">
            <summary>
            Updates the supplied RedirectData object.
            </summary>
            <param name="data">RedirectData object.</param>
            <returns>returns updated RedirectData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager.Delete(System.Int64)">
            <summary>
            Deletes Redirect Information by RedirectId.
            </summary>
            <param name="RedirectId">Id of the Redirect Information.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager.DeleteAll">
            <summary>
            Deletes all Redirect Information.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager.GetItem(System.Int64)">
            <summary>
            Retrieves RedirectData object by RedirectId.
            </summary>
            <param name="RedirectId">Id of the Redirect Information.</param>
            <returns>returns RedirectData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RedirectManager.GetList(Ektron.Cms.Settings.UrlAliasing.DataObjects.RedirectCriteria)">
            <summary>
            Retrieves list of RedirectData objects based on supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the Redirect Information.</param>
            <returns>returns list of RedirectData objects.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager">
            <summary>
            RegEx Alias Manager class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.#ctor">
            <summary>
            Manager constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Manager constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.Add(Ektron.Cms.UrlAliasRegExData)">
            <summary>
            Adds a new item based on information in an UrlAliasRegExData object
            message. Id will be populated with the newly created ID.
            </summary>
            <param name="data">The UrlAliasRegExData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.Update(Ektron.Cms.UrlAliasRegExData)">
            <summary>
            Updates an existing item in the CMS.
            </summary>
            <param name="data">The UrlAliasRegExData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.Delete(System.Int64)">
            <summary>
            Deletes a item in the CMS.
            </summary>
            <param name="id">The ID of the UrlAliasRegEx to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single UrlAliasRegExData object from the CMS.
            </summary>
            <param name="id">The ID of the UrlAliasRegEx to retrieve.</param>
            <returns>UrlAliasRegExData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.GetList(Ektron.Cms.UrlAliasing.RegExAliasCriteria)">
            <summary>
            Retrieves a list of UrlAliasRegExData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve UrlAliasRegEx.</param>
            <returns>List a list of urlaliasRegExData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.GetTarget(System.String,System.String)">
            <summary>
            Retrieve the Target.
            </summary>
            <param name="urlAlias">Alias</param>
            <param name="host">Host</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.ClearCache">
            <summary>
            Clear the cache.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.UrlAliasing.RegExAliasManager.RegExAliasManagerService">
            <summary>
            Returns an instance of the business objects manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Settings.UrlAliasing.Validation.RequestValidator">
            <summary>
            Determines if the reuqest should be processed by the aliasing engine
            </summary>
        </member>
        <member name="M:Ektron.Cms.Settings.UrlAliasing.Validation.RequestValidator.GetAlias(System.Uri,System.String)">
            <summary>
            This method strips the site path from the url leaving the alias
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Activity.ActivityCommentServiceClient">
            <summary>
            ActivityComment service client class for WCF layer
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.ServiceClient`1">
            <summary>
            Service client base class
            </summary>
            <typeparam name="T">related type</typeparam>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.ServiceClient`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="serviceFileName"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.ServiceClient`1.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="serviceFileName">service file name</param>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.ServiceClient`1.CloseService">
            <summary>
            Common method that closes a service call
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Services.ServiceClient`1.ServiceInstance">
            <summary>
            Gets instance of service interface.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Services.ServiceClient`1.AuthenticationToken">
            <summary>
            Authentication token public propety
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Services.ServiceClient`1.LanguageId">
            <summary>
            Languague ID public property
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityCommentServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityCommentServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authenticationToken.
            </summary>
            <param name="authenticationToken">Token for security.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityCommentServiceClient.Add(Ektron.Cms.Activity.ActivityCommentData)">
            <summary>
             Adds a new ActivityCommentData
            </summary>
            <param name="activitycommentData">ActivityComment object to add</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityCommentServiceClient.Update(Ektron.Cms.Activity.ActivityCommentData)">
            <summary>
             Updates an existing ActivityComment
            </summary>
            <param name="activitycommentData">ActivityComment object to update</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityCommentServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing ActivityComment
            </summary>
            <param name="id">ActivityComment Id to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityCommentServiceClient.GetItem(System.Int64)">
            <summary>
            Returns a single Activity comment by ID.
            </summary>
            <param name="id">ID of Activtiy comment to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityCommentServiceClient.GetList(Ektron.Cms.Activity.ActivityCommentCriteria)">
            <summary>
            Returns  a list of all activity comments based upon criteria supplied.
            </summary>
            <param name="criteria">Criteria used to filter results.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityCommentServiceClient.Ektron#Cms#Activity#IActivityComment#GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Activity.ActivityCommentProperty})">
            <summary>
            Returns  a list of all activity comments based upon criteria supplied.
            </summary>
            <param name="criteria">Criteria used to filter results.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Activity.ActivityQueueServiceClient">
            <summary>
            ActivityQueue Service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityQueueServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityQueueServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authenticationToken
            </summary>
            <param name="authenticationToken">Token of security</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityQueueServiceClient.Queue(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Adds an activity to the queue
            </summary>
            <param name="item">The ActivityData Item to add to the queue.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityQueueServiceClient.Dequeue">
            <summary>
            Removes an activity from the queue
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient">
            <summary>
            ActivityServiceClient service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authenticationToken
            </summary>
            <param name="authenticationToken">Token for security</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.Add(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Adds a new activity to the general feed.
            </summary>
            <param name="activity">Activity data to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.Update(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Updates an activity in the general feed.
            </summary>
            <param name="activity">Activity data to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.Delete(System.Int64)">
            <summary>
            Delete's an activity from the general feed.
            </summary>
            <param name="id">The ID of activity to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.GetItem(System.Int64)">
            <summary>
            Returns a single ActivityStream Item by ID.
            </summary>
            <param name="id">ID of Activtiy to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.GetList(Ektron.Cms.Activity.ActivityCriteria)">
            <summary>
            Returns  a list of all activities based upon criteria supplied.
            </summary>
            <param name="criteria">Criteria used to filter results.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.GetListForUser(System.Int64,Ektron.Cms.PagingInfo,System.Int32)">
            <summary>
            Returns a list of activities associated with a user.  These will be activities where the user is the subject or the Actor.
            </summary> 
            <param name="pagingInfo">Paging information for retrieval.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <param name="returnCommentCount">Number of comments to return with each activity. 0 = no comments, -1 = all</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.UpdateActivityMessage(System.Int64,System.Int32,System.String)">
            <summary>
            Updates an existing message for an activity in the general feed.
            </summary>
            <param name="activityId">Id of activity to add message for.</param>
            <param name="languageId">Id of language to add message for.</param>
            <param name="message">Activity message to be added.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.AddActivityMessage(System.Int64,System.Int32,System.String)">
            <summary>
            Adds a language specific message for an activity in the general feed.
            </summary>
            <param name="activityId">Id of activity to add message for.</param>
            <param name="languageId">Id of language to add message for.</param>
            <param name="message">Activity message to be added.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.PrepareActivityTemplateMessages(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Activity temaplete Messages.
            </summary>
            <param name="activity">Representing an Activity that has occured within the CMS.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.Publish(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Publishes an activity to all subscribers.
            </summary>
            <param name="activity">activity that has occured.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.GetActivityMessageTemplateCollection(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Gets activity message.
            </summary>
            <param name="activity">Data of activity</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.IsSiteActivityPublishingEnabled(System.Int64)">
            <summary>
            status activity publishing for the site.  
            </summary>
            <param name="siteId">id site</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.EnableActivityPublishing(System.Int64)">
            <summary>
            Enables activity publishing for the site.  This will also stup defualt notification preferences for any existin users.  
            Warning, depending on the number of users, this call could be time consuming.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.DisableActivityPublishing(System.Int64)">
            <summary>
            Disables activity publishing for the site.  
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.IsSiteActivityEmailReplyEnabled(System.Int64)">
            <summary>
            Gets setting indicating if Activity Email Replies are enabled.  Read Only - use EnableActivityEmailReply and DisableActivityEmailReply 
            to set property.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.EnableActivityEmailReply(System.Int64)">
            <summary>
            Enables Activity Email Replies for the site. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.DisableActivityEmailReply(System.Int64)">
            <summary>
            Disables Activity Email Replies for the site.  
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.PurgeActivity(System.DateTime)">
            <summary>
            Purges the activity older than given date.
            </summary>
            <param name="purgeDate">Date for activity to purge.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.IsActivityPublishingEnabled">
            <summary>
            Gets setting indicating if Activity Publishing is enabled.  Read Only - use EnableActivityPublishing and DisableActivityPublishing 
            to set property.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Services.Activity.ActivityServiceClient.IsActivityEmailReplyEnabled">
            <summary>
            Gets setting indicating if Activity Email Replies are enabled.  Read Only - use EnableActivityEmailReply and DisableActivityEmailReply 
            to set property.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Activity.ActivityStreamServiceClient">
            <summary>
            Activity Stream Service Client 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityStreamServiceClient.#ctor">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityStreamServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityStreamServiceClient.GetUserActivityStream(Ektron.Cms.Activity.ActivityCriteria,System.Int64)">
            <summary>
            Returns a list of activities in a user's ActivityStream based upon supplied criteria.
            </summary> 
            <param name="criteria">Criteira by which to filter the stream.  UserId filter is ignored.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityStreamServiceClient.SendActivityToAllStreams(System.Int64)">
            <summary>
            Sends the activity directly to all user's streams.
            </summary>
            <param name="activityId">Id of activity to send to streams.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityStreamServiceClient.SendActivityToStreams(System.Int64)">
            <summary>
            Sends the activity to all applicable streams based upon the activity and users preferences.
            </summary>
            <param name="activityId">Id of activity to send to streams.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityStreamServiceClient.SendActivityToStreams(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Sends the activity to all applicable streams based upon the activity and users preferences.
            </summary>
            <param name="activity">Activity data object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityStreamServiceClient.SendActivityToUsersStream(System.Int64,System.Int64)">
            <summary>
            Adds an activity existing in the general feed to a user's feed.
            </summary>
            <param name="activityId">Id of activity to add to users feed.</param>
            <param name="userId">Id of user.</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Activity.ActivityTypeServiceClient">
            <summary>
            Activity Type Service Client class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityTypeServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityTypeServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityTypeServiceClient.Add(Ektron.Cms.Activity.ActivityTypeData)">
            <summary>
            Adds a new ActivityType to Cms. The ActivityType.Id property will be populated with the new ActivityType's Id.
            </summary>
            <param name="activityTypeData">ActivityTypeData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityTypeServiceClient.Update(Ektron.Cms.Activity.ActivityTypeData)">
            <summary>
            Updates an existing ActivityType in Cms.
            </summary>
            <param name="activityTypeData">ActivityTypeData object to save.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityTypeServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a ActivityType from the Cms.
            </summary>
            <param name="id">Id of ActivityType to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityTypeServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a ActivityType by Id.
            </summary>
            <param name="id">Id of ActivityType to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Activity.ActivityTypeServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Activity.ActivityTypeProperty})">
            <summary>
            Retrieves a list.
            </summary>
            <param name="criteria">Criteria by which to filter ActivityType being retrieved.</param>
            <returns>List of ActivityType data objects.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.WCFServices.Analytics.Google.GoogleAnalyticsV3ServiceClient">
            <summary>
            GoogleAnalyticsV3 Service Client 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.WCFServices.Analytics.Google.GoogleAnalyticsV3ServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.WCFServices.Analytics.Google.GoogleAnalyticsV3ServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient">
            <summary>
            Report Analytucs Service Client
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.CloneAnalytics(Ektron.Cms.Common.EkRequestInformation)">
            <summary>
            Clone Analytics 
            </summary>
            <param name="requestInformation">Requestinformation</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetVersionDates(System.Int64,System.Int64,System.Int64)">
            <summary>
            Get Version Dates
            </summary>
            <param name="itemId">Item Id</param>
            <param name="baseHistoryId">base history Id</param>
            <param name="comparisonHistoryId">comparison history id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetVersionDates(System.Int64,System.Int32,System.Int64,System.Int64)">
            <summary>
            Get Version Dates
            </summary>
            <param name="itemId">item id</param>
            <param name="itemLanguage">item language</param>
            <param name="baseHistoryId">base history id</param>
            <param name="comparisonHistoryId">comparison history id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetLocations(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Locations
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetLocations(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Locations
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetNewVsReturningVisitors(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get New Vs Returning Visitors 
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">startDate</param>
            <param name="endDate">endDate</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetNewVsReturningVisitors(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get New Vs Returning Visitors
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetLanguages(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Languages
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetLanguages(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Languages
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetVisitsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            GetVisitsTrend
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">startDate</param>
            <param name="endDate">end Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetVisitsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            GetVisitsTrend
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetAbsoluteUniqueVisitorsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Visits Trend 
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">startDate</param>
            <param name="endDate">endDate</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetAbsoluteUniqueVisitorsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Absolute Unique Visitors Trend
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
            <param name="criteria">criteria </param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetPageViewsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Page views Trend
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria object</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetPageViewsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Page Views Trend
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetAveragePageViewsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            GetAveragePageViewsTrend
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetAveragePageViewsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Average Page Views Trend
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetTimeOnSiteTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Time on Site Trend
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetTimeOnSiteTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get time on Site Trend
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetBounceRateTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Bounce rate trend
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetBounceRateTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Bounce Rate Trend
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetReportTrend(System.String,Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Report Trend
            </summary>
            <param name="provider">provider</param>
            <param name="reportName">report name</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetReportTrend(Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Report Trend
            </summary>
            <param name="reportName">report name</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetBrowsers(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Browsers
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetBrowsers(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Browsers 
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">end Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetOperatingSystems(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Operating Systems
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetOperatingSystems(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Operating Systems
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetPlatforms(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Platforms
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetPlatforms(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Platforms
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetScreenColors(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Screen Colors
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetScreenColors(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Screen Colors
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">end Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetScreenResolutions(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Screen Resolutions
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetScreenResolutions(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Screen Resolutions
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetFlashVersions(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Flash Versions
            </summary>
            <param name="provider">Provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetFlashVersions(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Flash versions
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetJavaSupport(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Java support
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetJavaSupport(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Java support
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetNetworkLocations(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Network Locations
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetNetworkLocations(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Network locations
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetHostnames(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Host Names
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetHostnames(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Host Names
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetConnectionSpeeds(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Connections speeds
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetConnectionSpeeds(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Connection Speeds
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetUserDefinedValue(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get User Defined Value
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetUserDefinedValue(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get User Defined Value
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">end Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetDirectTraffic(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Direct Traffic
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetDirectTraffic(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Direct traffic
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetReferringSites(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Referring Sites
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetReferringSites(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get refferring sites
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetSearchEngines(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Search Engines
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetSearchEngines(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Search Engines
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetAllTrafficSources(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get all traffic sources
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetAllTrafficSources(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get All Traffic Sources
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetKeywords(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Keywords
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetKeywords(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get keywords
            </summary>
            <param name="startDate">Start Date</param>
            <param name="endDate">End Date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetCampaigns(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Campaigns
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetCampaigns(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Campaigns
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetAdVersions(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Ad versions
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetAdVersions(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Ad versions
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetReportRanked(System.String,Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Report Ranked
            </summary>
            <param name="provider">provider</param>
            <param name="reportName">reportname</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetReportRanked(Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Reports ranked
            </summary>
            <param name="reportName">report Name</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetTopContent(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get top content
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetTopContent(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Top content
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetContentbyTitle(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get content by title
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetContentbyTitle(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Content by title
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetTopLandingPages(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get top landing pages
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetTopLandingPages(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get top landing pages
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetTopExitPages(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get top exit pages
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetTopExitPages(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get top exit pages
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetNextPagePaths(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get next page paths
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetNextPagePaths(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Next Page Paths
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetCmsSearchTerms(System.DateTime,System.DateTime)">
            <summary>
            Get Cms search terms
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetContentDetail(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Content Details
            </summary>
            <param name="provider">provider</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetContentDetail(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            Get Content Details
            </summary>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetProviderList">
            <summary>
            Get Provider List
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetProviderSiteList(System.String)">
            <summary>
            Get Provier List
            </summary>
            <param name="provider">provider</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetProviderType(System.String)">
            <summary>
            Get Provider type
            </summary>
            <param name="providerName">Provide Name</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetProviderSiteURL(System.String)">
            <summary>
            Get Provider Site Url
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetTrackingCodePath">
            <summary>
            Get Tracking code path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetUserAccount">
            <summary>
            Get user account
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetBeaconData(System.String)">
            <summary>
            Ge Beaxon Data
            </summary>
            <param name="host">host</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetBeaconData(System.String,System.Type)">
            <summary>
            Get Beacon Data
            </summary>
            <param name="host">host</param>
            <param name="providerType">provider type</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.HasProviders">
            <summary>
            Has providers method
            </summary>
            <returns>a boolean indicating wheather it has providers or not</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.HasProvider(System.String)">
            <summary>
            Has provider method
            </summary>
            <param name="providerName">Provider Name</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetSiteProviders(System.String)">
            <summary>
            Gets sites providers
            </summary>
            <param name="siteUrl">site url</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.IsAnalyticsViewer">
            <summary>
            Is Analytics Viewer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetSegments(System.String)">
            <summary>
            Get Segments
            </summary>
            <param name="provider">provider</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.AllowSorting(System.String)">
            <summary>
            Allows sorting 
            </summary>
            <param name="providerName">provider name</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetMetrics(System.String)">
            <summary>
            Get metrics
            </summary>
            <param name="providerName">Provider Name</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetDimensions(System.String)">
            <summary>
            Get Dimensions
            </summary>
            <param name="providerName">Provider Name</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetSegmentFilterCookieName(System.String)">
            <summary>
            Get SegmentFilter Cookie Name
            </summary>
            <param name="providerName">Provider Name</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Analytics.ReportAnalyticsServiceClient.GetReportDefinitions(System.String)">
            <summary>
            Get Report Definition list
            </summary>
            <param name="providerName">Provider Name</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.CampaignManagement.ExactTargetServiceClient">
            <summary>
            ExactTarget Service Client
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.ExactTargetServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.ExactTargetServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.ExactTargetServiceClient.Authenticate(Ektron.Cms.CampaignManagement.ExactTargetData)">
            <summary>
            Authenticate ExactTarget Client.
            </summary>
            <param name="exactTargetData">ExactTargetData</param>
            <returns>bool</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.Add(Ektron.Cms.CampaignManagement.LandingPageData)">
            <summary>
            Add a landing page
            </summary>
            <param name="data">LandingPageData</param>
            <returns>LandingPageData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.Update(Ektron.Cms.CampaignManagement.LandingPageData)">
            <summary>
            
            </summary>
            <param name="landingPageData">LandingPageData</param>
            <returns>LandingPageData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.Save(Ektron.Cms.CampaignManagement.LandingPageData)">
            <summary>
            save a landing page
            </summary>
            <param name="landingPageData">LandingPageData</param>
            <returns>LandingPageData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.Clone(System.Int64)">
            <summary>
            Clone a landing page
            </summary>
            <param name="landingPageId">long</param>
            <returns>New LandingPageData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.Delete(System.Int64)">
            <summary>
            Delete a landing page
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.GetItem(System.Int64)">
            <summary>
            Get a landing page
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.GetList(Ektron.Cms.CampaignManagement.LandingPageCriteria)">
            <summary>
            Get a list of landing pages based on criteria
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.GetManifestList">
            <summary>
            Get list of Manifest templates.
            </summary>
            <returns>list of ManifestData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.GetAllSocialChannelsList">
            <summary>
            Get list of All Avaliable Social Channels.
            </summary>
            <returns>list of SocialChannelData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.GetSocialChannelsByLandingPageId(System.Int64)">
            <summary>
            Get list of Social Channels for a given Landing Page.
            </summary>
            <param name="landingPageId">long</param>
            <returns>list of SocialChannelData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.LandingPageServiceClient.GetCampaignManagementSettings">
            <summary>
            Get campaign management settings data.
            </summary>
            <returns>CampaignManagementSettingsData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.Add(Ektron.Cms.CampaignManagement.CallToActionData)">
            <summary>
            To Add a New Call To Action.
            </summary>
            <param name="ctaData">CallToActionData</param>
            <returns>CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.Update(Ektron.Cms.CampaignManagement.CallToActionData)">
            <summary>
            Updates an Existing Call To Action.
            </summary>
            <param name="ctaData">CallToActionData</param>
            <returns>CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.Save(Ektron.Cms.CampaignManagement.CallToActionData)">
            <summary>
            Saves a Call To Action.
            </summary>
            <param name="ctaData">CallToActionData</param>
            <returns>CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a Call To Action By ctaId.
            </summary>
            <param name="ctaId">CTA Id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.GetItem(System.Int64)">
            <summary>
            Gets a Call To Action.
            </summary>
            <param name="id">CallToAction Id</param>
            <returns>CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.GetList(Ektron.Cms.CampaignManagement.CallToActionCriteria)">
            <summary>
            Get List of Call To Actions by CTACriteria.
            </summary>
            <param name="callToActionCriteria">Call to Action Criteria.</param>
            <returns>List Of CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.Ektron#Cms#CampaignManagement#ICallToActionManager#GetListRef(Ektron.Cms.CampaignManagement.CallToActionCriteria@)">
            <summary>
            Internal Use Only, to get around pagingInfo issue on WCF.
            </summary>
            <param name="criteria">Call to Action Criteria.</param>
            <returns>List of CallToActionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.GetAllAssociatedCTAByLandingPageId(System.Int64)">
            <summary>
            Get All Associated CTA's By LandingPageId
            </summary>
            <param name="landingPageId">LandingPageId</param>
            <returns>Call To Action List</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.GetEmbedCode(System.Int64)">
            <summary>
            Get Embed code by CTA Id.
            </summary>
            <param name="id">long</param>
            <returns>string</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.GetEmbedCode(Ektron.Cms.CampaignManagement.CustomCampaignData)">
            <summary>
            Get Embed code of a  CTA by CustomCampaignData.
            </summary>
            <param name="customCampaignData">customCampaignData</param>
            <returns>string</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.CampaignManagement.CallToActionServiceClient.GetRawHtml(System.Int64,System.String,System.Boolean,Ektron.Cms.CampaignManagement.CTAVersion,Ektron.Cms.CampaignManagement.CustomCampaignData)">
            <summary>
            Get Raw HTMl for Rendering by CTA Id.
            </summary>
            <param name="id">long</param>
            <param name="lang">string</param>
            <param name="preview">bool</param>
            <param name="ctaVersion">CTAVersion</param>
            <param name="customCampaignData">customCampaignData</param>
            <returns>string</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.BasketItemServiceClient">
            <summary>
            Basket Item Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketItemServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketItemServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketItemServiceClient.Add(Ektron.Cms.Commerce.BasketItemData)">
            <summary>
            Adds the product or variant or kit items to the basket.
            </summary>
            <param name="basketItemData">BasketItemData object to be added.</param>
            <returns>Returns the added basketitem data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketItemServiceClient.Update(Ektron.Cms.Commerce.BasketItemData)">
            <summary>
            Updates the Kitconfiguration data item in the basket.
            </summary>
            <param name="basketItemData">BasketItemData object to be updated.</param>
            <returns>Returns the basket item data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketItemServiceClient.Delete(System.Int64,System.Int64)">
            <summary>
            Deletes the basket item from the basket.
            </summary>
            <param name="basketItemId">Basket Item Id.</param>
            <param name="basketId"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketItemServiceClient.UpdateQuantity(System.Int64,System.Int64,System.Int32)">
            <summary>
            Updates the basket item quantity.
            </summary>
            <param name="basketItemId">Id of the basket item.</param>
            <param name="basketId">Id of the basket, in which the item quantity is updated.</param>        
            <param name="productQuantity">Product quantity to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketItemServiceClient.GetKitConfiguration(System.Int64,System.Int64)">
            <summary>
            Retrieves the kit configuration data.
            </summary>       
            <param name="basketItemId">Id of the basket item</param>
            <param name="userId">Id of the user.</param>
            <returns>Kit configuration data for the basket item.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketItemServiceClient.GetKitConfiguration(System.Int64,System.String)">
            <summary>
            Retrieves the kit configuration data.
            </summary>       
            <param name="basketItemId">Id of the basket item</param>        
            <param name="shopperId">Id of the shopper,it should be a GUID.</param>
            <returns>Kit configuration data for the basket item.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient">
            <summary>
            Basket Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.Add(Ektron.Cms.Commerce.BasketData)">
            <summary>
            Creates a new cart for the supplied user ID. By setting the <c>openBasketYou</c> parameter to 
            true, the new cart becomes the default open cart.
            </summary>
            <param name="userId">ID of the user for which to create a cart.</param>
            <param name="openBasket">When set to true, the newly created cart becomes the default open cart.</param>
            <returns>Newly created cart object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.Update(Ektron.Cms.Commerce.BasketData)">
            <summary>
            Updates an existing basket item.
            </summary>
            <param name="basketData">Basket object to be upadted.</param>
            <returns>Returns the updated basket data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a cart based on its ID.
            </summary>
            <param name="basketId">The ID of cart to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.Empty(System.Int64)">
            <summary>
            Deletes all the items in a cart based on the cart's ID.
            </summary>
            <param name="basketId">The ID of basket to empty.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.SetDefault(System.Int64,System.Int64)" -->
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.ApplyCoupon(System.Int64,System.Int64)">
            <summary>
            Apply the coupon to specific basket.
            </summary>
            <param name="basketId">BasketId.</param>
            <param name="couponId">CouponId.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.RemoveCoupon(System.Int64,System.Int64)">
            <summary>
            Remove the coupon from specific basket.
            </summary>
            <param name="basketId">BasketId.</param>
            <param name="couponId">CouponId.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single cart based on its ID.
            </summary>
            <param name="id">ID of cart to retrieve.</param>
            <returns>A cart object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.GetDefault">
            <summary>
             Gets the default cart.
            </summary>
            <returns>The default cart object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.GetDefault(System.Int64)">
            <summary>
            Gets a default cart for a specified user.
            </summary>
            <param name="userId">The ID of user for which to retrieve a basket.</param>
            <param name="shopperId">The GUID ID for the non logged in shopper.</param>
            <returns>A default cart object for a specified.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.GetDefault(System.String)">
            <summary>
            Gets a default cart for a non logged in user based upon the shopper's GUID string.
            </summary>
            <param name="shopperId">The GUID ID for the non logged in shopper.</param>
            <returns>a default cart object for a non logged in user.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.GetList(System.Int64)">
            <summary>
            Retrieves a list saved carts for a user ID.
            </summary>        
            <param name="userId">ID of user for which to retrieve a list of saved carts.</param>
            <returns>A list of saved cart objects.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.BasketManagerServiceClient.GetAppliedCoupons(System.Int64)">
            <summary>
            Retrieves the list of coupon items which are applied to the specific basket.
            </summary>
            <param name="basketId">BasketId.</param>
            <returns>Returns list of basket items.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient">
            <summary>
            Address Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient.Add(Ektron.Cms.Commerce.AddressData)">
            <summary>
            Adds a new address based on information in an AddressData object. 
            AddressData.Id will be populated with the newly created ID.
            </summary>
            <param name="addressData">The AddressData object to add.</param>
            <returns>returns added AddressData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient.Add(Ektron.Cms.Commerce.AddressData,System.Int64)">
            <summary>
            Adds a new address based on information in an AddressData object and associates with a 
            customer. AddressData.Id will be populated with the newly created ID.
            </summary>
            <param name="addressData">The AddressData object to add.</param>
            <param name="customerId">The ID of customer to which this address belongs.</param>
            <remarks>Required: Name, AddressLine1, City, PostalCode, Phone.</remarks>
            <returns>returns added AddressData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient.Update(Ektron.Cms.Commerce.AddressData)">
            <summary>
            Updates the supplied Address.
            </summary>
            <param name="addressData">The ID of the AddressData object to update.</param>
            <returns>returns updated AddressData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient.UpdateOrderAddress(Ektron.Cms.Commerce.AddressData,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Updates an address associated with an order.  This update only affects this specific address and 
            does not affect the customer's actual saved address.
            </summary>
            <param name="addressData">Address info to update.</param>
            /// <param name="orderId">Id of order to update address for.</param>
            <param name="isBilling">If true, updates the billing address for an order.</param>
            <param name="isShipping">If true, updates the shipping address for an order.</param>
            <returns>returns updated AddressData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an address.
            </summary>
            <param name="addressId">The ID of the AddressData object to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves an AddressData object by providing its ID.
            </summary>
            <param name="addressId">The ID the of AddressData object to retrieve.</param>
            <returns>An AddressData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.AddressServiceClient.GetList(Ektron.Cms.Commerce.AddressCriteria)">
            <summary>
            Retrieves a list of addresses for a given Criteria.
            </summary>
            <param name="customerId">criteria for retrieving list of addresses.</param>
            <returns>An AddressData object.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient">
            <summary>
            CatalogEntry Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.Add(Ektron.Cms.Commerce.EntryData)">
            <summary>
            Adds and publishes a new catalog entry based on an EntryData object.
            </summary>
            <param name="entry">The EntryData object to add.</param>
            <returns>returns added EntryData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.Update(Ektron.Cms.Commerce.EntryData)">
            <summary>
            Saves an existing catalog entry.
            </summary>
            <param name="entry">The EntryData object to save.</param>
            <returns>returns updated EntryData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a catalog entry based on its ID.
            </summary>
            <param name="entryId">The ID of entry to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.CheckIn(System.Int64)">
            <summary>
            Check In the catalog entry item.
            </summary>
            <param name="entryId">Id of the entry data to be checked in.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.CheckOut(System.Int64)">
            <summary>
            Check out the catalog entry item for edit.
            </summary>
            <param name="entryId">Id of the entry data to be check out.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.Cancel(System.Int64)">
            <summary>
             Undo the last changes of catalog entry item.
            </summary>
            <param name="entryId">Id of entry data item.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.Submit(System.Int64)">
            <summary>
            Submits the catalog entry item for publish.
            </summary>
            <param name="entryId">Id of catalog entry item.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.Restore(System.Int64,System.Int64)">
            <summary>
            Restores a previous version of a catalog entry based on its ID and the version ID to restore.
            </summary>
            <param name="entryId">The ID of the catalog entry to Restore.</param>
            <param name="versionId">Version Id to restore.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.DisableInventory(System.Int64)">
            <summary>
            Disables the inventory option specific catalog entry item.
            </summary>
            <param name="entryId">Id of the catalog entry item.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.EnableInventory(System.Int64)">
            <summary>
            Enables the inventory option to specific catalog entry item.
            </summary>
            <param name="entryId">Id of the catalog entry item.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single catalog entry in the current language based on the entry's ID.
            </summary>
            <param name="entryId">The ID of catalog entry to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.GetList(Ektron.Cms.Commerce.CatalogEntryCriteria)">
            <summary>
            Retrieves a list of EntryData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">The criteria for retrieving EntryData.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CatalogEntryServiceClient.GetList(Ektron.Cms.Commerce.EntryAttributeCriteria)">
            <summary>
             Retrieves a list of EntryData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">EntryAttributeCriteria.</param>
            <returns>Returns list of entry data object.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient">
            <summary>
            Inventory Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.Add(Ektron.Cms.Commerce.InventoryData)">
            <summary>
            Adds the inventory data to catalog entry item.
            </summary>
            <param name="inventoryData">Inventory data object to be added.</param>
            <returns>InventoryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.Update(Ektron.Cms.Commerce.InventoryData)">
            <summary>
            Updates the inventory data to catalog entry item based on its entry id..
            </summary>
            <param name="inventoryData">Inventory data object to be added.</param>
            <returns>InventoryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.IncreaseStockLevel(System.Int64,System.Int32)">
            <summary>
            To increase the Stock level based on the entryId and quantity.
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <param name="quantity">quantity of the catalog entry</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.DecreaseStockLevel(System.Int64,System.Int32)">
            <summary>
            To decrease the Stock level based on the entryId and quantity.
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <param name="quantity">quantity of the catalog entry</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.GetItem(System.Int64)">
            <summary>
            Get the InventoryData based on the entryId
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <returns>InventoryData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.GetUnitsInStock(System.Int64)">
            <summary>
            Get the Units in Stock based on entryId
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <returns>int</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.GetUnitsOnOrder(System.Int64)">
            <summary>
            Get the Units in order based on entryId
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <returns>int</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.GetReorderLevel(System.Int64)">
            <summary>
            Get the ReOrder level based on the entry ID
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <returns>int</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.IsItemAvailable(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Check the Item is availabe or not
            </summary>
            <param name="entryId">Id of the catalog entry</param>
            <param name="quantity">quantity of the catalog entry</param>
            <param name="checkInventoryDisabled">true or false the inventory disabled value</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.InventoryServiceClient.GetList(Ektron.Cms.Commerce.InventoryCriteria)">
            <summary>
            Retrives the list if inventorydata based on the supplied criteria.
            </summary>
            <param name="criteria">criteria by which to filter and sort inventory</param>
            <returns>List of inventory data object</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.ProductTypeServiceClient">
            <summary>
            ProductType Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ProductTypeServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ProductTypeServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient">
            <summary>
            Coupon Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.Add(Ektron.Cms.Commerce.CouponData)">
            <summary>
            Adds the new coupon data object into the CMS.The CouponData.Id property will be populated with the new Coupon's Id.
            </summary>
            <param name="couponData">Coupon data object to be added.</param>
            <returns>Coupon data object.</returns>        
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.AddCouponToObject(Ektron.Cms.Commerce.CouponEntryData)">
            <summary>
            Adds new CouponEntry data object into the CMS.
            </summary>
            <param name="couponEntryData">CouponEntryData object.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.SaveCouponApplications(System.Int64,System.Collections.Generic.List{Ektron.Cms.Commerce.CouponEntryData})">
            <summary>
            Saves all the applications (taxonomy, catalog, product) for a given coupon.  This is assumed to be an all inclusive lists.          
            </summary>
            <param name="couponId">Id of coupon to update.</param>
            <param name="couponEntryList">List of all CouponEntry applications for the given coupon.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.Update(Ektron.Cms.Commerce.CouponData)">
            <summary>
            Updates an existing coupon data object.
            </summary>
            <param name="couponData">Coupon data object to be updated.</param>
            <returns>Coupon data object.</returns>      
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.Delete(System.Int64)">
            <summary>
            Deletes the existing coupon from the CMS
            </summary>
            <param name="couponId">ID of the coupon deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.DeleteCouponApplications(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
            Deletes the existing Coupon Applications from the CMS.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <param name="exclusionIdList">List of Ids not included for delete.</param>
            <param name="objectType">Obeject type of CMSObjectTypes</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.Deactivate(System.Int64)">
            <summary>
            Deactivates the existing coupon.
            </summary>
            <param name="couponId">Id of the coupon.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves the single coupon item by Id.
            </summary>
            <param name="couponId">Id of the coupon to be retrieved.</param>
            <returns>Returns the coupon data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.GetList(Ektron.Cms.Commerce.CouponCriteria)">
            <summary>
            Retrieves the list of coupon item based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the coupon.</param>
            <returns>Returns the list of coupon data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.GetProductList(Ektron.Cms.Commerce.CouponEntryCriteria)">
            <summary>
            Retrieves the list of product coupon item based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the product coupon entry.</param>
            <returns>Returns the list of product coupon entry data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.GetCatalogList(Ektron.Cms.Commerce.CouponEntryCriteria)">
            <summary>
            Retrieves the list of coupon entry item based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the coupon entry.</param>
            <returns>Returns the list ofcoupon entry data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.GetTaxonomyList(Ektron.Cms.Commerce.CouponEntryCriteria)">
            <summary>
            Retrieves the list of coupon entry item based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve the coupon entry.</param>
            <returns>Returns the list ofcoupon entry data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.GetCouponId(System.String)">
            <summary>
            Retieves the coupon id by coupon code.
            </summary>
            <param name="couponCode">Code of the coupon</param>
            <returns>Returns the coupon id</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.Validate(System.Int64)">
            <summary>
            Validates the coupon by coupon id.
            </summary>
            <param name="couponId">Id of the coupon to validate.</param>
            <returns>Retuns true if validation is true.Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.Validate(System.Int64,System.Int64)">
            <summary>
            Validates the coupon by coupon id and product id.
            </summary>
            <param name="couponId">Id of the coupon</param>
            <param name="productId">Id of the product</param>
            <returns>Retuns true if validation is true.Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.IsCouponAppliedToObject(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
            Checks whether the coupon is applied to the particular object or not.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <param name="objectId">Id of the object.</param>
            <param name="objectType">CmsObjectTypes enum.</param>
            <returns>Returns true, if the coupon is applied to the object.Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.IsCouponUsedForOrder(System.Int64)">
            <summary>
            Checks whether the coupon is used in any order or not.
            </summary>
            <param name="couponId">Id of the coupon</param>
            <returns>Returns true, if the coupon is used in order. Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.IsCouponUsedForBasket(System.Int64)">
            <summary>
            Checks whether the coupon is used in the basekt or not.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <returns>Returns true,if the coupon is used in any basket. Otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CouponServiceClient.IsCouponApplicabletoSubscriptions(System.Int64)">
            <summary>
            Checks whether the coupon is applicable to the subscribtion or not.
            </summary>
            <param name="couponId">Id of the coupon.</param>
            <returns>Returns true,if the coupon is applicable to the subscriptions.Otherwise false.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Commerce.CurrencyManager">
            <summary>
            Api class for managing commerce currencies in Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.Add(Ektron.Cms.Commerce.CurrencyData)">
            <summary>
            Adds a new currency to Cms. The Currency.Id property will be populated with the new Currency's Id.
            </summary>
            <param name="currencyData">Currency data object to be added.</param>
            <returns>Currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.Update(Ektron.Cms.Commerce.CurrencyData)">
            <summary>
            Updates an existing currency in Cms.
            </summary>
            <param name="currencyData">Currency data object to be updated.</param>
            <returns>Currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.Delete(System.Int32)">
            <summary>
            Deletes a currency from the Cms.
            </summary>
            <param name="currencyId">Id of currency to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.GetItem(System.Int32)">
            <summary>
            Retrieves a currency by currency Id.
            </summary>
            <param name="currencyId">Id of currency to be retrieved.</param>
            <returns>Currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.GetList(Ektron.Cms.Commerce.CurrencyCriteria)">
            <summary>
            Retrieves a list of currencies.
            </summary>
            <param name="criteria">Criteria by which to filter currency being retrieved.</param>
            <returns>List of currencies meeting criteria filters.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.GetDefaultCurrency">
            <summary>
            Return default Currency.
            </summary>
            <returns>Default currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.GetCurrentCurrency">
            <summary>
            Gets Current Currency
            </summary>
            <returns>Current currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.GetActiveCurrencyList">
            <summary>
            Gets active Currency List
            </summary>
            <returns>List of active currencies.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Commerce.CurrencyManager.CanDelete(System.Int32)">
            <summary>
            Checks to see if a currency can be deleted.
            </summary>
            <param name="currencyId">Id of currency to delete.</param>        
            <returns>true if currency can safely be deleted.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.Add(Ektron.Cms.Commerce.CustomerData)">
            <summary>
            Adds a new customer. The Customer.Id property will be populated with the new Customer's Id.
            </summary>
            <param name="customerData">Customer data to be added.</param>
            <returns>Returns customer data with new customer's Id.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.Add(Ektron.Cms.Commerce.CustomerData,Ektron.Cms.Commerce.AddressData)">
            <summary>
            Adds a new customer with a billing address. The Customer.Id property will be populated with the new Customer's Id.
            </summary>
            <param name="customerData">Customer data to be added.</param>
            <param name="billingAddress">Billing address of the customer.  Also serves as shipping address.</param>
            <returns>Returns customer data with new customer's Id.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.Add(Ektron.Cms.Commerce.CustomerData,Ektron.Cms.Commerce.AddressData,Ektron.Cms.Commerce.AddressData)">
            <summary>
            Adds a new customer with seperate billing and shipping addresses. The Customer.Id property will be populated with the new Customer's Id.
            </summary>
            <param name="customerData">Customer data to be added.</param>
            <param name="billingAddress">Billing address of the customer.</param>
            <param name="shippingAddress">Shipping address of the customer.</param>
            <returns>Returns customer data with new customer's Id.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.Add(Ektron.Cms.Commerce.CustomerData,Ektron.Cms.Commerce.AddressData,Ektron.Cms.Commerce.AddressData,System.Boolean)">
            <summary>
            Adds a new customer with seperate billing and shipping addresses. The Customer.Id property will be populated with the new Customer's Id.
            </summary>
            <param name="customerData">Customer data to be added.</param>
            <param name="billingAddress">Billing address of the customer.</param>
            <param name="shippingAddress">Shipping address of the customer.</param>
            <param name="ISGuestCheckout">Is GuestCheckOut or Not.</param>
            <returns>Returns customer data with new customer's Id.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.Update(Ektron.Cms.Commerce.CustomerData)">
            <summary>
            Updates an existing customer.
            </summary>
            <param name="customerData">Customer data to be updated.</param>
            <returns>Returns customer data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a customer from the Cms.
            </summary>
            <param name="customerId">Id of the customer to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.SetBillingAddress(System.Int64,System.Int64)">
            <summary>
            Sets a customers billing address.
            </summary>
            <param name="customerId">Id of the customer.</param>
            <param name="addressId">Id of the address to be set as billing address to the customer.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.SetShippingAddress(System.Int64,System.Int64)">
            <summary>
            Sets a customers shipping address.
            </summary>
            <param name="customerId">Id of the customer.</param>
            <param name="addressId">Id of the address to be set as billing address to the customer.</param>        
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.IsUserNameExists(System.String)">
            <summary>
            Returns whether the given UserName is available to Add a new user or not
            </summary>
            <param name="userName">Name of the User.</param>
            <returns>returns true, If UserName is available to Add anew user.Otherwise false.</returns>        
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a customer.
            </summary>
            <param name="customerId">Id of customer to be retrieved.</param>
            <returns>CustomerData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CustomerServiceClient.GetList(Ektron.Cms.Commerce.CustomerCriteria)">
            <summary>
            Returns a list of customers based upon supplied criteria.
            </summary>
            <param name="criteria">criteria by which to retrieve customer objects.</param>
            <returns>List of CustomerData</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient">
            <summary>
            OrderManager Service Client for WCF
            </summary>    
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.PlaceOrder(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,Ektron.Cms.Commerce.PaymentMethod,System.String,System.String)">
            <summary>
            Create new order to the CMS.
            </summary>
            <param name="basketId">Id of the basket.</param>
            <param name="customerId">Id of the customer.</param>
            <param name="billingAddressId">Id of billing address.</param>
            <param name="shippingAddressId">Id of the shipping address.</param>
            <param name="shippingMethodId">Id of the shipping method.</param>
            <param name="orderPayment">PaymentMethod object.</param>
            <param name="specialInstructions">Special Instructions</param>
            <param name="httpHost">HostUrl</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.Update(Ektron.Cms.Commerce.OrderData)">
            <summary>
            Update the existing order.
            </summary>
            <param name="orderData">Order data object.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.Delete(System.Int64)">
            <summary>
            Deletes the order by giving the option only to e-commerce admin or site admin
            </summary>
            <param name="orderId"> Id of the order</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.SetTrackingNumber(System.Int64,System.String,System.Boolean)">
            <summary>
            Sets the tracking number for an order part.
            </summary>
            <param name="orderId">Id of order to set tracking number.</param>
            <param name="trackingNumber">The tracking number</param>
            <param name="markAsShipped">mark the item as shipped.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.Capture(System.Int64)">
            <summary>
            Captures the payment for an order.
            </summary>
            <param name="orderId">Id of order</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.Capture(System.Int64,System.Int64)">
            <summary>
            Captures the payment for an order
            </summary>
            <param name="orderId">Id of an order</param>
            <param name="paymentId">Id of the payment</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.SetFraud(System.Int64)">
            <summary>
            Marks an order as fraudulent.
            </summary>
            <param name="orderId">Id of order</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.SetHold(System.Int64)">
            <summary>
            Sets an order to OnHold.
            </summary>
            <param name="orderId">Id of order</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.SetStatus(System.Int64,Ektron.Cms.Common.EkEnumeration.OrderStatus)">
            <summary>
            Sets the status of an order.
            </summary>
            <param name="orderId">Id of order</param>
            <param name="status">Status to change the order to.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.ApplyCoupon(System.Int64,System.Int64)">
            <summary>
            Applied the coupon to specific order.
            </summary>
            <param name="orderId">OrderId</param>
            <param name="couponId">CouponId</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single order.
            </summary>
            <param name="orderId">Id of order to retrieve.</param>
            <returns>OrderData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.GetList(Ektron.Cms.Commerce.OrderCriteria)">
            <summary>
            Retrieves a list of orders.
            </summary>
            <param name="criteria">criteria by which to retrieve orders.</param>
            <returns>List of OrderData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.GetStatus(System.Int64)">
            <summary>
            Returns the status of an order.
            </summary>
            <param name="orderId">Id of order to retrieve status for.</param>
            <returns>Order status.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.OrderManagerServiceClient.GetOrderPaymentList(Ektron.Cms.Commerce.OrderPaymentCriteria)">
            <summary>
            Returns the list of order payment data.
            </summary>
            <param name="criteria">criteria by which to retrieve orders.</param>
            <returns>List of order payment data.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CountryServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CountryServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CountryServiceClient.Add(Ektron.Cms.Commerce.CountryData)">
            <summary>
            Adds a new country to CMS400.NET based on the CountryData object. The Country.Id property will be 
            populated with the new Country's ID.
            </summary>
            <param name="countryData">The CountryData object to add.</param>
            <returns>returns newly created CountryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CountryServiceClient.Update(Ektron.Cms.Commerce.CountryData)">
            <summary>
            Updates an existing country in CMS400.NET based on the CountryData object.
            </summary>
            <param name="countryData">The CountryData object to save.</param>
            <returns>returns updated CountryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CountryServiceClient.Delete(System.Int32)">
            <summary>
            Deletes a country from the CMS400.NET based on its ID.
            </summary>
            <param name="id">The ID of country to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CountryServiceClient.CanDelete(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults@)">
            <summary>
            Checks to see if a country can be deleted. A country cannot be deleted if a region or 
            address uses the country.  
            </summary>
            <param name="countryId">The ID of the country to delete.</param>
            <param name="result">ValidationResult returned containing messages if country cannot be deleted.</param>
            <returns>Returns true if country can safely be deleted.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CountryServiceClient.GetItem(System.Int32)">
            <summary>
            Retrieves a country by its ID.
            </summary>
            <param name="id">The ID of country to retrieve.</param>
            <returns>A CountryData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CountryServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.CountryProperty})">
            <summary>
            Retrieves a list of countries based on filters set in the <c>Criteria</c> property.
            </summary>
            <param name="criteria">Criteria by which to filter the list of countries being retrieved.</param>
            <returns>A list of countries meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.RegionServiceClient">
            <summary>
            Currency Service Client for WCF
            </summary>    
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RegionServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RegionServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RegionServiceClient.Add(Ektron.Cms.Commerce.RegionData)">
            <summary>
            Adds a new Region to the Cms.  The Region.Id property will be populated with the new regions Id.
            </summary>
            <param name="regionData">RegionData object to add.</param>
            <returns>RegionData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RegionServiceClient.Update(Ektron.Cms.Commerce.RegionData)">
            <summary>
            Updates an existing Region in the Cms.
            </summary>
            <param name="regionData">RegionData object to save.</param>
            <returns>RegionData object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RegionServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a region from the Cms.
            </summary>
            <param name="id">Id of region to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RegionServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a region by region Id.
            </summary>
            <param name="id">Id of region to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RegionServiceClient.Ektron#Cms#Commerce#IRegion#GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.RegionProperty})">
            <summary>
            Gets a list of Currency Data with the specified Criteria
            </summary>
            <param name="criteria">Currency criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RegionServiceClient.CanDelete(System.Int64,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults@)">
            <summary>
            Checks to see if  a Region can be deleted.
            </summary>
            <param name="regionId">Id of Region to delete.</param>
            <param name="result">ValidationResult returned containing messages if Region cannot be deleted.</param>
            <returns>true if region can safely be deleted.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.Add(Ektron.Cms.Commerce.PasswordHistoryData)">
            <summary>
            Adds a new PasswordHistory to Cms. The PasswordHistory.Id property will be populated with the new PasswordHistory's Id.
            </summary>
            <param name="PasswordHistoryData">PasswordHistoryData object to add.</param>
            <returns>PasswordHistory data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.Update(Ektron.Cms.Commerce.PasswordHistoryData)">
            <summary>
            Updates an existing PasswordHistory in Cms.
            </summary>
            <param name="PasswordHistoryData">PasswordHistoryData object to save.</param>
             <returns>PasswordHistory data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a PasswordHistory from the Cms.
            </summary>
            <param name="id">Id of PasswordHistory to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.Purge(System.Int64,System.Int32)">
            <summary>
            Deletes a PasswordHistory from the Cms.
            </summary>
            <param name="userId">Id of user to delete PasswordHistory</param>
            <param name="number">Deletes PasswordHistory except given number of recently added PasswordHistory.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a PasswordHistory by Id.
            </summary>
            <param name="id">Id of PasswordHistory to retrieve.</param>
            <returns>PasswordHistory data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.PasswordHistoryProperty})">
            <summary>
            Retrieves a list of PasswordHistory data objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria by which to filter PasswordHistory being retrieved.</param>
            <returns>List of PasswordHistory data objects.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.GetRecentPasswords(System.Int64,System.Int32)">
            <summary>
            Retrieves the last N number of passwords for a user.
            </summary>
            <param name="userId">The user id to retrieve the recent passwords for.</param>
            <param name="number">The number of recent passwords to get.</param>
            <returns>List of PasswordHistory data objects.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PasswordHistoryServiceClient.MatchesRecentPassword(System.Int64,System.String,System.Int32)">
            <summary>
            Returns whether the password matches the user's last N number of passwords.
            </summary>
            <param name="userId">The user id to matches the recent passwords for.</param>
            <param name="passwordHash">Hashed password to match.</param>
            <param name="number">The number of recent passwords to look in.</param>
            <returns>returns true, if password matches.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient">
            <summary>
            CreditCard Service Client for WCF
            </summary>
             
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.Add(Ektron.Cms.Commerce.CreditCardTypeData)">
            <summary>
            Adds a new credit card type to Cms. The Id property will be populated with the new credit card type's Id.
            </summary>
            <param name="item">credit card type object to add.</param>
            <returns>returns added CreditCardTypeData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.Update(Ektron.Cms.Commerce.CreditCardTypeData)">
            <summary>
            Updates an existing credit card type in Cms.
            </summary>
            <param name="item">credit card type object to save.</param>
            <returns>returns updated CreditCardTypeData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a credit card type from the Cms.
            </summary>
            <param name="id">Id of credit card type to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a credit card type by Id.
            </summary>
            <param name="id">Id of credit card type to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.CreditCardTypeProperty})">
            <summary>
            Retrieves a list of credit card types.
            </summary>
            <param name="criteria">criteria object used for sorting, paging, and filtering results.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.GetAcceptedCreditCardList">
            <summary>
            Retrieves a list of accepted credit card types.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.IsDateValid(Ektron.Cms.Commerce.CreditCardPayment)">
            <summary>
            Validates the date of a creditCard vs the server's datetime.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CreditCardServiceClient.IsCardValid(Ektron.Cms.Commerce.CreditCardPayment,System.Boolean)">
            <summary>
            Validates creditCard values and date. Does NOT talk to the payment gateway.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient">
            <summary>
            PaymentGateway Service Client for WCF
            </summary>    
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient.Add(Ektron.Cms.Commerce.PaymentGatewayData)" -->
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient.Update(Ektron.Cms.Commerce.PaymentGatewayData)">
            <summary>
            Update the existing PaymentGatewayData object.
            </summary>
            <param name="gatewayData">PaymentGatewayData object to update.</param>
            <returns>Paymentgateway data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient.Delete(System.Int64)">
            <summary>
            Delete the existing Payamentgateway.
            </summary>
            <param name="gatewayId">Id of the gateway to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient.SetDefault(System.Int64)">
            <summary>
            Mark the existing gateway as default gateway.
            </summary>
            <param name="gatewayId">Id of the gateway to become default.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient.GetDefault">
            <summary>
            Return default paymentgateway.
            </summary>
            <returns>Default paymentgateway data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves the payamentgateway by gateway id.
            </summary>
            <param name="gatewayId">Id of the gateway to retrieved.</param>
            <returns>Paymentgateway data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PaymentGatewayServiceClient.GetList(Ektron.Cms.Commerce.PaymentGatewayCriteria)">
            <summary>
            Retrieves a list of paymentgateways.
            </summary>
            <param name="criteria">Criteria by which to filter paymentgateway being retrieved.</param>
            <returns>List of paymentgateways meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient">
            <summary>
            ExchangeRate Service Client for WCF
            </summary>    
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient.Add(Ektron.Cms.Commerce.ExchangeRateData)">
            <summary>
            Adds a new Exchange Rate to the Cms. 
            </summary>
            <param name="exchangeRateData">Exchange rate data to be added.</param>
            <returns>Exchange rate data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient.Update(Ektron.Cms.Commerce.ExchangeRateData)">
            <summary>
            Updates an existing Exchange Rate in Cms.
            </summary>
            <param name="exchangeRateData">Exchange rate data to be updated.</param>
            <returns>Exchage rate data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient.Delete(Ektron.Cms.Commerce.ExchangeRateData)">
            <summary>
            Deletes an Exchange Rate from the Cms.
            </summary>
            <param name="exchangeRateData">ExchangeRate data to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient.GetCurrentExchangeRate">
            <summary>
            Retrieves the current exchange rate.
            </summary>
            <returns>Exchange rate data object retrieved.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient.GetCurrentExchangeRate(System.Int32,System.Int32)">
            <summary>
            Retrieves the current exchange rate by exchange currency Id.
            </summary>
            <param name="baseCurrencyId">Id of the current exchangeRate to retrieve.</param>
            <param name="exchangeCurrencyId">Id of the exchange exchangeRate to retrieve.</param>
            <returns>Exchange rate data object retrieved.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient.GetCurrentExchangeRateList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.ExchangeRateProperty})">
            <summary>
            Retrieves a list of exchange rates.
            </summary>
            <param name="criteria">Criteria by which to filter exchange rates being retrieved.</param>
            <returns>List of exchange rates meeting criteria filters.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ExchangeRateServiceClient.GetExchangeRateList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.ExchangeRateProperty})">
            <summary>
            Retrieves a list of current exchange rates.
            </summary>
            <param name="criteria">Criteria by which to filter exchange rates being retrieved.</param>
            <returns>List of exchange rates meeting criteria filters.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RecommendationServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RecommendationServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RecommendationServiceClient.UpdateCrossSell(System.Int64,System.Collections.Generic.IEnumerable{Ektron.Cms.Commerce.RecommendationItemData})">
            <summary>
            Updates the CrossSell.
            </summary>
            <param name="entryId">Id of entry</param>
            <param name="recommendations">Enumerable of RecommendationItemData object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RecommendationServiceClient.UpdateUpSell(System.Int64,System.Collections.Generic.IEnumerable{Ektron.Cms.Commerce.RecommendationItemData})">
            <summary>
            Updates the UpSell.
            </summary>
            <param name="entryId">Id of entry</param>
            <param name="recommendations">Enumerable of RecommendationItemData object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RecommendationServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a recommendation.
            </summary>
            <param name="recommendationId">Id of recommendation to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RecommendationServiceClient.DeleteByEntry(System.Int64)">
            <summary>
            Delete recommendations associated with a catalog entry.
            </summary>
            <param name="entryId">Id of entry to delete recommendations for.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RecommendationServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a recommendation by id.
            </summary>
            <param name="recommendationId">Id of recommendation to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.RecommendationServiceClient.GetList(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.RecommendationType)">
            <summary>
             Retrieves a list of RecommendationItemData objects based upon the supplied criteria.
            </summary>
            <param name="entryId">Catalog entry Id.</param>
            <param name="entryLanguage">Catalog entry language.</param>
            <param name="type">Recommendation type.</param>
            <returns>Returns list of recommendation items which are matches the criteria. </returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.PackageServiceClient">
            <summary>
            Package Service Client for WCF
            </summary>    
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PackageServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PackageServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PackageServiceClient.Add(Ektron.Cms.Commerce.PackageData)">
            <summary>
            Adds a new Package to Cms. The Package.Id property will be populated with the new Package's Id.
            </summary>
            <param name="packageData">PackageData object to add.</param>
            <returns>Package data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PackageServiceClient.Update(Ektron.Cms.Commerce.PackageData)">
            <summary>
            Updates an existing Package in Cms.
            </summary>
            <param name="packageData">PackageData object to save.</param>
            <returns>Package data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PackageServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a Package from the Cms.
            </summary>
            <param name="id">Id of Package to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PackageServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a package by package Id.
            </summary>
            <param name="id">Id of package to retrieve.</param>
            <returns>Package data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.PackageServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.PackageProperty})">
            <summary>
            Retrieves a list of Packages.
            </summary>
            <param name="criteria">Criteria by which to filter package being retrieved.</param>
            <returns>List of Packages meeting criteria filters.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.ShippingMethodServiceClient">
            <summary>
            Shipping Method Service Client for WCF
            </summary>    
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ShippingMethodServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ShippingMethodServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ShippingMethodServiceClient.Add(Ektron.Cms.Commerce.ShippingMethodData)">
            <summary>
            Adds a new shipping method to Cms.
            </summary>
            <param name="shippingMethodData">ShippingMethodData object to add.</param>
            <returns>ShippingMethod data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ShippingMethodServiceClient.Update(Ektron.Cms.Commerce.ShippingMethodData)">
            <summary>
            Updates an existing shipping method in Cms.
            </summary>
            <param name="shippingMethodData">ShippingMethodData object to save.</param>
            <returns>ShippingMethod data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ShippingMethodServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a shipping method from CMS.
            </summary>
            <param name="shippingMethodId">Id of the Shipping method to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ShippingMethodServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves the single shipping method by shipping method id.
            </summary>
            <param name="shippingMethodId">Id of the shipping method to retrieved.</param>
            <returns>ShippingMethod data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.ShippingMethodServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.ShippingMethodProperty})">
            <summary>
            Retrieves a list of shipping methods.
            </summary>
            <param name="criteria">Criteria by which to filter shipping methods being retrieved.</param>
            <returns>List of shipping methods meeting criteria filters.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxClassServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxClassServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxClassServiceClient.Add(Ektron.Cms.Commerce.TaxClassData)">
            <summary>
            Adds a new Tax Class to Cms. The TaxClass.Id property will be populated with the new TaxClass's Id.
            </summary>
            <param name="taxClassData">TaxClassData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxClassServiceClient.Update(Ektron.Cms.Commerce.TaxClassData)">
            <summary>
            Updates an existing Tax Class in Cms.
            </summary>
            <param name="taxClassData">TaxClassData object to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxClassServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a Tax Class from the Cms.
            </summary>
            <param name="id">Id of TaxClass to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxClassServiceClient.IsUsed(System.Int64)">
            <summary>
            Returns whether a TaxClass is used in a product or not.
            </summary>
            <param name="id">Id of TaxClass.</param>
            <returns>returns true, If TaxClass is used in a product.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxClassServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a tax class by Id.
            </summary>
            <param name="id">Id of taxClass to retrieve.</param>
            <returns>TaxClassData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxClassServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.TaxClassProperty})">
            <summary>
            Retrieves a list of Tax Classes.
            </summary>
            <param name="criteria">Criteria by which to filter taxClass being retrieved.</param>
            <returns>List of TaxClass data objects.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient">
            <summary>
            
            TaxRate Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.Add(Ektron.Cms.Commerce.TaxRateData)">
            <summary>
            Adds a new Tax rate to Cms. The Tax.Id property will be populated with the new Tax's Id.
            </summary>
            <param name="taxRateData">TaxRateData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.Update(Ektron.Cms.Commerce.TaxRateData)">
            <summary>
            Updates an existing tax rate in Cms.
            </summary>
            <param name="taxRateData">TaxRateData object to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a Tax rate from the Cms.
            </summary>
            <param name="taxRateId">Id of Tax to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.DeleteByRegion(System.Int64)">
            <summary>
            Deletes all rates associated with a region
            </summary>
            <param name="regionId">Id of Region to delete rates for.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.DeleteByCountry(System.Int32)">
            <summary>
            Deletes all rates associated with a country
            </summary>
            <param name="countryId">Id of country to delete rates for.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.GetItem(System.Int64)">
            <summary>
            Gets a TaxRate based upon Tax Rate Id.
            </summary>
            <param name="taxRateId">Id of tax rate to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.GetList(Ektron.Cms.Commerce.TaxRateCriteria)">
            <summary>
            Gets alist of rates based upon the supplied criteria.
            </summary>
            <param name="criteria">criteria by which to filter and sort TaxRates.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.GetApplicableTaxRate(Ektron.Cms.Commerce.AddressData,Ektron.Cms.Commerce.AddressData,System.Int64)">
            <summary>
            Returns the applicable tax rate for the supplied addresses and tax class.  
            </summary>
            <param name="shipFromAddress">Address where the products are coming from.</param>
            <param name="shipToAddress">Address where products are going.</param>
            <param name="taxClassId">The taxClass for which to retrieve a rate</param>
            <returns></returns> 
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxRateServiceClient.GetApplicableTaxRateList(Ektron.Cms.Commerce.AddressData,Ektron.Cms.Commerce.AddressData)">
            <summary>
            Returns a list of applicable tax rates for the supplied addresses.  There will be at most one rate for each available tax class for the the specified addresses.
            </summary>
            <param name="shipFromAddress">Address where the products are coming from.</param>
            <param name="shipToAddress">Address where products are going.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.TaxTypeServiceClient">
            <summary>
            TaxType Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxTypeServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxTypeServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxTypeServiceClient.Add(Ektron.Cms.Commerce.TaxTypeData)">
            <summary>
            Adds a new Tax Type Cms. The TaxType.Id property will be populated with the new TaxType's Id.
            </summary>
            <param name="taxTypeData">TaxTypeData object to add.</param>
            <returns>tax type data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxTypeServiceClient.Update(Ektron.Cms.Commerce.TaxTypeData)">
            <summary>
            Updates an existing Tax Type in Cms.
            </summary>
            <param name="taxTypeData">TaxTypeData object to save.</param>
            <returns>tax type data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxTypeServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a Tax Type from the Cms.
            </summary>
            <param name="id">Id of TaxType to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxTypeServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a tax type by Id.
            </summary>
            <param name="id">Id of taxType to retrieve.</param>
            <returns>tax type data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.TaxTypeServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.TaxTypeProperty})">
            <summary>
            Retrieves a list of Tax Types.
            </summary>
            <param name="criteria">Criteria by which to filter taxType being retrieved.</param>
            <returns>List of TaxTypeData objects.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient">
            <summary>
            Warehouse Service Client for WCF
            </summary>    
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient.Add(Ektron.Cms.Commerce.WarehouseData)">
            <summary>
            Adds new warehouse to the CMS.The WarehouseData.Id property will be populated with the new Warehouse's Id.
            </summary>
            <param name="warehouseData">Warehouse data object to add</param>
            <returns>Warehouse data object addeded</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient.Update(Ektron.Cms.Commerce.WarehouseData)">
            <summary>
            Updates the existing warehouse.
            </summary>
            <param name="warehouseData">WarehouseData object to update.</param>
            <returns>Warehouse data object Updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient.Delete(System.Int64)">
            <summary>
            Deletes the warehouse from CMS
            </summary>
            <param name="warehouseId">Id of the warehouse to deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient.SetDefault(System.Int64)">
            <summary>
            Marks the existing warehouse as default warehouse.
            </summary>
            <param name="warehouseId">Id of the warehouse to become default warehouse.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient.GetItem(System.Int64)">
            <summary>
            Gets the single warehouse data object by warehouse Id.
            </summary>
            <param name="warehouseId">Id of the warehouse to retrieved.</param>
            <returns>Warehouse data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient.GetList(Ektron.Cms.Commerce.WarehouseCriteria)">
            <summary>
            Retuns the list of warehouse data object by supplied criteria.
            </summary>
            <param name="criteria">Criteria by which to filter warehouse being retrieved.</param>
            <returns>List of warehouses meeting criteria filters.</returns>               
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.WarehouseServiceClient.GetDefault">
            <summary>
            Gets the default warehouse.
            </summary>
            <returns>Warehouse data object.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.FavoriteTaxonomyServiceClient">
            <summary>
            Favorite Taxonomy Service client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoriteTaxonomyServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoriteTaxonomyServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoriteTaxonomyServiceClient.Add(Ektron.Cms.Community.FavoriteTaxonomyData)">
            <summary>
            Adds a Favorite's Taxonomy item
            </summary>
            <param name="favoriteTaxonomyData">The FavoriteTaxonomyData object to add</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoriteTaxonomyServiceClient.Update(Ektron.Cms.Community.FavoriteTaxonomyData)">
            <summary>
            Updates a Favorite's Taxonomy item details
            </summary>
            <param name="favoriteTaxonomyData">The FavoriteTaxonomyData object to update</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoriteTaxonomyServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a Favorite's Taxonomy item
            </summary>
            <param name="id">The FavoriteTaxonomy Id to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoriteTaxonomyServiceClient.GetTree(System.Int64,System.Int32,System.Boolean,Ektron.Cms.PagingInfo)">
            <summary>
            Gets a Favorite's Taxonomy item
            </summary>
            <param name="id">The FavoriteTaxonomyData id to be retrieved</param>
            <param name="depth">The FavoriteTaxonomyData structure depth to retrieve</param>
            <param name="includeItems">Set whether the returned object contains included items or not.</param>
            <param name="pagingInfo">Set Paging details</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoriteTaxonomyServiceClient.GetItem(System.Int64)">
            <summary>
            Gets a single favorite's Taxonomy.  To retrieve the whole or partial parts of the tree, use GetTree().
            </summary>
            <param name="id">ID of the Favortie's Taxonomy to retreive. Internally the folder is stored as Taxonomy so this is the corresponding taxonomy ID.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoriteTaxonomyServiceClient.GetUserTaxonomy(System.Int64)">
            <summary>
            Gets a User's Taxonomy
            </summary>
            <param name="userId">The user id</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.FlagServiceClient">
            <summary>
            Flag Service Client Clas
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagServiceClient.Add(Ektron.Cms.ObjectFlagData)">
            <summary>
            Add a new ObjectFlag based on information in an ObjectFlagData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="objectFlagData">The ObjectFlagData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagServiceClient.Update(Ektron.Cms.ObjectFlagData)">
            <summary>
            Updates an existing FlagObject in the CMS.
            </summary>
            <param name="objectFlagData">The ObjectFlagData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a FlagObject in the CMS.
            </summary>
            <param name="id">The ID of the FlagObject to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single ObjectFlag object from the CMS.
            </summary>
            <param name="id">The ID of the ObjectFlag to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagServiceClient.GetList(Ektron.Cms.Community.FlagCriteria)">
            <summary>
            Retrieves a list of Flag objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve Flag objects.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.FriendsTaxonomyServiceClient">
            <summary>
            Friends taxonomy Service client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsTaxonomyServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsTaxonomyServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication 
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsTaxonomyServiceClient.Add(Ektron.Cms.Community.FriendTaxonomyData)">
            <summary>
            Adds a new FriendTaxonomyData item, with details from the supplied friendTaxonomyData object.
            </summary>
            <param name="friendFolderData">The FriendTaxonomyData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsTaxonomyServiceClient.Update(Ektron.Cms.Community.FriendTaxonomyData)">
            <summary>
            Updates a FriendTaxonomyData item, with details from the supplied friendTaxonomyData object.
            </summary>
            <param name="friendFolderData">The FriendTaxonomyData to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsTaxonomyServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing FriendTaxonomyData.
            </summary>
            <param name="id">the identifier of the FriendTaxonomyData item to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsTaxonomyServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a FriendTaxonomyData item.
            </summary>
            <param name="id">the identifier of the FriendTaxonomyData item to get</param>
            <returns>FriendTaxonomyData details in a FriendTaxonomyData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsTaxonomyServiceClient.GetTree(System.Int64,System.Int32,System.Boolean,Ektron.Cms.PagingInfo)">
            <summary>
            Return detail of a FriendTaxonomyData item
            </summary>
            <param name="id">item id</param>
            <param name="depth">depth</param>
            <param name="includeItems">Should items be included?</param>
            <param name="pagingInfo">Set Paging details</param>
            <returns>FriendTaxonomyData details in a FriendTaxonomyData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsTaxonomyServiceClient.GetUserTaxonomy(System.Int64)">
            <summary>
            Gets a User's Friends Taxonomy.
            </summary>
            <param name="userId">The user ID of the user to retrieve friends Taxonomy for.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient">
            <summary>
            Message Board Service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.#ctor">
            <summary>
            COnstructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.Add(Ektron.Cms.MessageBoardData)">
            <summary>
            Adds a new MessageBoard, with details from the supplied MessageBoardData object.
            </summary>
            <param name="messageBoardData"></param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.Update(Ektron.Cms.MessageBoardData)">
            <summary>
            Updates a MessageBoard, with details from the supplied MessageBoardData object.
            </summary>
            <param name="messageBoardData"></param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing MessageBoard.
            </summary>
            <param name="id">the identifier of the MessageBoard to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.Delete(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType)">
            <summary>
            Deletes an existing MessageBoard.
            </summary>
            <param name="objectId">the identifier of the object</param>
            <param name="objectType">the type of the object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.Delete(System.Collections.Generic.List{System.Int64})">
            <summary>
            Deletes an existing MessageBoard.
            </summary>
            <param name="ids">the list of the ids</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a MessageBoard.
            </summary>
            <param name="id">the identifier of the MessageBoard to get</param>
            <returns>MessageBoard details in a MessageBoardData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.GetList(Ektron.Cms.Community.MessageBoardCriteria)">
            <summary>
            Returns a list of MessageBoards that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the MessageBoards to return</param>
            <returns>a list of MessageBoards</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.Approve(System.Int64)">
            <summary>
            Approves a Message
            </summary>
            <param name="id">the identifier of the Message</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.Approve(System.Collections.Generic.List{System.Int64})">
            <summary>
            Approves a list of Message
            </summary>
            <param name="ids">the list of the ids</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.GetReplyList(System.Int64)">
            <summary>
            Get the replies
            </summary>
            <param name="id">the identifier of the Message</param>
            <returns>a list of MessageBoards</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.GetUnapprovedList(Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,Ektron.Cms.PagingInfo)">
            <summary>
            Get a list of Unapproved messages from a messageboard for a given object.
            </summary>
            <param name="objectType">Type of object to retrieve pending messages for.</param>
            <param name="objectId">ID of object to retreive pending messages for.</param>
            <param name="paging">Paging parameter to control paging of list.</param>
            <returns>List of MessageBoardData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MessageBoardServiceClient.IsUserMessageBoardAdmin(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
            <summary>
            Check the user that who is the MessageBoard admin or not.
            </summary>
            <param name="objectId"></param>
            <param name="objectType"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagDefinitionServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagDefinitionServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagDefinitionServiceClient.Add(Ektron.Cms.FlagDefData)">
            <summary>
            Adds a new FlagDefinitionData object.         
            </summary>
            <param name="FlagDefinitionData">The FlagDefinitionData object to add.</param>
            <returns>Returns the FlagDefinitionData added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagDefinitionServiceClient.Update(Ektron.Cms.FlagDefData)">
            <summary>
            Updates an existing FlagDefinitionData in the CMS.
            </summary>
            <param name="FlagDefinitionData">The FlagDefinitionData object to update.</param>
            <returns>Returns the FlagDefinitionData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagDefinitionServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a FlagDefinitionData in the CMS.
            </summary>
            <param name="id">The ID of the FlagDefinitionData to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagDefinitionServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single FlagDefinitionData object from the CMS.
            </summary>
            <param name="id">The ID of the FlagDefinitionData to retrieve.</param>
            <returns>FlagDefinitionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FlagDefinitionServiceClient.GetList(Ektron.Cms.Flag.FlagDefinitionCriteria)">
            <summary>
            Retrieves a list of FlagDefinitionData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve FlagDefinitionData.</param>
            <returns>List of FlagDefinitionData</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.RatingServiceClient">
            <summary>
            Rating service client 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authenticationtoken
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.Add(Ektron.Cms.RatingData)">
            <summary>
            Adds new Rating
            </summary>
            <param name="ratingData"> The RatingData object</param>
            <returns>The RatingData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.Update(Ektron.Cms.RatingData)">
            <summary>
            Update Rating type
            </summary>
            <param name="ratingData"> The RatingtData object</param>
            <returns>The RatingData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.Delete(System.Int64)">
            <summary>
            Delete Rating
            </summary>
            <param name="ratingId"> The ID of the Rating to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.GetItem(System.Int64)">
            <summary>
            Get the Rating item
            </summary>
            <param name="ratingId">The ID of the Rating to Get.</param>
            <returns>RatingData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.GetList(Ektron.Cms.Community.RatingCriteria)">
            <summary>
            Retrieves a list based on the criteria
            </summary>
            <param name="criteria">Criteria used to retrieve Rating.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.GetStatistics(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
            Get RatingStatictic data by objectId and objectType
            </summary>
            <param name="objectId">Object id of the rating object</param>
            <param name="objectType">Object type of the rating object</param>        
            <returns>RatingStatisticData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.Purge(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.DateTime,System.DateTime)">
            <summary>
             Purges all ratings of a particular objectId and ObjectType.
            </summary>
            <param name="objectId">The ID of the object that is having its ratings purged.</param>
            <param name="objectType">The Type of the object that is having its ratings purged.</param>
            <param name="startDate">The start date of object that is having its ratings purged.</param>   
            <param name="endDate">The end date of object that is having its ratings purged.</param> 
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.RatingServiceClient.Purge(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.DateTime,System.DateTime,Ektron.Cms.Common.EkEnumeration.RatingState)">
            <summary>
             Purges all ratings of a particular objectId and ObjectType.
            </summary>
            <param name="objectId">The ID of the object that is having its ratings purged.</param>
            <param name="objectType">The Type of the object that is having its ratings purged.</param>
            <param name="startDate">The start date of object that is having its ratings purged.</param>   
            <param name="endDate">The end date of object that is having its ratings purged.</param> 
            <param name="ratingState">The rating state of object that is having its ratings purged.</param> 
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Content.FormServiceClient">
            <summary>
            Content Service Client 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.GetFormFieldList(System.Int64)">
            <summary>
            Retrieves the list of form fields defined in the specified form.
            </summary>
            <param name="FormId">
            	Specifies the form. 
            	Value Type: <see cref="!:Long"/> (System.Long)
            </param>
            <returns>The list for defined fields in the given form.	<see cref="T:Ektron.Cms.FormFieldList"/> (Ektron.Cms.FormFieldList)</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.GetList(Ektron.Cms.Common.FormCriteria)">
            <summary>
            Retrieves a list of HTML FormData without submitted results.
            </summary>
            <param name="criteria">Criteria is used to define which forms to be retrieved.</param>
            <returns>List of HTML FormData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.GetItem(System.Int64,System.Int64)">
            <summary>
            Retrieves a single HTML FormData object without submitted results.
            </summary>
            <param name="formId">The HTML form's id to be retrieved.</param>
            <param name="langId">The HTML form's language type id.</param>
            <returns>A FormData Object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.GetFormHtmlWithValidation(System.Int64,System.Int32,System.String,System.String)">
            <summary>
            Returns the Forms HTML and internal validation scripts.  This does not register the extra scripts needed.
            </summary>
            <param name="FormID">Long: the Form's ID</param>
            <param name="LangId">int: the Form's language ID</param>
            <param name="clientId">The uniquely generated client id of the control housing the calling code.</param>
            <param name="uniqueId">The uniquely generated control key.  E.G Page_Panel_FormControl</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.GetFormDataHistogramById(System.Int64)">
            <summary>
            Gets the forms histogram values for drawing the results chart.
            </summary>
            <param name="FormID"></param>
            <returns>Arraylist</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.GetFormFieldQuestionsById(System.Int64)">
            <summary>
            Gets the forms field questions values for drawing the results chart.
            </summary>
            <param name="FormID"></param>
            <returns>Hashtable</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.Add(Ektron.Cms.FormData)">
            <summary>
            Adds a new HTML Form type of content to the CMS.  formData.Id will be populated with the Id of the new form item.
            </summary>
            <param name="contentData"> The formData object to add to the CMS.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.Update(Ektron.Cms.FormData)">
            <summary>
            Updates an existing HTML Form item in the CMS.
            </summary>
            <param name="formData">The formData object to update.</param>
            <returns>Returns the custom CmsData object update</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.Delete(System.Int64,System.Int32)">
            <summary>
            Deletes an existing HTML Form item from the cms, including the submitted data.
            </summary>
            <param name="formId">HTML Form ID to be delted.</param>
            <param name="langId">HTML Form Language ID.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.FormServiceClient.SubmitFormData(System.Int64,Ektron.Cms.FormSubmittedData)">
            <summary>
            Commits submitted form data to the database and returns the response html.
            </summary>
            <param name="submittedData">The information about what form was submitted, including its fields.</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Content.LibraryServiceClient">
            <summary>
            Library Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.LibraryServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.LibraryServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.LibraryServiceClient.Add(Ektron.Cms.LibraryData)">
            <summary>
            Adds a new library based on information in an LibraryData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="libraryData">The LibraryData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.LibraryServiceClient.Update(Ektron.Cms.LibraryData)">
            <summary>
            Updates an existing library in the CMS.
            </summary>
            <param name="libraryData">The LibraryData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.LibraryServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a library in the CMS.
            </summary>
            <param name="id">The ID of the library to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.LibraryServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single LibraryData object from the CMS.
            </summary>
            <param name="id">The ID of the library to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.LibraryServiceClient.GetList(Ektron.Cms.Content.LibraryCriteria)">
            <summary>
            Retrieves a list of LibraryData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve librarys.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.LibraryServiceClient.GetLibraryItemByContentId(System.Int64,System.Int32)">
            <summary>
            Retrieves a LibraryData object based upon the ContentId.
            </summary>
            <param name="contentId">ContentId of the Library item to retrieve.</param>
            <param name="languageId">LanguageId of the Library item to retrieve.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Content.TemplateServiceClient">
            <summary>
            Template Manager Service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.TemplateServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.TemplateServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.TemplateServiceClient.Add(Ektron.Cms.TemplateData)">
            <summary>
            Add a new TemplateData object
            </summary>
            <param name="templateData">TemplateData object to be added</param>
            <returns>TemplateData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.TemplateServiceClient.Update(Ektron.Cms.TemplateData)">
            <summary>
            Update the TemplateData object in data base
            </summary>
            <param name="templateData">TemplateData object to be updated</param>
            <returns>TemplateData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.TemplateServiceClient.Delete(System.Int64)">
            <summary>
            Delete a TemplateData object from data base, by its id
            </summary>
            <param name="templateDataId">TemplateData object id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.TemplateServiceClient.GetItem(System.Int64)">
            <summary>
            Pick a single TemplateData object from data base filtering by its id
            </summary>
            <param name="templateDataId">TemplateData object id</param>
            <returns>TemplateData object found</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.TemplateServiceClient.GetList(Ektron.Cms.Common.TemplateCriteria)">
            <summary>
            Pick a group of TemplateData objects form data base filtering by using a criteria object
            </summary>
            <param name="criteria">Object used to perform filtering based on several TemplateData object properties</param>
            <returns>A list of TemplateData objects found</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Device.CmsDeviceConfigurationServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Device.CmsDeviceConfigurationServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Device.CmsDeviceConfigurationServiceClient.Add(Ektron.Cms.Device.CmsDeviceConfigurationData)">
            <summary>
            Adds a new Device, with details from the supplied CmsDeviceConfigurationData object.
            </summary>
            <param name="deviceType">The CmsDeviceConfigurationData object to add.</param>
            <returns>Returns the Id of the CmsDeviceConfigurationData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Device.CmsDeviceConfigurationServiceClient.Update(Ektron.Cms.Device.CmsDeviceConfigurationData)">
            <summary>
            Updates a Device, with details from the supplied CmsDeviceConfigurationData object.
            </summary>
            <param name="deviceType">The CmsDeviceConfigurationData object to update.</param>
            <returns>Returns the Id of the CmsDeviceConfigurationData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Device.CmsDeviceConfigurationServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing Device.
            </summary>
            <param name="id">The identifier number of the Device to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Device.CmsDeviceConfigurationServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves Device Item by the specified Id
            </summary>
            <param name="id">Id of the Device object to retrieve</param>
            <returns>CmsDeviceConfigurationData object with details of the Device</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Device.CmsDeviceConfigurationServiceClient.GetList(Ektron.Cms.Device.CmsDeviceConfigurationCriteria)">
            <summary>
            Returns a list of Devices that fit the supplied criteria.
            </summary>
            <param name="criteria">Used to specify, or filter, the Devices to return</param>
            <returns>A list of Devices</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Device.CmsDeviceConfigurationServiceClient.Reorder(System.Collections.Generic.List{Ektron.Cms.Device.CmsDeviceConfigurationData})">
            <summary>
            Reorder devices.
            </summary>
            <param name="deviceTypes">Devices types to reorder.</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Organization.MenuServiceClient">
            <summary>
            Menu Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.Add(Ektron.Cms.Organization.MenuData)">
            <summary>
            Adds the specified menu data.
            </summary>
            <param name="menuData">The menu data.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.Add(Ektron.Cms.Organization.MenuItemData)">
            <summary>
            Adds the specified menu item data.
            </summary>
            <param name="menuItemData">The menu item data.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.Add(Ektron.Cms.Organization.SubMenuData)">
            <summary>
            Adds submenudata
            </summary>
            <param name="subMenuData">a new submenudata</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.DeleteMenu(System.Int64)">
            <summary>
            Deletes the menu and all of its children.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.DeleteMenuItem(System.Int64)">
            <summary>
            Deletes the menu item and all of its children.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.GetMenu(System.Int64)">
            <summary>
            Gets the menu without its children. For the entire menu, call GetTree.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.GetMenuItem(System.Int64)">
            <summary>
            Retrieves a menu item by ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.GetTree(System.Int64)">
            <summary>
            Gets the menu and all of its children by MenuId. Can get the root level or from a SubMenu.
            </summary>
            <param name="menuId">The menu id.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.GetMenuList(Ektron.Cms.Organization.MenuCriteria)">
            <summary>
            Get a list of MenuData, not menubase data, based upon the supplied criteria.
            </summary>
            <param name="criteria">The criteria to get menus.</param>
            <returns>A list of Menudata.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.GetMenuItemList(Ektron.Cms.Organization.MenuItemCriteria)">
            <summary>
            Returns a list of menu ites based upon the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the menu items to return</param>
            <returns>A list of menuitemdata</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.Update(Ektron.Cms.Organization.MenuData)">
            <summary>
            Updates the specified menu data.
            </summary>
            <param name="menuData">The menu data.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.Update(Ektron.Cms.Organization.SubMenuData)">
            <summary>
            updates menu data
            </summary>
            <param name="menuData">menu data to be updated</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.MenuServiceClient.Update(Ektron.Cms.Organization.MenuItemData)">
            <summary>
            Updates the specified menu item data.
            </summary>
            <param name="menuItemData">The menu item data.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient">
            <summary>
            Multivariate experiment model client
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.Create(System.Int64,System.Int64,System.Int32)">
            <summary>
            Creates new MultivariateExperimentData
            </summary>
            <param name="experimentPageID">Expirement's Page Id</param>
            <param name="targetPageID">target page id</param>
            <param name="maxConversions">max conversions</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.Update(System.Int64,System.Int64,System.Int32)">
            <summary>
            Updates MultivariateExperiment Data
            </summary>
            <param name="experimentPageID">expirement's page id</param>
            <param name="targetPageID">target page id</param>
            <param name="maxConversions">max conversions</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.Find(System.Int64)">
            <summary>
            find MultivariateExperiment Data by id
            </summary>
            <param name="id">the id of the MultivariateExperimentData to find</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.Find(System.Int64,System.Int64)">
            <summary>
            finds MultivariateExperiment Data by experiment page id and target page id
            </summary>
            <param name="experimentPageID">experiment page id</param>
            <param name="targetPageID">target page id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.FindByExperimentPageID(System.Int64)">
            <summary>
            finds all MultivariateExperimentData that belong to a given expirement page id
            </summary>
            <param name="experimentPageID">the expirement page id to match with</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.FindByTargetPageID(System.Int64)">
            <summary>
            finds all MultivariateExperiment Data that match a given target page id
            </summary>
            <param name="targetPageID">target page id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.Remove(System.Int64)">
            <summary>
            removes expirement by id
            </summary>
            <param name="id">id of the expirement</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.Remove(System.Int64,System.Int64)">
            <summary>
            removes an expirement by expirement page id and target page id
            </summary>
            <param name="experimentPageID">expirement page id</param>
            <param name="targetPageID">target page id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.RemoveByTargetPageID(System.Int64)">
            <summary>
            removes expirements by target page id
            </summary>
            <param name="targetPageID">the target page id to remove at</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateExperimentModelClient.RemoveByExperimentPageID(System.Int64)">
            <summary>
            Remove expirement by page id
            </summary>
            <param name="experimentPageID">the expirement's page id to remove at</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient">
            <summary>
            MultivariateReportModel Service client
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.Create(System.Int64,System.Guid,System.Int32,System.Int32)">
            <summary>
            Create
            </summary>
            <param name="pageId">pageId</param>
            <param name="variantGuid">variantGuid</param>
            <param name="hits">hits</param>
            <param name="conversions">conversions</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.Update(System.Int64,System.Int64,System.Guid,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Update 
            </summary>
            <param name="id">id</param>
            <param name="pageId">pageId</param>
            <param name="variantGuid">variantGuid</param>
            <param name="hits">hits</param>
            <param name="conversions">conversions</param>
            <param name="disabled">disabled</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.FindByID(System.Int64)">
            <summary>
            FindById
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.FindByPageID(System.Int64)">
            <summary>
            FindByPageID
            </summary>
            <param name="pageId">pageId</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.FindByCombinationGuid(System.Guid)">
            <summary>
            FindByCombinationGuid
            </summary>
            <param name="combinationGuid">combination guid</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.FindAll">
            <summary>
            Find all
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.IncrementHits(System.Int64,System.Guid)">
            <summary>
            increment hits
            </summary>
            <param name="pageId">pageId</param>
            <param name="variantGuid">variantGuid</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.IncrementConversions(System.Int64,System.Guid)">
            <summary>
            increment conversions
            </summary>
            <param name="pageId">pageId</param>
            <param name="variantGuid">variantGuid</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.AddHits(System.Int64,System.Guid,System.Int32,System.Int32)">
            <summary>
            AddHits
            </summary>
            <param name="pageId">pageId</param>
            <param name="variantGuid">variantGuid</param>
            <param name="hits">hits</param>
            <param name="conversions">conversions</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.Remove(System.Int64)">
            <summary>
            remove 
            </summary>
            <param name="id">id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.RemoveByPageID(System.Int64)">
            <summary>
            remove by page id
            </summary>
            <param name="pageID">pageid</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.Multivariate.MultivariateReportModelClient.IsMultivariateAdmin">
            <summary>
            IsMultivariateAdmin
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient">
            <summary>
            Page model service client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.Create(System.String,System.Int64,System.String,System.Int32,System.Int64,System.String,System.String,Ektron.Cms.PageBuilder.PageData@,System.Boolean,System.String)">
            <summary>
            Creates new pagedata
            </summary>
            <param name="title">title</param>
            <param name="folderid">folderid</param>
            <param name="aliasname">aliasname</param>
            <param name="languageid">languageid</param>
            <param name="wireframeid">wireframeid</param>
            <param name="metaInfoXml">metaInfoXml</param>
            <param name="summary">summary</param>
            <param name="pageinfo">pageinfo</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.CreateMasterLayout(System.String,System.Int64,System.String,System.Int32,System.Int64,System.String,System.String,Ektron.Cms.PageBuilder.PageData@)">
            <summary>
            Creates a masterlayout
            </summary>
            <param name="title">title</param>
            <param name="folderid">folderid</param>
            <param name="aliasname">aliasname</param>
            <param name="languageid">languageid</param>
            <param name="wireframeid">wireframeid</param>
            <param name="metaInfoXml">metaInfoXml</param>
            <param name="summary">summary</param>
            <param name="pageinfo">pageinfo</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.Save(Ektron.Cms.PageBuilder.PageData)">
            <summary>
            Saves pagedata
            </summary>
            <param name="pageinfo">Pagedata to save</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.CheckIn(Ektron.Cms.PageBuilder.PageData)">
            <summary>
            Check in pagedata
            </summary>
            <param name="pageinfo">page info to check in</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.CheckOut(Ektron.Cms.PageBuilder.PageData)">
            <summary>
            Checkout 
            </summary>
            <param name="pageinfo">pageinfo</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.Revert(Ektron.Cms.PageBuilder.PageData)">
            <summary>
            revert method 
            </summary>
            <param name="pageinfo">pageinfo</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.Publish(Ektron.Cms.PageBuilder.PageData)">
            <summary>
            Publish a mode
            </summary>
            <param name="pageinfo">pagedata to publish</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.Get(System.Int64,Ektron.Cms.PageBuilder.PageData@,Ektron.Cms.Common.ContentBase@,System.Boolean)">
            <summary>
            Gets contentdata 
            </summary>
            <param name="id">id</param>
            <param name="pageinfo">pageinfo</param>
            <param name="contentdata">contentdata</param>
            <param name="preview">get by preview</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.Get(System.Int64,Ektron.Cms.PageBuilder.PageData@,System.Boolean)">
            <summary>
            Gets pegadata
            </summary>
            <param name="id">id to retrieve</param>
            <param name="pageinfo">the pageinfo to retrieve</param>
            <param name="preview">gets by preview</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.Delete(Ektron.Cms.PageBuilder.PageData)">
            <summary>
            Deletes pagedata
            </summary>
            <param name="pageinfo">the paging info</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageModelClient.Copy(Ektron.Cms.PageBuilder.PageData,System.Int64,System.String,System.Int32,System.Int64,System.String,System.String,Ektron.Cms.PageBuilder.PageData@,System.Boolean)">
            <summary>
            Copy pagedata
            </summary>
            <param name="input">input</param>
            <param name="folderid">folderid</param>
            <param name="aliasname">aliasname</param>
            <param name="languageid">languageid</param>
            <param name="wireframeid">wireframeid</param>
            <param name="metaInfoXml">metaInfoXml</param>
            <param name="summary">summary</param>
            <param name="output">output</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient">
            <summary>
            Template model client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.Create(System.String,Ektron.Cms.Common.EkEnumeration.TemplateType,Ektron.Cms.Common.EkEnumeration.TemplateSubType,System.String,System.String)">
            <summary>
            creates new template data
            </summary>
            <param name="path">path</param>
            <param name="type">type</param>
            <param name="subType">subType</param>
            <param name="thumbnailfile">thumbnailfile</param>
            <param name="description">description</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.Create(System.String,Ektron.Cms.Common.EkEnumeration.TemplateType,Ektron.Cms.Common.EkEnumeration.TemplateSubType,System.String,System.String,System.Int64)">
            <summary>
            Creates new template data
            </summary>
            <param name="path">path</param>
            <param name="type">type</param>
            <param name="subType">subType</param>
            <param name="thumbnailfile">thumbnailfile</param>
            <param name="description">description</param>
            <param name="masterLayoutID">masterLayoutID</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.Create(System.String,Ektron.Cms.Common.EkEnumeration.TemplateType,Ektron.Cms.Common.EkEnumeration.TemplateSubType,System.String,System.String,System.String)">
            <summary>
            Creates a template model 
            </summary>
            <param name="path">path parameter</param>
            <param name="type">type</param>
            <param name="subType">subtype</param>
            <param name="thumbnailfile">thumbnailfile</param>
            <param name="description">description</param>
            <param name="templateName">templatename</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.Create(System.String,Ektron.Cms.Common.EkEnumeration.TemplateType,Ektron.Cms.Common.EkEnumeration.TemplateSubType,System.String,System.String,System.Int64,System.String)">
            <summary>
            Creates new template data
            </summary>
            <param name="path">path</param>
            <param name="type">type</param>
            <param name="subType">subType</param>
            <param name="thumbnailfile">thumbnailfile</param>
            <param name="description">description</param>
            <param name="masterLayoutID">masterLayoutID</param>
            <param name="templateName">templateName</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.Update(Ektron.Cms.TemplateData)">
            <summary>
            updates template data
            </summary>
            <param name="template">template data</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.Remove(System.Int64)">
            <summary>
            Removes a template mode by id
            </summary>
            <param name="id">id of the template model</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.FindByID(System.Int64)">
            <summary>
            find template data by id
            </summary>
            <param name="id">the identifier used to locate the data</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.FindByMasterLayoutID(System.Int64)">
            <summary>
            Find template data by master layour id
            </summary>
            <param name="masterlayoutid">masterlayoutid</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.FindByContentID(System.Int64)">
            <summary>
            Find by content id
            </summary>
            <param name="contentid">contentid id used to locate template data</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.GenerateThumbnail(System.String)">
            <summary>
            Generates a thumbnail
            </summary>
            <param name="Filename">filename</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.TemplateModelClient.GenerateThumbnail(System.Int64)">
            <summary>
            Generates a thumbnail
            </summary>
            <param name="MasterLayoutID">masterlayour id</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient">
            <summary>
            Widget List Container model service Client for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient.#ctor(System.String)">
            <summary>
            Constructor with con authentication token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient.Create(System.Int64,Ektron.Cms.Widget.WidgetListContainerData@)">
            <summary>
            To Create an Instance of WidgetListContainerModelClient.
            </summary>
            <param name="id">Id.</param>
            <param name="widgetListContainer">WidgetListContainerData</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient.Create(System.Guid,Ektron.Cms.Widget.WidgetListContainerData@)">
            <summary>
            To Create an Instance of WidgetListContainerModelClient.
            </summary>
            <param name="anonymousId">anonymousId.</param>
            <param name="widgetListContainer">WidgetListContainerData.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient.FindAll">
            <summary>
            Find All.
            </summary>
            <returns>WidgetListContainerData Collections.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient.FindByID(System.Int64,Ektron.Cms.Widget.WidgetListContainerData@)">
            <summary>
            Find by Id.
            </summary>
            <param name="id">Id.</param>
            <param name="widgetListContainer">WidgetListContainer.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient.Remove(System.Int64)">
            <summary>
            To Remove an Instance of WidgetListContainerModelClient.
            </summary>
            <param name="id">Id.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient.Duplicate(Ektron.Cms.Widget.WidgetListContainerData,Ektron.Cms.Widget.WidgetListContainerData@)">
            <summary>
            To Duplicate an Instance of WidgetListContainerModelClient.
            </summary>
            <param name="input">WidgetListContainerData.</param>
            <param name="output">WidgetListContainerData.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListContainerModelClient.IsLicenseEnabled">
            <summary>
            Is License Enabled.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Widget.WidgetListModelClient">
            <summary>
            Widget List model service Client class for WCF layer 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListModelClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListModelClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token for security.
            </summary>
            <param name="authenticationToken">authenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListModelClient.Create(System.Int64,Ektron.Cms.Widget.WidgetListData@)">
            <summary>
            To create an instance of the WidgetListData.
            </summary>
            <param name="containerId">ConteinerId.</param>
            <param name="widgetList">WidgetList.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListModelClient.Update(System.Int64,System.Int64)">
            <summary>
            To Update an instance of the WidgetListData.
            </summary>
            <param name="id">Id.</param>
            <param name="containerId">ContainerId.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListModelClient.FindAll(System.Int64)">
            <summary>
            Find All.
            </summary>
            <param name="containerId">Conteiner Id.</param>
            <returns>WidgetListData Collections.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListModelClient.FindByID(System.Int64,Ektron.Cms.Widget.WidgetListData@)">
            <summary>
            Find by Id.
            </summary>
            <param name="id">Id.</param>
            <param name="widgetList">WidgetList.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListModelClient.Remove(System.Int64)">
            <summary>
            To Remove an instance of the WidgetListData.
            </summary>
            <param name="id">Id.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetListModelClient.Duplicate(Ektron.Cms.Widget.WidgetListData,System.Int64,Ektron.Cms.Widget.WidgetListData@)">
            <summary>
            To Duplicate an instance of the WidgetListData.
            </summary>
            <param name="input">WidgetListData.</param>
            <param name="containerId">Container Id.</param>
            <param name="output">WidgetListData.</param>
            <returns>Bool.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Widget.WidgetModelClient">
            <summary>
             WidgetModelClient model service Client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetModelClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetModelClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token.
            </summary>
            <param name="authenticationToken">Token for security</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetModelClient.Create(System.String,System.Int64,System.Int64,System.Boolean,Ektron.Cms.Widget.WidgetData@)">
            <summary>
            Create model service Client class for WCF layer. 
            </summary>
            <param name="controlUrl">controlUrl</param>
            <param name="columnId">Id for column</param>
            <param name="order">Order</param>
            <param name="isMinimized">isMinimized</param>
            <param name="widget">WidgetData</param>
            <returns>bool</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetModelClient.Update(Ektron.Cms.Widget.WidgetData,System.Int64,System.Int64,System.Boolean)">
            <summary>
             Update model service Client class for WCF layer. 
            </summary>
            <param name="widget">WidgetData.</param>
            <param name="columnId">Id for column.</param>
            <param name="order">Order</param>
            <param name="isMinimized">isMinimized</param>
            <returns>Bool</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetModelClient.FindAll(System.Int64)">
            <summary>
            Find All model service Client class for WCF layer. 
            </summary>
            <param name="columnId">Id for Column.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetModelClient.FindByID(System.Int64,Ektron.Cms.Widget.WidgetData@)">
            <summary>
            Find by Id model service Client class for WCF layer. 
            </summary>
            <param name="id">Id.</param>
            <param name="forum">WidgetData.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetModelClient.Remove(Ektron.Cms.Widget.WidgetData)">
            <summary>
            Remove model service Client class for WCF layer. 
            </summary>
            <param name="widget">WidgetData</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetModelClient.Duplicate(Ektron.Cms.Widget.WidgetData,System.Int64,Ektron.Cms.Widget.WidgetData@)">
            <summary>
             Duplicate model service Client class for WCF layer. 
            </summary>
            <param name="input">WidgetData</param>
            <param name="listId">list of the Id</param>
            <param name="output">WidgetData</param>
            <returns>Bool.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Widget.WidgetSettingsModelClient">
            <summary>
            Class WidgetSettingsModelClient.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetSettingsModelClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetSettingsModelClient.#ctor(System.String)">
            <summary>
            Constructor con Autenthication Token.
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetSettingsModelClient.Set(System.Int64,System.String,System.String)">
            <summary>
            Set parameters instance WidgetSettingsModelClient.
            </summary>
            <param name="widgetId">widgetId.</param>
            <param name="key">key.</param>
            <param name="value">value.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetSettingsModelClient.Get(System.Int64,System.String,System.String@)">
            <summary>
            Set parameters instance WidgetSettingsModelClient.
            </summary>
            <param name="widgetId">WidgetId.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetSettingsModelClient.FindAll(System.Int64)">
            <summary>
            Find all.
            </summary>
            <param name="widgetId">widgetId.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient">
            <summary>
            Widget Type Model service client class 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.#ctor(System.String)">
            <summary>
            constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.Create(System.String,System.String,System.String,System.String,System.Boolean,Ektron.Cms.Widget.WidgetTypeData@)">
            <summary>
            To create an instance of the WidgetTypeModelClient. 
            </summary>
            <param name="title">title.</param>
            <param name="buttonText">buttonText.</param>
            <param name="controlUrl">controlUrl.</param>
            <param name="settings">settings.</param>
            <param name="active">active.</param>
            <param name="widgetType">widgetType.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.Create(System.String,System.String,System.String,System.String,System.Boolean,Ektron.Cms.Personalization.WidgetSpaceScope,Ektron.Cms.Widget.WidgetTypeData@)">
            <summary>
            To create an instance of the WidgetTypeModelClient. 
            </summary>
            <param name="title">title.</param>
            <param name="buttonText">buttonText.</param>
            <param name="controlUrl">controlUrl.</param>
            <param name="settings">settings.</param>
            <param name="active">active.</param>
            <param name="scope">scope.</param>
            <param name="widgetType">WidgetTypeData.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.Update(System.Int64,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            To Update an instance of the WidgetTypeModelClient.
            </summary>
            <param name="id">id.</param>
            <param name="title">title.</param>
            <param name="buttonText">buttonText.</param>
            <param name="controlUrl">controlUrl.</param>
            <param name="settings">settings.</param>
            <param name="active">active.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.FindAll">
            <summary>
            Find All.
            </summary>
            <returns>WidgetTypeData Collections.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.FindAll(System.Int64)">
            <summary>
            Find All. 
            </summary>
            <param name="widgetSpaceID">widgetSpaceID</param>
            <returns>WidgetTypeData Collections.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.FindAll(Ektron.Cms.Personalization.WidgetSpaceScope)">
            <summary>
            Find All. 
            </summary>
            <param name="scope">Scope.</param>
            <returns>WidgetTypeData Collections.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.FindAll(Ektron.Cms.Personalization.WidgetSpaceScope,Ektron.Cms.Common.EkEnumeration.CmsRoleIds[])">
            <summary>
            Find All. 
            </summary>
            <param name="scope">Scope.</param>
            <param name="roles">Roles.</param>
            <returns>WidgetTypeData Collections.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.FindByID(System.Int64,Ektron.Cms.Widget.WidgetTypeData@)">
            <summary>
            Find by Id.
            </summary>
            <param name="id">Id.</param>
            <param name="widgetType">WidgetType.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.FindByControlURL(System.String,Ektron.Cms.Widget.WidgetTypeData@)">
            <summary>
            Find by control Url.
            </summary>
            <param name="url">Url.</param>
            <param name="widgetType">WidgetType.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.Remove(System.Int64)">
            <summary>
            To Remove Service Instance.
            </summary>
            <param name="id">Id.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.SyncWidgetsDirectory(System.String)">
            <summary>
            synchronized Widgets Directory. 
            </summary>
            <param name="virtualPath">VirtualPath.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.SyncWidgetsDirectory">
            <summary>
            synchronized Widgets Directory. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Widget.WidgetTypeModelClient.ResetWireframeWidgetAssociations(System.Int64)">
            <summary>
            This will reset wireframe widget associations. By default, this is used by target content Widget.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient">
            <summary>
            WireframeModelClient Type Model service client class 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.#ctor(System.String)">
            <summary>
            Constructor with authentication Token.
            </summary>
            <param name="authenticationToken">Token for security</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.Create(System.String,System.String,System.String,System.Int64)">
            <summary>
            To create an instance of the WireframeModelClient. 
            </summary>
            <param name="path">Path.</param>
            <param name="thumbnailfile">thumbnailfile</param>
            <param name="description">description</param>
            <param name="masterlayoutid">masterlayoutid</param>
            <returns>WireframeData.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.Create(System.String,System.String,System.String)">
            <summary>
            To create an instance of the WireframeModelClient.
            </summary>
            <param name="path">path.</param>
            <param name="thumbnailfile">thumbnailfile.</param>
            <param name="description">description.</param>
            <returns>WireframeData.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.Create(System.String,System.Int64,System.String,System.String)">
            <summary>
            To create an instance of the WireframeModelClient.
            </summary>
            <param name="path">path.</param>
            <param name="templateId">templateId.</param>
            <param name="thumbnailfile">thumbnailfile.</param>
            <param name="description">description.</param>
            <returns>WireframeData.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.Create(System.String,System.String,System.String,System.String)">
            <summary>
            To create an instance of the WireframeModelClient.
            </summary>
            <param name="path">path.</param>
            <param name="thumbnailfile">thumbnailfile.</param>
            <param name="description">description.</param>
            <param name="templatename">templatename.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.Create(System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            To create an instance of the WireframeModelClient.
            </summary>
            <param name="path">path.</param>
            <param name="templateId">templateId.</param>
            <param name="thumbnailfile">thumbnailfile.</param>
            <param name="description">description.</param>
            <param name="templatename">templatename.</param>
            <returns>WireframeData.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.Update(Ektron.Cms.PageBuilder.WireframeData)">
            <summary>
            To Update the WireframeModelClient.
            </summary>
            <param name="wireframe">WireframeData.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.Remove(System.Int64)">
            <summary>
            To Remove the WireframeModelClient.
            </summary>
            <param name="id">id.</param>
            <returns>Bool.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.FindByID(System.Int64)">
            <summary>
            Find by Id.
            </summary>
            <param name="id">id.</param>
            <returns>WireframeData.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.FindByPageID(System.Int64)">
            <summary>
            Find Page by Id.
            </summary>
            <param name="pageId">pageId.</param>
            <returns>WireframeData.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.FindByTemplateID(System.Int64)">
            <summary>
            Find by Template ID.
            </summary>
            <param name="templateId">templateId.</param>
            <returns>WireframeData.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.FindAll">
            <summary>
            Find All.
            </summary>
            <returns>WireframeData Collections.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.FindByFolderID(System.Int64)">
            <summary>
            Find by folder Id.
            </summary>
            <param name="folderId">folderId.</param>
            <returns>WireframeData Collections.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.AddWidgetTypeAssociation(System.Int64,System.Int64)">
            <summary>
            Add Widget Type Association.
            </summary>
            <param name="wireframeId">wireframeId.</param>
            <param name="widgetTypeId">widgetTypeId.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.RemoveWidgetTypeAssociation(System.Int64,System.Int64)">
            <summary>
            Remove Widget Type Association.
            </summary>
            <param name="wireframeId">wireframeId.</param>
            <param name="widgetTypeId">widgetTypeId.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.RemoveAllWidgetTypeAssociations(System.Int64)">
            <summary>
            Remove All Widget Type Associations.
            </summary>
            <param name="wireframeId"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.WireframeModelClient.GetAssociatedWidgetTypes(System.Int64)">
            <summary>
            Get Associated Widget Types.
            </summary>
            <param name="wireframeId">wireframeId.</param>
            <returns>WidgetTypeData Collections.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Search.QueryPropositionManagerClient">
            <summary>
            QueryPropositionManager Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.QueryPropositionManagerClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.QueryPropositionManagerClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">Authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.QueryPropositionManagerClient.GetQuerySuggestions(System.String,System.Int32)">
            <summary>
            Return Query suggestions based on request parameters.
            </summary>
            <param name="searchText">Query text</param>
            <param name="maxCount">Maximum number of query completions requested</param>
            <returns>Query suggestions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="!:ArgumentNullException">null request object passed to the function</exception>
            <exception cref="!:ArgumentException">One or more properties of the request object are null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="!:NotSupportedException">GetQuerySuggestions Not Supported Exception</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.QueryPropositionManagerClient.GetQuerySuggestions(Ektron.Cms.Search.QuerySuggestionRequest)">
            <summary>
            Return Query suggestions based on request parameters.
            </summary>
            <param name="searchText">Query text</param>
            <param name="maxCount">Maximum number of query completions requested</param>
            <param name="request">QuerySuggestionRequest parameters</param>
            <returns>Query suggestions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="!:ArgumentNullException">null request object passed to the function</exception>
            <exception cref="!:ArgumentException">One or more properties of the request object are null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="!:NotSupportedException">GetQuerySuggestions Not Supported Exception</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.QueryPropositionManagerClient.GetQueryCompletions(Ektron.Cms.Search.QueryCompletionRequest)">
            <summary>
            Return Query completions based on query completion request parameters.
            </summary>
            <param name="request">Query completion request parameters</param>
            <returns>Query completions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="!:ArgumentNullException">null request object passed to the function</exception>
            <exception cref="!:ArgumentException">One or more properties of the request object are null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="!:NotSupportedException">GetQueryCompletions Not Supported Exception</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.QueryPropositionManagerClient.GetQueryCompletions(System.String,System.Int32)">
            <summary>
            Return Query completions based on query completion request parameters.
            </summary>
            <param name="searchText">Query text</param>
            <param name="maxCount">Maximum number of query completions requested</param>
            <returns>Query completions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="!:ArgumentException">searchText parameter is null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="!:NotSupportedException">GetQueryCompletions Not Supported Exception</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.QueryPropositionManagerClient.GetQueryCompletions(System.String,System.Int32,Ektron.Cms.Search.QueryCompletionSortOrder)">
            <summary>
            Return Query completions based on query completion request parameters.
            </summary>
            <param name="searchText">Query text</param>
            <param name="maxCount">Maximum number of query completions requested</param>
            <param name="sortOrder">Order in which to return query completions</param>
            <returns>Query completions</returns>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">Search settings for this site could not be found</exception>
            <exception cref="!:ArgumentException">searchText parameter is null/empty</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
            <exception cref="!:NotSupportedException">GetQueryCompletions Not Supported Exception</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Authoring.StyleServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Authoring.StyleServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Authoring.StyleServiceClient.Add(Ektron.Cms.Settings.Authoring.StyleData)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Authoring.StyleServiceClient.Update(Ektron.Cms.Settings.Authoring.StyleData)">
            <summary>
            
            </summary>
            <param name="ctaData"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Authoring.StyleServiceClient.Delete(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Authoring.StyleServiceClient.GetItem(System.Int64)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Authoring.StyleServiceClient.GetList(Ektron.Cms.Settings.Authoring.StyleCriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.CustomPropertyObjectServiceClient">
            <summary>
             Custom Property Object Service Client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyObjectServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyObjectServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token for security.
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyObjectServiceClient.Add(Ektron.Cms.Common.CustomPropertyObjectData)">
            <summary>
            Adds a new CustomPropertyObject, with details from the supplied CustomPropertyObjectData object.
            </summary>
            <param name="CustomPropertyObjectData"></param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyObjectServiceClient.Update(Ektron.Cms.Common.CustomPropertyObjectData)">
            <summary>
            Updates a CustomPropertyObject, with details from the supplied CustomPropertyObjectData object.
            </summary>
            <param name="CustomPropertyObjectData"></param>
            <returns>Returns the CustomPropertyObjectData updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyObjectServiceClient.Delete(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,System.Int64)">
            <summary>
            Deletes a CustomPropertyObject.
            </summary>
            <param name="objectId">Object Id</param>
            <param name="languageId">Language Id</param>
            <param name="cmsObjectType">Object Type</param>
            <param name="propertyId">Property Id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyObjectServiceClient.GetItem(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,System.Int64)">
            <summary>
            Returns details of a CustomPropertyObjectData
            </summary>
            <param name="objectId">Object Id</param>
            <param name="languageId">Language Id</param>
            <param name="cmsObjectType">Object Type</param>
            <param name="propertyId">Property Id</param>
            <returns>Details of CustomPropertyObjectData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyObjectServiceClient.GetList(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of CustomPropertyObjectData that fit the supplied criteria.
            </summary>
            <param name="objectId">Object Id</param>
            <param name="languageId">Language Id</param>
            <param name="cmsObjectType">Object Type</param>
            <param name="paging">Paging Info</param>
            <returns>a list of CustomPropertyObjectData</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.DxH.DxHConnectionServiceClient">
            <summary>
            IDxHConnectionData Service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHConnectionServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHConnectionServiceClient.Add(Ektron.Cms.Settings.DxH.DxHConnectionData)">
            <summary>
             Adds a new DxHConnectionData, with details from the supplied DxHConnectionData object.
            </summary>
            <param name="DxHConnectionData"></param>
            <returns>Returns the DxHConnectionData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHConnectionServiceClient.Update(Ektron.Cms.Settings.DxH.DxHConnectionData)">
            <summary>
            Updates a DxHConnectionData, with details from the supplied DxHConnectionData object.
            </summary>
            <param name="DxHConnectionData"></param>
            <returns>Returns the DxHConnectionData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHConnectionServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing DxHConnectionData.
            </summary>
            <param name="id">The ID of the DxHConnectionData to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHConnectionServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a DxHConnectionData.
            </summary>
            <param name="id">the identifier of the DxHConnectionData to get</param>
            <returns>DxHConnectionData details in a DxHConnectionData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHConnectionServiceClient.GetList(Ektron.Cms.Settings.DxH.DxHConnectionCriteria)">
            <summary>
            Returns a list of DxHConnectionData that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the DxHConnectionData to return</param>
            <returns>a list of DxHConnectionDatas</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient">
            <summary>
            IDxhMappingData Service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.Add(Ektron.Cms.Settings.DxH.DxHMappingData)">
            <summary>
             Adds a new DxhMappingData, with details from the supplied DxhMappingData object.
            </summary>
            <param name="DxhMappingData"></param>
            <returns>Returns the DxhMappingData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.Update(Ektron.Cms.Settings.DxH.DxHMappingData)">
            <summary>
            Updates a DxhMappingData, with details from the supplied DxhMappingData object.
            </summary>
            <param name="DxhMappingData"></param>
            <returns>Returns the DxhMappingData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing DxhMappingData.
            </summary>
            <param name="id">The ID of the DxhMappingData to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a DxhMappingData.
            </summary>
            <param name="id">the identifier of the DxhMappingData to get</param>
            <returns>DxhMappingData details in a DxhMappingData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.GetList(Ektron.Cms.Settings.DxH.DxHMappingCriteria)">
            <summary>
            Returns a list of DxhMappingData that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the DxhMappingData to return</param>
            <returns>a list of DxhMappingDatas</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.SaveCmsMappings(Ektron.Cms.Settings.DxH.DxHCmsMappingData)">
            <summary>
            Saves a new DxhCmsMappingData, with details from the supplied DxhCmsMappingData object.
            </summary>
            <param name="DxhCmsMappingData"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.DeleteCmsMappings(Ektron.Cms.Settings.DxH.DxHCmsMappingData)">
            <summary>
            Deletes a new DxhCmsMappingData, with details from the supplied DxhCmsMappingData object.
            </summary>
            <param name="DxhCmsMappingData"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.GetCmsMappingList(System.Int64)">
            <summary>
            Get the list of DxhCmsMappingData based on the mappingId
            </summary>
            <param name="mapId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHMappingServiceClient.GetCmsMappingList(Ektron.Cms.Settings.DxH.DxHCmsMappingCriteria)">
            <summary>
             Get the list of DxhCmsMappingData based on the supplied criteria.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.DxH.DxHUserConnectionServiceClient">
            <summary>
            DxHUserConnectionData Service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHUserConnectionServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHUserConnectionServiceClient.Add(Ektron.Cms.Settings.DxH.DxHUserConnectionData)">
            <summary>
             Adds a new DxHUserConnectionData, with details from the supplied DxHUserConnectionData object.
            </summary>
            <param name="dxhUserConnectionData"></param>      
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHUserConnectionServiceClient.Update(Ektron.Cms.Settings.DxH.DxHUserConnectionData)">
            <summary>
            Updates a DxHUserConnectionData, with details from the supplied DxHUserConnectionData object.
            </summary>
            <param name="dxhUserConnectionData"></param>       
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHUserConnectionServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing DxHUserConnectionData.
            </summary>
            <param name="id">The ID of the DxHUserConnectionData to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHUserConnectionServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a DxHUserConnectionData.
            </summary>
            <param name="id">the identifier of the DxHUserConnectionData to get</param>
            <returns>DxHUserConnectionData details in a DxHUserConnectionData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.DxH.DxHUserConnectionServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Settings.DxH.DxHUserConnectionProperty})">
            <summary>
            Returns a list of DxHUserConnectionData that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the DxHUserConnectionData to return</param>
            <returns>a list of DxHUserConnectionDatas</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient">
            <summary>
            Manual Alias service client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token for security.
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient.Add(Ektron.Cms.Common.UrlAliasManualData)">
            <summary>
             Adds a new UrlAlias, with details from the supplied UrlAliasManualData object.
            </summary>
            <param name="data"></param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient.Update(Ektron.Cms.Common.UrlAliasManualData)">
            <summary>
            Updates an existing UrlAliasManualData 
            </summary>
            <param name="data">UrlAliasManualData  data</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing ManualAlias
            </summary>
            <param name="id">Unique ID of the ManualAlias</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient.GetItem(System.Int64)">
            <summary>
            Get ManualAlias data by ID
            </summary>
            <param name="id">Unique ID of the ManualAlias</param>
            <returns>Locale data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient.GetList(Ektron.Cms.UrlAliasing.ManualAliasCriteria)">
            <summary>
            Gets a list of UrlAliasManualData given criteria
            </summary>
            <param name="criteria">Criteria defining which UrlAliasManualData to get</param>
            <returns>List of UrlAliasManualData data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient.GetDefaultAlias(System.Int64)">
            <summary>
            Returns details of a UrlAlias.
            </summary>
            <param name="id">the identifier of the UrlAlias to get</param>
            <returns>UrlAliasManualData details in a UrlAliasManualData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.ManualAliasServiceClient.ClearCache">
            <summary>
            Clears the Alias Cache
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient">
            <summary>
             Web Calendar model service Client for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication Token for security. 
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.Add(Ektron.Cms.Common.Calendar.WebCalendarData)">
            <summary>
             Saves the current calendar as a new calendar.
            </summary>
            <param name="calendar">WebCalendarData object to add.</param>
            <returns>Returns the WebCalendarData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.Add(Ektron.Cms.Common.Calendar.WebCalendarData,Ektron.Cms.Common.EkEnumeration.WorkSpace,System.Int64)">
            <summary>
            Saves the current calendar as a new calendar.
            </summary>
            <param name="calendar">WebCalendarData</param>
            <param name="Type">Type</param>
            <param name="ownerId">ownerId</param>
            <returns>Returns the WebCalendarData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.Delete(System.Int64)">
            <summary>
            Deletes the current calendar.
            </summary>
            <param name="id">The ID of the calendar to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.GetCalendar(System.Int64)">
            <summary>
            Retrieves a calendar.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve.</param>
            <returns>WebCalendarData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a calendar
            </summary>
            <param name="calendarId">id of the calendar to retrieve.</param>
            <returns>WebCalendarData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.GetList(Ektron.Cms.Common.Calendar.WebCalendarCriteria)">
            <summary>
            Retrieves a list of WebCalendar Data based on criteria
            </summary>
            <param name="criteria">the criteria object that will be used for selecting calendars</param>
            <returns>a list of WebCalendarData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.GetICalendarFeed(Ektron.Cms.Common.Calendar.WebCalendarData)">
            <summary>
            Returns the ICalendar representation of the supplied calendar Id.
            </summary>
            <param name="calendar">Web Calendar Data object</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.GetICalendarFeed(System.Int64)">
            <summary>
            Returns the ICalendar representation of the supplied calendar Id.
            </summary>
            <param name="calendarId">Id of calendar to retrieve ICalendar feed for.</param>
            <returns>string containing a calendar feed</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.GetPublicCalendar(Ektron.Cms.Common.EkEnumeration.WorkSpace,System.Int64)">
            <summary>
            Returns the web data calendar of the suplied Owner information
            </summary>
            <param name="ownerType">Owner type of the calendar</param>
            <param name="ownerId">Owner Id of the calendar</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.GetPublicCalendar(System.Int64)">
            <summary>
            Retrieves a calendar with only public fields populated.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve.</param>
            <returns>WebCalendarData with only public fields populated.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebCalendarServiceClient.Update(Ektron.Cms.Common.Calendar.WebCalendarData)">
            <summary>
            Saves this calendar.
            </summary>
            <param name="calendar">WebCalendarData object to update.</param>
            <returns>Returns the WebCalendarData object updated</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient">
            <summary>
            Class WebEventServiceClient.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.#ctor">
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Autentication Token for security.
            </summary>
            <param name="authenticationToken">WebEventServiceClient.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.Add(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            Adds a new WebEvent object to Cms. The WebEvent.Id property will be populated with the new WebEvent's Id.
            </summary>
            <param name="eventData">WebEventData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.Add(Ektron.Cms.Common.Calendar.WebEventData,System.String)">
            <summary>
            Adds a new WebEvent object to Cms. The WebEvent.Id property will be populated with the new WebEvent's Id.
            </summary>
            <param name="eventData">WebEventData object to add.</param>
            <param name="MetaXml">MetaXml string to add</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.Update(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            Updates a webevent
            </summary>
            <param name="eventData">WebEventData object to update</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.Update(Ektron.Cms.Common.Calendar.WebEventData,System.String)">
            <summary>
            Updates an existing WebEventData object in Cms.
            </summary>
            <param name="eventData">WebEventData object to update</param>
            <param name="MetaXml">MetaXml string to update</param>
            <returns>Returns the WebEventData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.AddAdditionalEventData(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            Adding An Additional WebEventData object in Cms, When copying event.
            </summary>
            <param name="eventData"></param>
            <returns>Returns the WebEventData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.CancelOccurrence(System.Int64,System.DateTime)">
            <summary>
            Cancels an occurence of a recurring event.
            </summary>
            <param name="eventId">Id of the recurring event to cancel an occurrence for.</param>
            <param name="occurrenceStartUtc">The event occurance date to cancel.</param>
            <returns>Id of the event variance created for the cancellation.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.CreateVariance(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a variance event for the supplied recurring event id.
            </summary>
            <param name="eventId">Id of the recurring event to create variance for.</param>
            <param name="occurrenceStartUtc">The event occurance date for which to create a variance.</param>
            <param name="newStartUtc">The new occureance start date (UTC).</param>
            <returns>An unsaved WebEvent representing the event variance/</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.CreateVariance(System.Int64,System.DateTime)">
            <summary>
            Creates a new variance
            </summary>
            <param name="eventId">event id</param>
            <param name="occurrenceStartUtc">ocurren Start date time in utc format</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a WebEvent from the Cms.
            </summary>
            <param name="eventId">Id of WebEvent to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetItem(System.Int64)">
            <summary>
            Gets the fully populated EventData object for the supplied eventId.
            </summary>
            <param name="eventId">Id of the event to retrieve.</param>
            <returns>Retrieved WebEventData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetItem(System.Int64,System.Int32)">
            <summary>
            Gets the fully populated EventData object for the supplied eventId.
            </summary>
            <param name="eventId">Id of the event to retrieve.</param>
            <param name="languageId">Language Id of the event to retrieve</param>
            <returns>Retrieved WebEventData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetItem(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Gets the fully populated EventData object for the supplied eventId.
            </summary>
            <param name="eventId">Id of the event to retrieve.</param>
            <param name="languageId">Language Id of the event to retrieve</param>
            <param name="preview">preview</param>
            <returns>Retrieved WebEventData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetCalendarICalendarString(System.Int64)">
            <summary>
            gets the feed for the entire calendar, properly wrapped with ical standards.
            </summary>
            <param name="calendarid"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetEventICalendarString(System.Int64)">
            <summary>
            returns the event details in icalendar format, without the surrounding vcalendar information.
            if the specified event is a variance, returns details for the parent event with all variances.
            </summary>
            <param name="eventid">event id </param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetEventICalendarString(System.Int64,System.Boolean)">
            <summary>
            returns the event details, with optional wrapping of vcalendar information required by the ical format. 
            if the specified event is a variance, returns details for the parent event with all variances.
            </summary>
            <param name="eventid"></param>
            <param name="wrap"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetEventICalendarString(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            returns the event details in icalendar format, without the surrounding vcalendar information.
            </summary>
            <param name="eventData"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetEventICalendarString(Ektron.Cms.Common.Calendar.WebEventData,System.Boolean)">
            <summary>
            returns the event details, with optional wrapping of vcalendar information required by the ical format.
            </summary>
            <param name="eventData"></param>
            <param name="wrap"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetEventICalendarString(Ektron.Cms.Common.Calendar.WebEventData,System.Collections.Generic.List{Ektron.Cms.Common.Calendar.WebEventData})">
            <summary>
            returns the icalendar string with any variances specified by the second parameter. this will not wrap the resulting string with required icalendar fields.
            </summary>
            <param name="eventData"></param>
            <param name="variances"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetList(Ektron.Cms.EventTaxonomyCriteria)">
            <summary>
            Get a list of WebEventCalendar data by EventTaxonomy Criteria
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetList(Ektron.Cms.Common.WebEventCriteria)">
            <summary>
             Returns a list of WebEvents based upon the supplied criteria.
             </summary>
             <param name="criteria">criteria used to restrict WebEvent retrieval.</param>
             <returns></returns>
             <remarks>Retrieved list of WebEventData objects</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetList(System.Int64)">
            <summary>
            Returns list of eventdata items for the calendar.  This will only return the actual event items and not the occurances of the event.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns list of eventdata items for the calendar.  This will only return the actual event items and not the occurances of the event.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetList(System.Int64,System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns list of eventdata items for the calendar.  This will only return the actual event items and not the occurances of the event.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <param name="TaxonomyIds">list of taxonomy idxs</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetList(System.Int64,System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Int32)">
            <summary>
            Returns list of eventdata items for the calendar.  This will only return the actual event items and not the occurances of the event.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <param name="TaxonomyIds">list of taxonomy ids</param>
            <param name="LangID">language of the events to retrieve.</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetEventOccurrenceList(System.Int64,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Returns a list of events for the calendar that occur during the supplied time period.  This will return all event occurrences 
            including individual occurrences for recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of search span</param>
            <param name="endUtc">end of search span</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>
            EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetEventOccurrenceList(Ektron.Cms.Common.WebEventCriteria)">
            <summary>
            Returns a list of events for the calendar that occur during the supplied time period.  This will return all event occurrences 
            including individual occurrences for recurring events.
            </summary>
            <param name="criteria">criteria to filter by</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>
            EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary. Ignores Paging.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetEventOccurrenceList(Ektron.Cms.EventTaxonomyCriteria)">
            <summary>
            Returns a list of events for the calendar that occur during the supplied time period.  This will return all event occurrences 
            including individual occurrences for recurring events.
            </summary>
            <param name="criteria">criteria to filter by</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>
            EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary. Ignores Paging.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetEventOccurrenceList(System.Int64,System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Returns a list of events for the calendar that occur during the supplied time period.  This will return all event occurrences 
            including individual occurrences for recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of search span</param>
            <param name="endUtc">end of search span</param>
            <param name="TaxonomyIds">List of taxonomies ids</param>
            <returns>Retrieved list of WebEventData objects</returns>
            <remarks>
            EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetNonVariantEventList(System.Int64)">
            <summary>
            Returns list of original eventdata items for the calendar.  For recurring events, this will only return the actual event items and not the occurrences or variants of recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <returns>Retrieved list of WebEventData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetNonVariantEventList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns list of original eventdata items for the calendar.  For recurring events, this will only return the actual event items and not the occurrences or variants of recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <returns>A list of webevent data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetVarianceEventList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns an EventVarianceDictionary containing all the variances for the supplied calendar in the given time frame.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <returns>Retrieved WebEventVarianceDictionary object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Calendar.WebEventServiceClient.GetVarianceEventList(System.Int64)">
            <summary>
            Returns an EventVarianceDictionary containing all the variances for the supplied calendar in the given time frame.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <returns>Retrieved WebEventVarianceDictionary object</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient">
            <summary>
            Community Group Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.Add(Ektron.Cms.CommunityGroupData)">
            <summary>
            Adds a new CommunityGroup, with details from the supplied CommunityGroupData object.
            </summary>
            <param name="communityGroupData">The CommunityGroupData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.Update(Ektron.Cms.CommunityGroupData)">
            <summary>
             Updates a CommunityGroup, with details from the supplied CommunityGroupData object.
            </summary>
            <param name="communityGroupData">The CommunityGroupData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing CommunityGroup.
            </summary>
            <param name="id">the identifier of the CommunityGroup to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a CommunityGroup.
            </summary>
            <param name="id">the identifier of the CommunityGroup to get</param>
            <returns>CommunityGroup details in a CommunityGroupData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetList(Ektron.Cms.Community.CommunityGroupCriteria)">
            <summary>
            Returns a list of CommunityGroups that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the CommunityGroups to return</param>
            <returns>a list of CommunityGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetList(Ektron.Cms.Community.UserToCommunityGroupCriteria)">
            <summary>
            Returns a list of CommunityGroups that fit the supplied criteria, which in this case can have be all the groups given a supplied user id.
            </summary>
            <param name="criteria">used to specify, or filter, the CommunityGroups to return</param>
            <returns>a list of CommunityGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetUserList(System.Int64)">
            <summary>
             Returns a list of DirectoryUsers that fit the communityGroupId.
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns>a list of DirectoryUsers</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.IsUserInGroup(System.Int64,System.Int64)">
            <summary>
            Determines if the user is in the group
            </summary>
            <param name="userId">the identifier of the user</param>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetBlogId(System.Int64)">
            <summary>
            Gets the blog id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetFolderId(System.Int64)">
            <summary>
            Gets the folder id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetCalendarId(System.Int64)">
            <summary>
            Gets the calendar id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetDiscussionBoardId(System.Int64)">
            <summary>
            Gets the discussionBoard id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetTaxonomyId(System.Int64)">
            <summary>
            Gets the taxonomy id of the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the CommunityGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.AddUser(System.Int64,System.Int64)">
            <summary>
            Adds a user to a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.RemoveUser(System.Int64,System.Int64)">
            <summary>
            Removes a user to a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetMemberStatus(System.Int64,System.Int64)">
            <summary>
            Gets the member status of the user in the communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.Invite(System.Int64,System.Int64)">
            <summary>
            Invites a user to a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.Invite(System.Int64,System.String)">
            <summary>
            Invites a email to a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="email">the email of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.RequestJoin(System.Int64,System.Int64)">
            <summary>
            Requests a join to a user
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.AcceptInvite(System.Int64,System.Int64)">
            <summary>
            Accepts an invitation of a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.DeclineInvite(System.Int64,System.Int64)">
            <summary>
            Declines an invitation of a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.GetAdminList(System.Int64)">
            <summary>
            Get the list of admin users for a communityGroup
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.ApproveJoin(System.Int64,System.Int64)">
            <summary>
            Accepts a user join request for community group
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.CommunityGroupServiceClient.DeclineJoin(System.Int64,System.Int64)">
            <summary>
            Decline a user join request for community group
            </summary>
            <param name="communityGroupId">the identifier of the communityGroup</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.FavoritesServiceClient">
            <summary>
            Favorites Service Manager client service class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoritesServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoritesServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoritesServiceClient.Add(Ektron.Cms.Community.FavoriteItemData)">
            <summary>
            Adds a new Favorite, with details from the supplied FavoriteItemData object.
            </summary>
            <param name="favoriteItemData">The FavoriteItemData to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoritesServiceClient.Update(Ektron.Cms.Community.FavoriteItemData)">
            <summary>
            Updates a Favorite, with details from the supplied FavoriteItemData object.
            </summary>
            <param name="favoriteItemData">The FavoriteItemData to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoritesServiceClient.Delete(System.Int64,Ektron.Cms.Common.FavoriteType)">
            <summary>
            Deletes an existing Favorite.
            </summary>
            <param name="id">the identifier of the Favorite to delete</param>
            <param name="type">favorite type</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoritesServiceClient.GetItem(System.Int64,Ektron.Cms.Common.FavoriteType)">
            <summary>
            Gets a FavoriteItemData object by ID
            </summary>
            <param name="id">The identifier of the Favorite to get</param>
            <param name="type">favorite type</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FavoritesServiceClient.GetList(Ektron.Cms.Community.FavoriteItemCriteria)">
            <summary>
            Gets a list of FavoriteItemData by Criteria
            </summary>
            <param name="criteria">Criteria utilized to retrieve objects</param>
            <returns>a list of FavoriteItemData</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.FriendsServiceClient">
            <summary>
            Friends Manager Service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.Add(Ektron.Cms.Community.FriendsData)">
            <summary>
            Adds a new friend. 
            </summary>
            <param name="friendsData">The FriendsData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.Update(Ektron.Cms.Community.FriendsData)">
            <summary>
            Updates an existing friends in the CMS.
            </summary>
            <param name="friendsData">The FriendsData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a friends in the CMS for the currently logged in user.
            </summary>
            <param name="friendId">The ID of the friend to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.Delete(System.Int64,System.Int64)">
            <summary>
            Deletes a friend in the CMS for the supplied user.
            </summary>
            <param name="friendId">The ID of the friend to delete.</param>
            <param name="userId">Id of user deleting friend.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single FriendsData object from the CMS.
            </summary>
            <param name="friendId">The ID of the user's friend to retrieve.</param>
            <returns>The FriendsData object retrieved</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.GetItem(System.Int64,System.Int64)">
            <summary>
            Retrieves a single FriendsData object from the CMS.
            </summary>
            <param name="friendId">The ID of the user's friend to retrieve.</param>
            <param name="userId">The ID of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.GetList(Ektron.Cms.Community.FriendsCriteria)">
            <summary>
            Retrieves a list of FriendsData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve friends.</param>
            <returns>A list of FriendsData object based on criteria</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.Invite(System.Int64,System.String,System.String)">
            <summary>
            Invites a friend in the CMS.
            </summary>
            <param name="friendId">Friend Id</param>
            <param name="subject">Invitation Subject</param>
            <param name="message">Invitation Message</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.Invite(Ektron.Cms.Common.InvitationSendRequestData)">
            <summary>
            Invites a friend in the CMS.
            </summary>
            <param name="invitationSendRequestData">invitationSendRequestData</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.AcceptInvite(Ektron.Cms.Community.PendingFriendsData)">
            <summary>
             Accepts an friend's invitation.
             </summary>
             <param name="pendingFriendData">Invitation's details</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.DeclineInvite(Ektron.Cms.Community.PendingFriendsData)">
            <summary>
            Declines an friend invitation.
            </summary>
            <param name="pendingFriendData">Invitation details</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.GetPendingList(System.Int64)">
            <summary>
            Retrieves a list of PendingFriendsData objects with pending state.
            </summary>
            <param name="userId">userId used to retrieve friends.</param>
            <returns>A list of PendingFriendsData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.GetInvitedList(System.Int64)">
            <summary>
            Retrieves a list of PendingFriendsData objects with invited state.
            </summary>
            <param name="userId">userId used to retrieve friends.</param>
            <returns>A list of PendingFriendsData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.FriendsServiceClient.IsFriend(System.Int64)">
            <summary>
            Check the user is friend to the currently logged in user or not.
            </summary>
            <param name="friendId">Friend UserId</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient">
            <summary>
            Micro Message Service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication Token.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.MicroMessageProperty})">
            <summary>
            Gets data from the database using the criteria object.
            </summary>
            <param name="criteria">Criteria used to filter results.</param>
            <returns>Returns a list of MicroMessageData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.GetUserMessageList(Ektron.Cms.PagingInfo,System.Int64)">
            <summary>
            Gets a list of messages that the user has sent.
            </summary>
            <param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
            <param name="userID">The user ID </param>
            <returns>Returns a list of user messages.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.GetTimeLineMessageList(Ektron.Cms.PagingInfo,System.Int64)">
            <summary>
            Gets a filtered list of messages that the requesting user can see. The list includes public and colleagues messages.
            </summary>
            <param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
            <param name="callerUserID">The user ID of the member requesting data.</param>
            <returns>Returns a list of for the user messages.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.GetColleagueMessageList(Ektron.Cms.PagingInfo,System.Int64)">
            <summary>
            Gets a list of only colleagues Messages.
            </summary>
            <param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
            <param name="callerUserID">The user ID of the member requesting data.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.GetItem(System.Int64)">
            <summary>
            Gets a single record from the database.
            </summary>
            <param name="id">The id of the message.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.Add(Ektron.Cms.MicroMessageData)">
            <summary>
            Adds a new message.
            </summary>
            <param name="data">The micro message data.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a record from the database.
            </summary>
            <param name="Id">The id of the message to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.GetReplyList(System.Int64)">
            <summary>
            Gets a list of replies for a Message.
            </summary>
            <param name="parentMessageId">The id of the message that has replies.</param>
            <returns>Returns a list of replies for the message. </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.AddReply(System.Int64,System.String)">
            <summary>
            Adds a new reply. 
            </summary>
            <param name="parentMessageId">The id of the message to add a reply to.</param>
            <param name="messageText">The text of the reply</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.IsSpam(Ektron.Cms.Common.EkEnumeration.MicroMessageSpamControlType,System.Int32,Ektron.Cms.MicroMessageData)">
            <summary>
            Check if data is spam
            </summary>
            <param name="spamControlType"></param>
            <param name="SpamTimeSpan"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.GetSearchList(Ektron.Cms.PagingInfo,System.String)">
            <summary>
            Gets the search results for test search.
            </summary>
            <param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
            <param name="searchText">The searchText to search</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.MicromessageServiceClient.IsFullTextSearchInstalled">
            <summary>
            Checks if full text search is installed on the database.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.PrivateMessageServiceClient">
            <summary>
            Private Message Service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.PrivateMessageServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.PrivateMessageServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authenticacion Token.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.PrivateMessageServiceClient.Send(Ektron.Cms.PrivateMessageData)">
            <summary>
            Sends a new message based on information in an PrivateMessageData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="privateMessageData">The PrivateMessageData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.PrivateMessageServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a message in the CMS.
            </summary>
            <param name="id">The ID of the message to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.PrivateMessageServiceClient.MarkRead(System.Int64)">
            <summary>
            Marks the supplied message as read for the currently logged in user.  This method will not work in ApiAccessMode.Admin.  A user is in charge of their own private messages.
            </summary>
            <param name="messageId">Id of Message to mark as read.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.PrivateMessageServiceClient.MarkUnread(System.Int64)">
            <summary>
            Marks the supplied message as unread for the currently logged in user.  This method will not work in ApiAccessMode.Admin.  A user is in charge of their own private messages.
            </summary>
            <param name="messageId">Id of Message to mark as read.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.PrivateMessageServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single PrivateMessageData object from the CMS.
            </summary>
            <param name="id">The ID of the message to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.PrivateMessageServiceClient.GetList(Ektron.Cms.Community.PrivateMessageCriteria)">
            <summary>
            Retrieves a list of PrivateMessageData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve messages.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.TagServiceClient">
            <summary>
            Tag Service Client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.Add(Ektron.Cms.TagData)">
            <summary>
            Adds a new tag based on information in a TagData object. 
            tag.Id will be populated with the newly created ID.
            </summary>
            <param name="tagData">The TagData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.Update(Ektron.Cms.TagData)">
            <summary>
            Updates an existing tag in the CMS.
            </summary>
            <param name="tagData">The TagData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a tag from the CMS.
            </summary>
            <param name="id">The ID of the tag to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single TagData object from the CMS.
            </summary>
            <param name="id">Tag's id to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.GetList(Ektron.Cms.Community.TagCriteria)">
            <summary>
            Retrieves a list of TagData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve tags.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.TagObject(System.String,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
            Tags a content with the given details.
            </summary>
            <param name="tag">The string that contains the tag text</param>
            <param name="ObjectId">The Object Id to be tagged</param>
            <param name="objectType">The Object Type to be tagged</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.GetTagCloud(Ektron.Cms.Community.TagCloudRequestData,System.Int32@)">
            <summary>
            Returns a TagCloud based upon the request.
            </summary>
            <param name="request">contains the parameters for the tagcloud to retrieve.</param>
            <param name="totalRecords">Returns the total number of tags available in the requested cloud.</param>
            <returns>A TagCloud object representing the request.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TagServiceClient.GetTags(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
            <summary>
            Get Tags by Object Id.
            </summary>
            <param name="objectId">long</param>
            <param name="objectType">CMSObjectTypes</param>
            <returns>List of Tags data</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.TodoItemCommentServiceClient">
            <summary>
            To do Item Comment Service Client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemCommentServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemCommentServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication Token.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemCommentServiceClient.Add(Ektron.Cms.ToDo.TodoItemCommentData)">
            <summary>
            Adds a new TodoItemComment.
            </summary>
            <param name="todoItemComment">TodoItemComment to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemCommentServiceClient.Update(Ektron.Cms.ToDo.TodoItemCommentData)">
            <summary>
            Updates a TodoItemComment.
            </summary>
            <param name="todoItemComment">TodoItemComment to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemCommentServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a TodoItemComment by its ID.
            </summary>
            <param name="id">ID of the TodoItemComment to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemCommentServiceClient.GetItem(System.Int64)">
            <summary>
            Gets a TodoItemComment by its ID.
            </summary>
            <param name="id">ID of the TodoItemComment to get.</param>
            <returns>Instance of requested TodoItemComment.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemCommentServiceClient.GetList(Ektron.Cms.ToDo.TodoItemCommentCriteria)">
            <summary>
            Gets a list of TodoItemComments filtered by the given criteria.
            </summary>
            <param name="criteria">Criteria with which to filter the TodoItemComments.</param>
            <returns>A list of TodoItemComments filtered using the criteria parameter.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.TodoItemServiceClient">
            <summary>
            To do Item service client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemServiceClient.#ctor">
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token.
            </summary>
            <param name="authenticationToken">AuthenticationToken</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemServiceClient.Add(Ektron.Cms.ToDo.TodoItemData)">
            <summary>
            Adds a new TodoItem.
            </summary>
            <param name="todoItem">TodoItem to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemServiceClient.Update(Ektron.Cms.ToDo.TodoItemData)">
            <summary>
            Updates a TodoItem.
            </summary>
            <param name="todoItem">TodoItem to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a TodoItem by its ID.
            </summary>
            <param name="id">ID of the TodoItem to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemServiceClient.GetItem(System.Int64)">
            <summary>
            Gets a TodoItem by its ID.
            </summary>
            <param name="id">ID of the TodoItem to get.</param>
            <returns>Instance of requested TodoItem.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoItemServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.ToDo.TodoItemProperty})">
            <summary>
            Gets a list of TodoItems filtered by the given criteria.
            </summary>
            <param name="criteria">Criteria with which to filter the TodoItems.</param>
            <returns>A list of TodoItems filtered using the criteria parameter.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Community.TodoListServiceClient">
            <summary>
            To do List Service client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoListServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoListServiceClient.#ctor(System.String)">
            <summary>
            Constructor with AuthenticationToken.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoListServiceClient.Add(Ektron.Cms.ToDo.TodoListData)">
            <summary>
            Adds a new TodoList.
            </summary>
            <param name="todoItem">TodoList to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoListServiceClient.Update(Ektron.Cms.ToDo.TodoListData)">
            <summary>
            Updates a TodoList.
            </summary>
            <param name="todoItem">TodoList to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoListServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a TodoList by its ID.
            </summary>
            <param name="id">ID of the TodoList to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoListServiceClient.GetItem(System.Int64)">
            <summary>
            Gets a TodoList by its ID.
            </summary>
            <param name="id">ID of the TodoList to get.</param>
            <returns>Instance of requested TodoList.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Community.TodoListServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.ToDo.TodoListProperty})">
            <summary>
            Gets a list of TodoLists filtered by the given criteria.
            </summary>
            <param name="criteria">Criteria with which to filter the TodoLists.</param>
            <returns>A list of TodoLists filtered using the criteria parameter.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Content.AssetServiceClient">
            <summary>
            Asset Manager client service class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.AssetServiceClient.#ctor">
            <summary>
            Contsructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.AssetServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.AssetServiceClient.Add(Ektron.Cms.Content.ContentAssetData)">
            <summary>
            Adds new content. (This Method is Not Supported on WCF mode.)
            </summary>
            <param name="asset"> The assetData object</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.AssetServiceClient.Update(Ektron.Cms.Content.ContentAssetData)">
            <summary>
            Update content. (This Method is Not Supported on WCF mode.)
            </summary>
            <param name="asset"> The assetData object</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.AssetServiceClient.Delete(System.Int64)">
            <summary>
            Delete content
            </summary>
            <param name="id"> The ID of the content to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.AssetServiceClient.GetItem(System.Int64,System.Boolean)">
            <summary>
            Retrieves a single asset item by ID.
            </summary>
            <param name="id">The ID of the content to retrieve.</param>
            <param name="returnMetadata">return metadata</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.AssetServiceClient.GetList(Ektron.Cms.Content.AssetCriteria)">
            <summary>
            Retrieves a list based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns>List of ContentAssetData objects matching the supplied criteria.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Content.ContentRatingServiceClient">
            <summary>
            Content Rating service client 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentRatingServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentRatingServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authenticationtoken
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentRatingServiceClient.Add(Ektron.Cms.ContentRatingData)">
            <summary>
            Adds new contentRating type
            </summary>
            <param name="contentRating"> The contentRatingTypeData object</param>
            <returns>The custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentRatingServiceClient.Update(Ektron.Cms.ContentRatingData)">
            <summary>
            Update contentRating type
            </summary>
            <param name="contentRating"> The contentRatingtTypeData object</param>
            <returns>The custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentRatingServiceClient.Delete(System.Int64)">
            <summary>
            Delete contentRating type
            </summary>
            <param name="contentRatingId"> The ID of the contentRating type to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentRatingServiceClient.GetItem(System.Int64)">
            <summary>
            Get the contentRating item
            </summary>
            <param name="contentRatingId">The ID of the contentRating type to Get.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentRatingServiceClient.GetList(Ektron.Cms.Content.ContentRatingCriteria)">
            <summary>
            Retrieves a list based on the criteria
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentRatingServiceClient.Purge(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Purges all ratings of a particular content block over a defined date/time range. 
            </summary>
            <param name="contentId">The ID of the content that is having its ratings purged.</param>
            <param name="startDate">The beginning of the date range of content to be purged.</param>
            <param name="endDate">The end of the date range of content to be purged.</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Content.MetadataTypeServiceClient">
            <summary>
            Metadata type service client
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.MetadataTypeServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.MetadataTypeServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication 
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.MetadataTypeServiceClient.Add(Ektron.Cms.ContentMetaData)">
            <summary>
            Adds new metadata type
            </summary>
            <param name="metadataType"> The metadataTypeData object</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.MetadataTypeServiceClient.Update(Ektron.Cms.ContentMetaData)">
            <summary>
            Update metadata type
            </summary>
            <param name="metadataType"> The metadatatTypeData object</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.MetadataTypeServiceClient.Delete(System.Int64)">
            <summary>
            Delete metadata type
            </summary>
            <param name="metadataTypeId"> The ID of the metadata type to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.MetadataTypeServiceClient.GetItem(System.Int64)">
            <summary>
            Get the content item
            </summary>
            <param name="metadataTypeId">The ID of the metadata type to Get.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.MetadataTypeServiceClient.GetList(Ektron.Cms.Content.MetadataTypeCriteria)">
            <summary>
            Retrieves a list based on the criteria
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient">
            <summary>
            Notification Service Client 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication 
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient.Send(Ektron.Cms.Notifications.NotificationMessageData)">
            <summary>
            Sends notifications based upon supplie dnotification message data.
            </summary>
            <param name="notificationMessage">data object defining message to send and the user to send it to.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient.Send(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Sends notifications based upon the supplied activity.
            </summary>
            <param name="activity">The activity that has occured and will result in notifications being sent.  The Activity.Message property is ignored and will be retrieved based upon CMS message settings.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient.ProcessActivityReply(System.Guid,System.String,System.String)">
            <summary>
            ProcessActivityReply
            </summary>
            <param name="activityGuid">activityGuid</param>
            <param name="reply">reply</param>
            <param name="fromEmail">fromEmail</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient.ProcessActivityReply(System.Guid,System.String,System.String,System.Byte[],System.String)">
            <summary>
            Process Activity Reply
            </summary>
            <param name="activityGuid">activityGuid</param>
            <param name="reply">reply</param>
            <param name="fromEmail">fromEmail</param>
            <param name="document">document</param>
            <param name="documentName">documentName</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient.ProcessGroupEmail(System.Int64,System.String,System.String)">
            <summary>
            ProcessGroupEmail
            </summary>
            <param name="communityGroupId">communityGroupId</param>
            <param name="message">message</param>
            <param name="fromEmail">fromEmail</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient.ProcessGroupEmail(System.Int64,System.String,System.String,System.Byte[],System.String)">
            <summary>
            Process Group Email
            </summary>
            <param name="communityGroupId">communityGroupId</param>
            <param name="message">message</param>
            <param name="fromEmail">fromEmail</param>
            <param name="document">document</param>
            <param name="documentName">documentName</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Services.Notifications.NotificationServiceClient.IsNotificationReplyMessagePrepended">
            <summary>
            Gets or sets a boolean flag indicating wheather a reply message needs to be preprended
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient">
            <summary>
            Collection Service Client 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.Add(Ektron.Cms.Organization.ContentCollectionData)">
            <summary>
            Adds a new content collection based on information in an ContentCollectionData object. 
            message.
            </summary>
            <param name="contentCollectionData">The ContentCollectionData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.Update(Ektron.Cms.Organization.ContentCollectionData)">
            <summary>
            Updates an existing content collection in the CMS.
            </summary>
            <param name="contentCollectionData">The ContentCollectionData object to update.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a content collection in the CMS.
            </summary>
            <param name="id">The ID of the content collection to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single ContentCollectionData object from the CMS.
            </summary>
            <param name="id">The ID of the content collection to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.GetList(Ektron.Cms.CollectionCriteria)">
            <summary>
            Retrieves a list of ContentCollectionData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve content collections.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.AddContent(System.Int64,System.Int64)">
            <summary>
            Adds a content to a collection
            </summary>
            <param name="collectionId">The ID of the content collection</param>
            <param name="contentId">The ID of the content</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.DeleteContent(System.Int64,System.Int64)">
            <summary>
            Deletes a content from a collection
            </summary>
            <param name="collectionId">The ID of the content collection</param>
            <param name="contentId">The ID of the content</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.CollectionServiceClient.UpdateItemOrder(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Updates the contents from a collection
            </summary>
            <param name="collectionId">The ID of the content collection</param>
            <param name="contentIdlist">The IDs of the contents</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Organization.FolderServiceClient">
            <summary>
            Folder Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.AllowTaxonomy(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Allows a taxonomy list to a given folder
            </summary>
            <param name="folderId">folder id</param>
            <param name="taxonomyIdList">list of taxonomy ids</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.GetSitemapPath(System.Int64)">
            <summary>
            Returns the specified sitemappath object for a given folder.  To get sitemappaths in different languages, change the manager's ekRequestInformation Language.
            </summary>
            <param name="folderId">The folder id to retrieve the path for.</param>
            <returns>A list of SitemapPath data objects in order by oderlocation in the database.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.EnableTaxonomy(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Enables a taxonomy list to a given folder
            </summary>
            <param name="folderId">folder id</param>
            <param name="taxonomyIdList">list of taxonomy ids</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.DisableTaxonomy(System.Int64,System.Int64)">
            <summary>
            Disables a taxonomy to a folder
            </summary>
            <param name="folderId">folder id</param>
            <param name="taxonomyId">taxonomy id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.GetAssignedTaxonomy(System.Int64)">
            <summary>
            Gets assigned taxonomies for a folder
            </summary>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.UnallowTaxonomy(System.Int64,System.Int64)">
            <summary>
            Unlinks a taxonomy to a folder
            </summary>
            <param name="folderId">folder id</param>
            <param name="taxonomyId">taxonomy id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.LinkTaxonomy(System.Int64,System.Int64)">
            <summary>
            Link a taxonomy to a folder
            </summary>
            <param name="folderId">folder id</param>
            <param name="taxonomyId">taxonomy id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.UnlinkTaxonomy(System.Int64,System.Int64)">
            <summary>
            Unlink a folder from the taxonomy
            </summary>
            <param name="folderId">folder id</param>
            <param name="taxonomyId">taxonomy id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.UnAssignTemplate(System.Int64,System.Int64)">
            <summary>
            UnAssign the Template for the folder
            </summary>
            <param name="folderId"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.Add(Ektron.Cms.FolderData)">
            <summary>
            Adds a new folder based on information in an FolderData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="folderData">The FolderData object to add.</param>
            <returns>Added FolderData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.Update(Ektron.Cms.FolderData)">
            <summary>
            Updates an existing folder in the CMS.
            </summary>
            <param name="folderData">The FolderData object to update.</param>
            <returns>Updated FolderData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a folder in the CMS.
            </summary>
            <param name="folderId">The ID of the folder to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.GetItem(System.Int64,System.Boolean)">
            <summary>
            Retrieves a single FolderData object from the CMS.
            </summary>
            <param name="folderId">The ID of the folder to retrieve.</param>
            <param name="returnChildProperties">indicates if child properties are returned.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.GetTree(System.Int64)">
            <summary>
             Retrieves the FolderTree for the given Folder ID
            </summary>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.GetList(Ektron.Cms.FolderCriteria)">
            <summary>
            Retrieves a list of FolderData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve folders.</param>
            <returns>List with retrieved FolderData items</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.Ektron#Cms#Organization#IFolderManager#GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.FolderProperty})">
            <summary>
            Gets a list of folder data by the specified criteria
            </summary>
            <param name="criteria">criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.IsCommunityFolder(System.Int64)">
            <summary>
            Returns true if the folder is a Community Folder
            </summary>
            <param name="folderId"></param>
            <returns>True if the folder is a Community Folder </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.AssignMetadata(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Assign a metadataType to a Folder
            </summary>
            <param name="folderId">The ID of the folder</param>
            <param name="metadataTypeId">The ID of the metadata type</param>
            <param name="isRequired">indicates if is required</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.AssignMetadata(System.Int64,System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Assign a metadataType to a Folder
            </summary>
            <param name="folderId">The ID of the folder</param>
            <param name="metadataTypeIds">The list of metadata type id</param>
            <param name="isRequired">indicates if is required</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.UnassignMetadata(System.Int64,System.Int64)">
            <summary>
            Unassign a metadataType to a Folder
            </summary>
            <param name="folderId">The ID of the folder</param>
            <param name="metadataTypeId">The ID of the metadata type</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.GetAssignedMetadata(System.Int64)">
            <summary>
            Returns a list of content metadata assigned to a given folder.
            </summary>
            <param name="folderId">Folder id is to retrieve metadata for</param>
            <returns>List with retrieved content metadata items</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.GetAssignedFolders(System.Int64)">
            <summary>
            Returns a list of folder data assigned to the given taxonomy
            </summary>
            <param name="taxonomyId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.Purge(System.Int64,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Purge the content history values for the folder till the specified date criteria
            </summary>
            <param name="folderId">FolderId in which the content history is purge</param>
            <param name="purgeDate">Till this date the content history will be purged</param>
            <param name="isRecursive">Include the child folder</param>
            <param name="includePublished">Include the published content to purged</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.MoveFolder(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Move the folder from existing parent folder to another parent folder
            </summary>
            <param name="sourceFolderId">Folder Id to be moved</param>
            <param name="destinationFolderId">New Parent folder Id  to move the source folder</param>
            <param name="breakInheritance">Break the existing inheritance</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.FolderServiceClient.CopyFolder(System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
             Copy the folder from one parent folder to another parent folder
            </summary>
            <param name="sourceFolderId">Folder Id to be moved</param>
            <param name="destinationFolderId">New Parent folder Id  to move the source folder</param>
            <param name="breakInheritance">Break the existing inheritance</param>
            <param name="copyItems">Copy the folder with all the items</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Organization.TaxonomyItemServiceClient">
            <summary>
            TaxonomyItem manager class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyItemServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyItemServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyItemServiceClient.Add(Ektron.Cms.TaxonomyItemData)">
            <summary>
            Adds a new taxonomy item.
            </summary>
            <param name="taxonomyItemData">The TaxonomyItemData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyItemServiceClient.Update(Ektron.Cms.TaxonomyItemData)">
            <summary>
            Updates an existing taxonomy item.
            </summary>
            <param name="taxonomyItemData">The TaxonomyItemData object to upate.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyItemServiceClient.Delete(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.TaxonomyItemType)">
            <summary>
             Deletes an existing taxonomy item.
            </summary>
            <param name="taxonomyId">The taxonomy id of the item to be deleted</param>
            <param name="taxonomyItemId">The Taxonomy item Id to be deleted</param>
            <param name="type">The item taxonomy type to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyItemServiceClient.Reorder(System.Int64,System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.TaxonomyReorderItemType,System.Boolean)">
            <summary>
            Reorder the Taxonomy Items     
            </summary>
            <param name="taxonomyId">Id for taxonomy </param>
            <param name="position">Position to reorder </param>
            <param name="itemId">Id for Item </param>
            <param name="itemType">Type of an Items (Content or users)</param>
            <param name="forAllLanguages">Reorder For All Languages</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyItemServiceClient.GetList(Ektron.Cms.Organization.TaxonomyItemCriteria)">
            <summary>
            Returns a list of all taxonomy items based upon the criteira supplied.
            </summary>
            <param name="criteria">The criteria to filter taxonomy items on.</param>
            <returns>List with the retrieved TaxonomyItemData objects</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient">
            <summary>
            TaxonomyManager service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.Add(Ektron.Cms.TaxonomyData)">
            <summary>
            Adds new content
            </summary>
            <param name="taxonomyData"> The taxonomyData object</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.Update(Ektron.Cms.TaxonomyData)">
            <summary>
            Update a taxonomy from the CMS based on taxonomy Id
            </summary>
            <param name="taxonomyData"></param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.Delete(System.Int64)">
            <summary>
             Deletes a taxonomy from the CMS based on taxonomy Id
            </summary>
            <param name="taxonomyId"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.GetItem(System.Int64)">
            <summary>
            Returns a taxonomy node based on taxonomy Id.  Only returns the node itself.  To retreive child items, use GetTree().
            </summary>
            <param name="id">ID of taxonomy node to return.</param>
            <returns>Taxonony Data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.GetItem(System.String)">
            <summary>
            Returns a taxonomy node based on taxonomy path.  Only returns the node itself.  To retreive child items, use GetTree().
            </summary>
            <param name="path">Path of taxonomy node to return.</param>
            <returns>Taxonony Data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.GetTree(System.Int64,System.Int32,System.Boolean,Ektron.Cms.PagingInfo,Ektron.Cms.Common.EkEnumeration.TaxonomyType,Ektron.Cms.Common.EkEnumeration.TaxonomyItemsSortOrder)">
            <summary>
            Returns taxonomy based on taxonomy Id
            </summary>
            <param name="depth">Taxonomy tree depth</param>
            <param name="includeItems">Sets whether the taxonomy items are included</param>
            <param name="pagingInfo">Sets paging info</param>
            <param name="type">Taxonomy type</param>
            <param name="taxonomyId">Taxonomy Id</param>
            <returns>Taxonony Data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.GetTree(System.String,System.Int32,System.Boolean,Ektron.Cms.PagingInfo,Ektron.Cms.Common.EkEnumeration.TaxonomyType,Ektron.Cms.Common.EkEnumeration.TaxonomyItemsSortOrder)">
            <summary>
            Returns taxonomy based on taxonomy path
            </summary>
            <param name="taxonomyPath">Path of the requestes taxonomy</param>
            <param name="depth">Taxonomy tree depth</param>
            <param name="includeItems">Sets whether the taxonomy items are included</param>
            <param name="pagingInfo">Sets paging info</param>
            <param name="type">Taxonomy type</param>
            <returns>Taxonony Data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.GetList(Ektron.Cms.Organization.TaxonomyCriteria)">
            <summary>
            Returns a list of all taxonomies based upon criteira supplied.
            </summary>
            <param name="criteria">criteria to base the filter on</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.GetList(Ektron.Cms.Organization.TaxonomyCustomPropertyCriteria)">
            <summary>
            Returns a list of all taxonomies based upon Custom Property Criteria supplied.
            </summary>
            <param name="criteria">criteria to base the filter on</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.GetTaxonomyConfigurationList(System.Int64)">
            <summary>
            Gets a list of Taxonomy Configurations for a given Taxonomy. Taxonomy Configurations determine what type of CMS objects can be assigned to a Taxonomy.
            </summary>
            <param name="taxonomyId">ID of taxonomy to retrieve configurations for.</param>
            <returns>List of Taxonomy Configuration enumerations.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.UpdateTaxonomyConfigurations(System.Int64,System.Collections.Generic.List{Ektron.Cms.Common.EkEnumeration.TaxonomyConfiguration})">
            <summary>
            Updates configuration list for a given taxonomy
            </summary>
            <param name="taxonomyId">taxonomy id that will be updated</param>
            <param name="configurationList">List of TaxonomyConfigurations to apply for update</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.Reorder(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Reorder category based on the given taxonomy Id
            </summary>
            <param name="taxonomyId"></param>
            <param name="position"></param>
            <param name="forAllLanguage"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.ImportTaxonomy(System.String,System.String)">
            <summary>
            Creates a taxonomy using XML file.
            </summary>
            <param name="taxonomyXml">The XML being used to create a taxonomy.</param>
            <param name="title">The title for the new taxonomy.</param>
            <returns>Returns a numeric ID for the newly created taxonomy.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Organization.TaxonomyServiceClient.MoveTaxonomy(System.Int64,System.Int64)">
            <summary>
            Move the taxonomy with items from one to another at any level
            </summary>
            <param name="sourceTaxonomyId">Source Taxonomy Id</param>
            <param name="destinationTaxonmyId">Target Taxonomy Id</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.PageBuilder.PageAssociationServiceClient">
            <summary>
            Page association service client
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageAssociationServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageAssociationServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authenticationToken</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageAssociationServiceClient.Update(System.Int64,System.Int32,System.Collections.Generic.List{Ektron.Cms.PageBuilder.ObjectData})">
            <summary>
            Update page to object association.
            </summary>
            <param name="pageId">page id</param>
            <param name="pageLanguage">page language</param>
            <param name="objects">objects</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageAssociationServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.PageBuilder.PageAssociationProperty})">
            <summary>
            Gets the list of page to object associations.
            </summary>
            <param name="criteria">criteria object.</param>
            <returns>List of page to object associations.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.PageBuilder.PageAssociationServiceClient.Delete(System.Int64,System.Int32)">
            <summary>
            Delete page to object association
            </summary>
            <param name="pageId">page id</param>
            <param name="pageLanguage">page language</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Search.SearchServiceClient">
            <summary>
            Search Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.SearchServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.SearchServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">Authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.SearchServiceClient.Search(Ektron.Cms.Search.AdvancedSearchCriteria)">
            <summary>
            Submits a query according to the specified criteria.
            </summary>
            <param name="criteria">Search criteria</param>
            <returns>Search response data</returns>
            <exception cref="T:Ektron.Cms.Search.AllNoiseException">Query contained only noise words</exception>
            <exception cref="T:Ektron.Cms.Search.EmptyQueryException">Search criteria contained an empty query</exception>
            <exception cref="T:Ektron.Cms.Search.EmptyReturnPropertiesException">No return properties were specified</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidOrderByException">A specified "order by" property was not included in the return properties collection</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidPropertyException">A specified property does not exist</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidScopeException">The specified scope is invalid or does not exist</exception>
            <exception cref="T:Ektron.Cms.Search.MalformedExpressionException">The specified expression is invalid</exception>
            <exception cref="T:Ektron.Cms.Search.NoResultsException">The query yielded no results</exception>
            <exception cref="T:Ektron.Cms.Search.SearchAuthorizationException">The configured credentials are invalid</exception>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">The site has not been configured for search</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.SearchServiceClient.Search(Ektron.Cms.Search.KeywordSearchCriteria)">
            <summary>
            Submits a query according to the specified criteria.
            </summary>
            <param name="criteria">Search criteria</param>
            <returns>Search response data</returns>
            <exception cref="T:Ektron.Cms.Search.AllNoiseException">Query contained only noise words</exception>
            <exception cref="T:Ektron.Cms.Search.EmptyQueryException">Search criteria contained an empty query</exception>
            <exception cref="T:Ektron.Cms.Search.EmptyReturnPropertiesException">No return properties were specified</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidOrderByException">A specified "order by" property was not included in the return properties collection</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidPropertyException">A specified property does not exist</exception>
            <exception cref="T:Ektron.Cms.Search.InvalidScopeException">The specified scope is invalid or does not exist</exception>
            <exception cref="T:Ektron.Cms.Search.MalformedExpressionException">The specified expression is invalid</exception>
            <exception cref="T:Ektron.Cms.Search.NoResultsException">The query yielded no results</exception>
            <exception cref="T:Ektron.Cms.Search.SearchAuthorizationException">The configured credentials are invalid</exception>
            <exception cref="T:Ektron.Cms.Search.SettingsNotFoundException">The site has not been configured for search</exception>
            <exception cref="T:Ektron.Cms.Search.SearchException">An error occurred while processing the query</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Search.SearchSettingsServiceClient.GetItem">
            <summary>
            Gets the site search settings.
            </summary>
            <returns>Instance of requested SearchSettings.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient">
            <summary>
            Auti Alias Manager service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.Add(Ektron.Cms.Common.UrlAliasAutoData)">
            <summary>
            Adds a new UrlAliasAutoData
            </summary>
            <param name="data">UrlAliasAutoData data</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.Update(Ektron.Cms.Common.UrlAliasAutoData)">
            <summary>
            Updates an existing UrlAutoAlias 
            </summary>
            <param name="data">UrlAutoAlias  data</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing UrlAutoAlias
            </summary>
            <param name="id">Unique ID of the AutoAlias</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.GetItem(System.Int64)">
            <summary>
            Get AutoAlias data by ID
            </summary>
            <param name="id">Unique ID of the AutoAlias</param>
            <returns>UrlAliasAutoData data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.GetList(Ektron.Cms.UrlAliasing.AutoAliasCriteria)">
            <summary>
            Gets a list of AutoAlias data given criteria
            </summary>
            <param name="criteria">Criteria defining which AutoAlias to get</param>
            <returns>List of UrlAliasAutoData data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.GetTarget(System.String,System.String)">
            <summary>
            Get Target data by UrlAlias and Host
            </summary>
            <param name="urlAlias">urlAlias of the Target to retrieve</param>
            <param name="host">Host of the Target to retrieve</param>
            <returns>Target string</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.GetTarget(System.String,System.String,Ektron.Cms.Common.EkEnumeration.AutoAliasType)">
            <summary>
            Get Target data by UrlAlias, Host and autoAliasType
            </summary>
            <param name="urlAlias">urlAlias of the Target to retrieve</param>
            <param name="host">Host of the Target to retrieve</param>
            <param name="autoAliasType">AutoAliasType of the Target to retrieve</param>
            <returns>Target string</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.AutoAliasServiceClient.ClearCache">
            <summary>
            ClearCache
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient">
            <summary>
            Cms Message Service Client class for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.Add(Ektron.Cms.Messaging.CmsMessageData)">
            <summary>
            Adds a new message based on information in an CmsMessageData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="message">The CmsMessageData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.Update(Ektron.Cms.Messaging.CmsMessageData)">
            <summary>
            Updates an existing message in the CMS.
            </summary>
            <param name="message">The CmsMessageData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a message in the CMS.
            </summary>
            <param name="id">The ID of the message to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single CmsMessageData object from the CMS in the current language.
            </summary>
            <param name="id">The ID of the message to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.GetItemCollection(System.Int64)">
            <summary>
            Gets a single message from the CMS in all available languages.
            </summary>
            <param name="id">The ID of the message to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.GetDefaultItemByType(System.Int64)">
            <summary>
            Gets the default message for a given message type in the CMS.  
            All available languages of the message are returned as part of the CmsMessageDataCollection.
            </summary>
            <param name="messageTypeId">The ID of the message type to retrieve the default message for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.GetDefaultItemByType(System.Int64,System.Int64)">
            <summary>
            Gets the default message for a given message type in the CMS.  
            All available languages of the message are returned as part of the CmsMessageDataCollection.
            </summary>
            <param name="messageTypeId">The ID of the message type to retrieve the default message for.</param>
            <param name="siteId">site ID</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Messaging.CmsMessageProperty})">
            <summary>
            Retrieves a list of CmsMessageData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve messages.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.CmsMessageTypeServiceClient">
            <summary>
            CMS Message Type Service Client Class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageTypeServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageTypeServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken">authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageTypeServiceClient.Add(Ektron.Cms.Messaging.CmsMessageTypeData)">
            <summary>
            Adds a new message type based on information in an CmsMessageTypeData object. 
            messageType.Id will be populated with the newly created ID.
            </summary>
            <param name="messageType">The CmsMessageData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageTypeServiceClient.Update(Ektron.Cms.Messaging.CmsMessageTypeData)">
            <summary>
            Updates an existing message type in the CMS.
            </summary>
            <param name="messageType">The CmsMessageTypeData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageTypeServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a message type in the CMS.
            </summary>
            <param name="id">The ID of the message to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageTypeServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single CmsMessageTypeData object from the CMS.
            </summary>
            <param name="id">The ID of the message type to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageTypeServiceClient.GetList(Ektron.Cms.Messaging.CmsMessageTypeCriteria)">
            <summary>
            Retrieves a list of CmsMessageTypeData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve message types.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CmsMessageTypeServiceClient.GetTokenList(System.Int64)">
            <summary>
            Returns the list of applicable replacement tokens for a given MessageTypeId.
            </summary>
            <param name="messageTypeId">ID of Message Type to retrieve tokens for.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.CommonAliasServiceClient">
            <summary>
            Common Alias Service Client for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommonAliasServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommonAliasServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication 
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommonAliasServiceClient.GetContentAlias(System.Int64)">
            <summary>
            Returns a content's alias based on a content id
            </summary>
            <param name="contentId">id of the content</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommonAliasServiceClient.GetTarget(System.Uri)">
            <summary>
            Gets a target for given url
            </summary>
            <param name="url">url of the target needed</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient">
            <summary>
            Community Alias Service Client 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient.Add(Ektron.Cms.Common.UrlAliasCommunityData)">
            <summary>
            Adds a new UrlAliasCommunity, with details from the supplied UrlAliasCommunityData object.
            </summary>
            <param name="data"></param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient.Update(Ektron.Cms.Common.UrlAliasCommunityData)">
            <summary>
            Updates a UrlAliasCommunity, with details from the supplied UrlAliasCommunityData object.
            </summary>
            <param name="data"></param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing UrlAliasCommunity.
            </summary>
            <param name="id">Community Alias Id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a UrlAliasCommunity.
            </summary>
            <param name="id">the identifier of the UrlAliasCommunity to get</param>
            <returns>UrlAliasCommunity details in a UrlAliasCommunityData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient.GetList(Ektron.Cms.UrlAliasing.CommunityAliasCriteria)">
            <summary>
            Returns a list of UrlAliasCommunity that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the list of UrlAliasCommunity to return</param>
            <returns>a list of UrlAliasCommunity</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient.GetCommunityGroupAlias(System.Int64)">
            <summary>
            Returns the CommunityGroupAlias
            </summary>
            <param name="groupId">the identifier of the group</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CommunityAliasServiceClient.GetUserAlias(System.Int64)">
            <summary>
            Returns the UserAlias
            </summary>
            <param name="userId">the identifier of the userId</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.CustomPropertyServiceClient">
            <summary>
            Custom Property Service Client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token for security.
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyServiceClient.Add(Ektron.Cms.UserCustomPropertyData)">
            <summary>
            Adds a new UserCustomProperty, with details from the supplied UserCustomPropertyData object.
            </summary>
            <param name="userData"></param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyServiceClient.Update(Ektron.Cms.UserCustomPropertyData)">
            <summary>
            Updates a UserCustomProperty, with details from the supplied UserCustomPropertyData object.
            </summary>
            <param name="userData"></param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing UserCustomProperty.
            </summary>
            <param name="id">the identifier of the UserCustomProperty to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a UserCustomProperty.
            </summary>
            <param name="id">the identifier of the UserCustomProperty to get</param>
            <returns>UserCustomProperty details in a UserCustomPropertyData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.CustomPropertyServiceClient.GetList(Ektron.Cms.User.CustomPropertyCriteria)">
            <summary>
            Returns a list of UserCustomProperties that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the UserCustomProperties to return</param>
            <returns>a list of UserCustomProperties</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient">
            <summary>
            Locale Service Client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.#ctor(System.String)">
            <summary>
            Constrcutor with authentication token for security.
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.Add(Ektron.Cms.Localization.LocaleData)">
            <summary>
            Adds a new locale
            </summary>
            <param name="data">Locale data</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.Update(Ektron.Cms.Localization.LocaleData)">
            <summary>
            Updates an existing locale
            </summary>
            <param name="data">Locale data</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.Delete(System.Int32)">
            <summary>
            Deletes an existing locale
            </summary>
            <param name="id">Unique ID of the locale</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.GetItem(System.Int32)">
            <summary>
            Get locale data by ID
            </summary>
            <param name="id">Unique ID of the locale</param>
            <returns>Locale data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.GetList(Ektron.Cms.Localization.LocaleCriteria)">
            <summary>
            Gets a list of locale data given criteria
            </summary>
            <param name="criteria">Criteria defining which locales to get</param>
            <returns>List of locale data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.FindLocale(System.Collections.Generic.List{Ektron.Cms.Localization.LocaleData},System.Int32)">
            <summary>
            Finds a locale given a list and an ID
            </summary>
            <param name="list">The list of locales to search</param>
            <param name="id">The locale ID</param>
            <returns>The locale with the given ID or null if not found.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.GetEnabledLocale(System.Int32)">
            <summary>
            Gets locale data for the given id, if it is enabled, otherwise returns null.
            </summary>
            <param name="id">A unique ID</param>
            <returns>An <see cref="T:Ektron.Cms.Localization.LocaleData"/> object or null</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.GetEnabledLocales">
            <summary>
            Gets list of locale data that are enabled.
            </summary>
            <returns>List of LocaleData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.GetEnabledLocales(System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets list of locale data for the given list of ids, for each one that is enabled.
            </summary>
            <param name="ids">List of language ids</param>
            <returns>List of LocaleData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.IsLocaleUsed(System.Int32)">
            <summary>
            Gets a value indicating whether the locale specified is or has been used.
            </summary>
            <param name="id">A unique ID</param>
            <returns>Returns true if the locale is in use, even if it is currently disabled.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.IsFallbackLocale(System.Int32)">
            <summary>
            Gets a value indicating whether the locale specified is a fallback locale for at least one other locale.
            </summary>
            <param name="id">A unique ID</param>
            <returns>Returns true if the locale is the fallback for another locale.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocaleServiceClient.GetContentLanguage(System.Int64,System.Int32)">
            <summary>
            Get Content Language
            </summary>
            <param name="contentId">content ID</param>
            <param name="preferredLanguageId">preferred language ID</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient">
            <summary>
            Localization Object Service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.MarkReadyForTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as ready to be localized.
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name=" objectLanguage">Language of the object</param>
            <returns>ID of the "mark"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.MarkNotReadyForTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as NOT ready to be localized. Published content is always considered ready for translation.
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object</param>
            <returns>ID of the "mark"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.MarkDoNotTranslate(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as do NOT translate. 
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object</param>
            <returns>ID of the "mark"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.MarkNeedsTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32,System.Int32)">
            <summary>
            Marks an object, e.g., content, as existing in the target language, but needs to be localized. 
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="targetLanguage">Language of the object needing translation, i.e., the target language</param>
            <param name="sourceLanguage">Original language of the object</param>
            <returns>Returns an ID to the database record of the "marking"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.MarkNeedsTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as existing in the target language, but needs to be localized. 
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object needing translation, i.e., the target language</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.MarkOutForTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks that an object (for a given target language) is currently being translated
            </summary>
            <param name="objectType">The Localizable Cms Object Type</param>
            <param name="objectId">The ID of the object</param>
            <param name="objectLanguage">The target locale of the object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.MarkTranslated(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks that an object (for a given target language) has been translated
            </summary>
            <param name="objectType">The Localizable Cms Object Type</param>
            <param name="objectId">The ID of the object</param>
            <param name="objectLanguage">The target locale of the object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.GetLocalizationObjectList(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Gets a list of localization object data given object information
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object</param>
            <returns>List of localization object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.GetObjectLanguages(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64)">
            <summary>
            Gets the list of languages that exist for the given CMS object
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <returns>A list of locale IDs</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.GetContentLocalizationState(System.Int64,Ektron.Cms.ContentData)">
            <summary>
            Get the localization state of the specified content.
            </summary>
            <param name="contentId">Id of the content</param>
            <param name="contentData">ContentData object of the content specified</param>
            <returns>Localization state e.g., Ready for translation, Not ready for translation, Do not translate, Needs translation, Out for translation, Translated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.GetContentLocalizationState(System.Int64,Ektron.Cms.ContentData,System.Int32@,System.DateTime@)">
            <summary>
            Get the localization state of the specified content.
            </summary>
            <param name="contentId">Id of the content</param>
            <param name="contentData">ContentData object of the content specified</param>
            <param name="sourceLanguage">If content is a translation (or will be), sourceLanguage is the original language, otherwise -1</param>
            <param name="sourceDateModified">If content has been translated, the date the original source was last edited, otherwise DateTime.MinValue</param>
            <returns>Localization state e.g., Ready for translation, Not ready for translation, Do not translate, Needs translation, Out for translation, Translated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.LocalizationObjectServiceClient.Delete(System.Int64)">
            <summary>
            Deletes the LocalizationObject record from the database
            </summary>
            <param name="id">The record ID as LocalizationObjectData.Id or returned by MarkReadyForTranslation or MarkNeedsTranslation</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient">
            <summary>
            Notification Agent Setting service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient.Add(Ektron.Cms.Notifications.NotificationAgentData)">
            <summary>
            Adds a new notification agent to the system.
            </summary>
            <param name="agentData">Agent settings to save.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a notification agent settings from the CMS.
            </summary>
            <param name="id">Id of agent to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a notifcation agent setting object.
            </summary>
            <param name="id">Id of agent to retrieve settings for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient.GetList(Ektron.Cms.Notifications.NotificationAgentCriteria)">
            <summary>
            Retrieves a list of Notification Agent settings in the CMS based upon the supplied criteria.
            </summary>
            <param name="criteria">criteira by which to retrieve agent settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient.Update(Ektron.Cms.Notifications.NotificationAgentData)">
            <summary>
            Updates an existing notification agent settings.
            </summary>
            <param name="agentData">Agent settings to save.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient.GetAgent(System.Int64)">
            <summary>
            Returns actual NotificationAgent based upon Agent Id.
            </summary>
            <param name="id">Id of agent to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationAgentSettingServiceClient.GetRegisteredAgentList">
            <summary>
            Retrieves a list of the Notification Agents registered in the web.config.
            </summary>
            <returns>List of registered agents.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient">
            <summary>
            Notification Preference Service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.Add(Ektron.Cms.Notifications.NotificationPreferenceData)">
            <summary>
            Saves a new notification preference.
            </summary>
            <param name="preferenceData">preference data to save.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.Update(Ektron.Cms.Notifications.NotificationPreferenceData)">
            <summary>
            Updates an existing notification preference.
            </summary>
            <param name="preferenceData">preference data to save.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a notification preference.
            </summary>
            <param name="id">Id of NotificationPreference to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.GetItem(System.Int64)">
            <summary>
            Returns a single notification preference by Id.
            </summary>
            <param name="id">Id of NotificationPreference to return.</param>
            <returns>Notification Preference Data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.GetList(Ektron.Cms.Notifications.NotificationPreferenceCriteria)">
            <summary>
            Returns a list of user notification preferences based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which preferences to return.</param>
            <returns>List of user notification preferences</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.GetDefaultPreferenceList(Ektron.Cms.Notifications.NotificationPreferenceCriteria)">
            <summary>
            Returns a list of default notification preferences based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which default preferences to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.GetUserNotificationListForActivity(Ektron.Cms.Activity.ActivityData,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of users and their nortfication settings for a given activity ocurrence.
            </summary>
            <param name="activity">Activity defintion to retrieve notifications for.</param>
            <param name="paging">paging information for the retrieval.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPreferenceServiceClient.SaveUserPreferences(System.Collections.Generic.List{Ektron.Cms.Notifications.NotificationPreferenceData})">
            <summary>
            Saves a set of notification preferences for a given user. 
            Preferences marked as added will be added and those marked as deleted will be removed.
            </summary>
            <param name="preferenceList">preference data to save.</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPublishPreferenceServiceClient">
            <summary>
            Notification Publish Preference Service Client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPublishPreferenceServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPublishPreferenceServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPublishPreferenceServiceClient.GetList(System.Int64)">
            <summary>
            Returns a list of NotificationPublishPreferenceData for a given user
            </summary>
            <param name="userId">user id of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.NotificationPublishPreferenceServiceClient.UpdateDefaultPreferences(System.Collections.Generic.List{System.Int64})">
            <summary>
            Updates default Preferences
            </summary>
            <param name="ActivityTypeIdList">list of long integers with ActivityTypeIdList</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient">
            <summary>
            Notification Settings service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient.Add(Ektron.Cms.Notifications.UserNotificationSettingData)">
            <summary>
            Adds a new user notification setting.
            </summary>
            <param name="userSettingData">user setting data to save.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a User Notification Setting.
            </summary>
            <param name="id">Id of User Notification Setting to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient.GetItem(System.Int64)">
            <summary>
            Returns a single UserNotificationSettingData by Id.
            </summary>
            <param name="id">Id of UserNotificationSettingData to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient.GetList(Ektron.Cms.Notifications.UserNotificationSettingCriteria)">
            <summary>
            Returns a list of UserNotificationSettingData based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which UserNotificationSettingData to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient.Ektron#Cms#Notifications#IUserNotificationSetting#GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Notifications.UserNotificationSettingProperty})">
            <summary>
            Returns a list of UserNotificationSettingData based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which UserNotificationSettingData to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient.Update(Ektron.Cms.Notifications.UserNotificationSettingData)">
            <summary>
            Updates an existing user notification setting.
            </summary>
            <param name="userSettingData">user setting data to save.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.Notifications.UserNotificationSettingServiceClient.VerifyValidationCode(System.Int64,System.String)">
            <summary>
            Verifies that the validation code is correct and enables users notfication settings.
            </summary>
            <param name="userSettingId">Id of user notification setting.</param>
            <param name="verificationCode">Verification code to validate.</param>
            <returns>true if the verification code is correct.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient">
            <summary>
            Permission Manager Service Client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.Add(Ektron.Cms.UserPermissionData)">
            <summary>
             Adds a new UserPermission, with details from the supplied UserPermissionData object.
            </summary>
            <param name="permissionData"></param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.Update(Ektron.Cms.UserPermissionData)">
            <summary>
            Updates a UserPermission, with details from the supplied UserPermissionData object.
            </summary>
            <param name="permissionData"></param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing UserPermission.
            </summary>
            <param name="id">User or Group Id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a UserPermission.
            </summary>
            <param name="id">the identifier of the UserPermission to get</param>
            <returns>UserPermission details in a UserPermissionData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.GetList(Ektron.Cms.Settings.PermissionCriteria)">
            <summary>
            Returns a list of UserPermissions that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the UserPermissions to return</param>
            <returns>a list of UserPermissions</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.DeletePermissionsForUser(Ektron.Cms.Settings.ItemType,System.Int64,System.Int64)">
            <summary>
            Deletes a Permission for an object, with details from the supplied type and user.
            </summary>
            <param name="type">Type of the object to delete associated permission</param>
            <param name="userId">UserId of the user to which delete associated permissions</param>
            <param name="objectId">Id of the object to delete permissions</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.DeletePermissionForGroup(Ektron.Cms.Settings.ItemType,System.Int64,System.Int64)">
            <summary>
            Deletes a Permission for an object, with details from the supplied type and group.
            </summary>
            <param name="type">Type of the object to delete associated permission</param>
            <param name="groupId">groupId of the group to which delete associated permissions</param>
            <param name="objectId">Id of the object to delete permissions</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.IsLoggedInUserAdmin">
            <summary>
            Checks if currently logged in user is a CMS administrator.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.GetUserPermissionForContent(System.Int64,System.Int64,System.Int32)">
            <summary>
            Gets the users permission to a piece of content, for either the user or group the user is part of.
            </summary>
            <param name="userid">User Id to get permissions for.</param>
            <param name="contentid">Content Id to get permissions for.</param>
            <returns>UserPermissionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.GetUserPermissionForContent(System.Int64,System.Int32)">
            <summary>
            Gets the users permission to a piece of content, for loggedIn User.
            </summary>
            <param name="contentid">Content Id to get permissions for.</param>
            <param name="languageId">Language of the content.</param>
            <returns>UserPermissionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.GetUserPermissionForFolder(System.Int64,System.Int64,System.Int32)">
            <summary>
            Gets the users permission to a folder, for either the user or group the user is part of.
            </summary>
            <param name="userid">User Id to get permissions for.</param>
            <param name="contentid">Folder Id to get permissions for.</param>
            <returns>UserPermissionData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.PermissionServiceClient.GetUserPermissionForFolder(System.Int64,System.Int32)">
            <summary>
            Gets the users permission to a folder, for loggedIn User.
            </summary>
            <param name="folderid">Folder Id to get permissions for.</param>
            <param name="languageId">Language Id of the folder.</param>
            <returns>UserPermissionData</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.SmartFormConfigurationServiceClient">
            <summary>
            Smart Form Configuration service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SmartFormConfigurationServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SmartFormConfigurationServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication Token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SmartFormConfigurationServiceClient.Add(Ektron.Cms.SmartFormConfigurationData)">
            <summary>
            Adds a new smartFormConfiguration based on information in an SmartFormConfigurationData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="smartFormCongigurationData">The SmartFormConfigurationData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SmartFormConfigurationServiceClient.Update(Ektron.Cms.SmartFormConfigurationData)">
            <summary>
            Updates an existing smartFormConfiguration in the CMS.
            </summary>
            <param name="smartFormCongigurationData">The SmartFormConfigurationData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SmartFormConfigurationServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a smartFormConfiguration in the CMS.
            </summary>
            <param name="id">The ID of the smartFormConfiguration to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SmartFormConfigurationServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single SmartFormConfigurationData object from the CMS.
            </summary>
            <param name="id">The ID of the smartFormConfiguration to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SmartFormConfigurationServiceClient.GetList(Ektron.Cms.Content.SmartFormConfigurationCriteria)">
            <summary>
            Retrieves a list of SmartFormConfigurationData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve smartFormConfigurations.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SmartFormConfigurationServiceClient.GetXmlSearchFieldData(System.Int64)">
            <summary>
            Retrieves a list of SmartFormIndexFieldData objects for the supplied smart form config id.
            </summary>
            <param name="id">The ID of the smartFormConfiguration to retrieve index search field data for.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.TaskCategoryServiceClient">
            <summary>
            Task Category Manager service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCategoryServiceClient.#ctor">
            <summary>
            Constrcutor. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCategoryServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token for security.
            </summary>
            <param name="authenticationToken">authenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCategoryServiceClient.Add(Ektron.Cms.TaskCategoryData)">
            <summary>
            Adds a new task category based on information in an TaskCategoryData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="taskData">The TaskCategoryData object to add.</param>
            <returns>Added TaskCategoryData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCategoryServiceClient.Update(Ektron.Cms.TaskCategoryData)">
            <summary>
            Updates an existing task category in the CMS.
            </summary>
            <param name="taskData">The TaskCategoryData object to update.</param>
            <returns>Updated TaskCategoryData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCategoryServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a task category in the CMS.
            </summary>
            <param name="id">The ID of the task category to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCategoryServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single TaskCategoryData object from the CMS.
            </summary>
            <param name="id">The ID of the task category to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCategoryServiceClient.GetList(Ektron.Cms.TaskCategoryCriteria)">
            <summary>
            Retrieves a list of TaskCategoryData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve task categories.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCommentServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCommentServiceClient.#ctor(System.String)">
            <summary>
            Constrcutor with authentication token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCommentServiceClient.Add(Ektron.Cms.TaskCommentData)">
            <summary>
            Adds a new task comment based on information in an TaskCommentData object. 
            CommentId will be populated with the newly created ID.
            </summary>
            <param name="taskCommentData">The TaskCommentData object to add.</param>
            <returns>The added TaskCommentData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCommentServiceClient.Update(Ektron.Cms.TaskCommentData)">
            <summary>
            Updates an existing task comment in the CMS.
            </summary>
            <param name="taskCommentData">The TaskCommentData object to update.</param>
            <returns>The updated TaskCommentData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCommentServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a task comment in the CMS.
            </summary>
            <param name="id">The ID of the task comment to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCommentServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single TaskCommentData object from the CMS.
            </summary>
            <param name="id">The ID of the task to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskCommentServiceClient.GetList(Ektron.Cms.TaskCommentCriteria)">
            <summary>
            Retrieves a list of TaskCommentData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve tasks.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.TaskServiceClient">
            <summary>
             Task service client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskServiceClient.#ctor(System.String)">
            <summary>
            Constrcutor with authentication token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskServiceClient.Add(Ektron.Cms.TaskData)">
            <summary>
            Adds a new task based on information in an TaskData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="taskData">The TaskData object to add.</param>
            <returns>The added TaskData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskServiceClient.Update(Ektron.Cms.TaskData)">
            <summary>
            Updates an existing task in the CMS.
            </summary>
            <param name="taskData">The TaskData object to update.</param>
            <returns>The updated TaskData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskServiceClient.Delete(System.Int64)">
            <summary>
            Deletes a task in the CMS.
            </summary>
            <param name="id">The ID of the task to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskServiceClient.GetItem(System.Int64)">
            <summary>
            Retrieves a single TaskData object from the CMS.
            </summary>
            <param name="id">The ID of the task to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaskServiceClient.GetList(Ektron.Cms.TaskCriteria)">
            <summary>
            Retrieves a list of TaskData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve tasks.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient">
            <summary>
            Taxonomy Custom peroperty Service client class for WCF
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.GetItem(System.Int64,System.Int32)">
            <summary>
             Returns details of a CustomProperty.
            </summary>
            <param name="propertyId">Id of the CustomProperty</param>
            <param name="languageId">Language id of the CustomProperty to get</param>
            <returns>CustomProperty details in a CustomPropertyData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.GetItem(System.String,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType)">
            <summary>
            Returns a list of CustomPropertyData objects with their details
            </summary>
            <param name="propertyName">property name</param>
            <param name="languageId">Language id of the CustomProperties to get</param>
            <param name="cmsObjectType">Type of the CustomProperties to get</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.GetList(System.Int32,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of CustomPropertyData objects with their details.
            </summary>
            <param name="languageId">Language id of the CustomProperties to get</param>
            <param name="paging">Paging details</param>
            <returns>List of CustomPropertyData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.GetList(Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,System.Int32,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of CustomPropertyData objects with their details.
            </summary>
            <param name="cmsObjectType">Type of the CustomProperties to get</param>
            <param name="languageId">Language id of the CustomProperties to get</param>
            <param name="paging">Paging details</param>
            <returns>List of CustomPropertyData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.Add(Ektron.Cms.Common.CustomPropertyData)">
            <summary>
            Adds a new CustomProperty
            </summary>
            <param name="data">CustomPropertyData object with the details to add</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.Update(Ektron.Cms.Common.CustomPropertyData)">
            <summary>
            Updates an existing CustomProperty
            </summary>
            <param name="data">CustomPropertyData object with the details to update</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.Delete(System.Int64,System.Int32)">
            <summary>
            Deletes an existing CustomProperty
            </summary>
            <param name="propertyId">Id of the CustomProperty to delete</param>
            <param name="languageId">Language Id of the CustomProperty to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.GetDataTypeList">
            <summary>
            Gets a list of CustomPropertyItemDataType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.GetObjectTypeList">
            <summary>
            Gets a list of CustomPropertyObjectType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.GetListTranslated(System.Int64)">
            <summary>
             Returns a list of non translated LanguageData objects.
            </summary>
            <param name="propertyId">Id of the CustomProperty</param>
            <returns>List of LanguageData objects</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.TaxonomyCustomPropertyServiceClient.GetListNonTranslated(System.Int64)">
            <summary>
             Returns a list of non translated LanguageData objects.
            </summary>
            <param name="propertyId">Id of the CustomProperty</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.AliasManagerServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.AliasManagerServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">Authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.AliasRuleServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.AliasRuleServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">Authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.AliasSettingsServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.AliasSettingsServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">Authentication token</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient">
            <summary>
            Regex Alias service client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient.Add(Ektron.Cms.UrlAliasRegExData)">
            <summary>
            Adds a new regular expression based on UrlAliasRegExData data.
            </summary>
            <param name="data">Data to add.</param>
            <returns>Added data object with the new ID.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient.Update(Ektron.Cms.UrlAliasRegExData)">
            <summary>
            Updates an existing regular expression record based on UrlAliasRegExData data.
            </summary>
            <param name="data">Data to update</param>
            <returns>Updated data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an regular expression record from the database.
            </summary>
            <param name="regExId">The ID of the item to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient.GetItem(System.Int64)">
            <summary>
            Gets a single expression for a specified ID.
            </summary>
            <param name="regExId">The ID of the regular expression</param>
            <returns>A single expression for a specified ID.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient.GetList(Ektron.Cms.UrlAliasing.RegExAliasCriteria)">
            <summary>
            Gets a list of either the active regular expression or a list of all expressions.
            </summary>
            <param name="criteria">The filter criteria</param>
            <returns>Returns either the active regular expression or a list of all expressions.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient.GetTarget(System.String,System.String)">
            <summary>
            Gets the target URL for a matching expression by providing the RegEx alias and server host name.
            </summary>
            <param name="urlAlias">The RegEx aliased URL.</param>
            <param name="host">The server's host name. For example, if your site is www.example.com, enter <b>example</b>.</param>
            <returns>The target URL for a matching expression.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.RegExAliasServiceClient.ClearCache">
            <summary>
            Refreshes the cache.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.ReplacementCharacterManagerServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.ReplacementCharacterManagerServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">Authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.RequestValidatorServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.RequestValidatorServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">Authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.URLRequestServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.URLRequestServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">Authentication token</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.URLResponseValidatorServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.UrlAliasing.URLResponseValidatorServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken">Authentication token</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.User.UserGroupServiceClient">
            <summary>
            User Group service client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.#ctor">
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token for security. 
            </summary>
            <param name="authenticationToken">Authentication Token.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.Add(Ektron.Cms.UserGroupData)">
            <summary>
            Adds a new UserGroup, with details from the supplied UserGroupData object.
            </summary>
            <param name="userGroup"></param>
            <returns>Added UserGroupData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.Update(Ektron.Cms.UserGroupData)">
            <summary>
            Updates a UserGroup, with details from the supplied UserGroupData object.
            </summary>
            <param name="userGroup"></param>
            <returns>Updated UserGroupData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing UserGroup.
            </summary>
            <param name="id">the identifier of the userGroup to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.GetItem(System.Int64)">
            <summary>
            Returns details of a UserGroup.
            </summary>
            <param name="id">the identifier of the UserGroup to get</param>
            <returns>UserGroup details in a UserGroupData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.GetList(Ektron.Cms.UserGroupCriteria)">
            <summary>
            Returns a list of UserGroups that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the UserGroups to return</param>
            <returns>a list of UserGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.IsUserInGroup(System.Int64,System.Int64)">
            <summary>
            Determines if the user is in the specified group
            </summary>
            <param name="userId">Identifier of the User</param>
            <param name="groupId">Identifier of the UserGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.AddUser(System.Int64,System.Int64)">
            <summary>
            Adds a user to a group
            </summary>
            <param name="groupId">the identifier of the group</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.DeleteUser(System.Int64,System.Int64)">
            <summary>
            Deletes a user from a group
            </summary>
            <param name="groupId">the identifier of the group</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.GetListForUser(System.Int64,Ektron.Cms.Common.EkEnumeration.GroupOrderBy)">
            <summary>
            Returns all the groups to which user belongs
            </summary>
            <param name="groupId">the identifier of the User</param>
            <param name="orderBy">Indicates the group order</param>
            <returns>a list of UserGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.GetListForUser(System.Int64,Ektron.Cms.UserGroupCriteria)">
            <summary>
            Returns all the groups to which user belongs
            </summary>
            <param name="userId">the identifier of the User</param>
            <param name="criteria">used to specify, or filter, the UserGroups to return</param>
            <returns>a list of UserGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserGroupServiceClient.GetUserList(System.Int64)">
            <summary>
            Returns list of users that belongs to the user group.
            </summary>
            <param name="groupId">The identifier of the user group.</param>
            <returns>A list of users</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Activity.Activity">
            <summary>
            Activity class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.Add(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Adds a new activity to the general feed.
            </summary>
            <param name="activity">Activity data to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.Update(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Updates an activity in the general feed.
            </summary>
            <param name="activity">Activity data to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.Delete(System.Int64)">
            <summary>
            Delete's an activity from the general feed.
            </summary>
            <param name="id">The ID of activity to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.AddActivityMessage(System.Int64,System.Int32,System.String)">
            <summary>
            Adds a language specific message for an activity in the general feed.
            </summary>
            <param name="activityId">Id of activity to add message for.</param>
            <param name="languageId">Id of language to add message for.</param>
            <param name="message">Activity message to be added.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.UpdateActivityMessage(System.Int64,System.Int32,System.String)">
            <summary>
            Updates an existing message for an activity in the general feed.
            </summary>
            <param name="activityId">Id of activity to add message for.</param>
            <param name="languageId">Id of language to add message for.</param>
            <param name="message">Activity message to be added.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.GetItem(System.Int64)">
            <summary>
            Returns a single ActivityStream Item by ID.
            </summary>
            <param name="id">ID of Activtiy to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Activity.ActivityProperty})">
            <summary>
            Returns  a list of all activities based upon criteria supplied.
            </summary>
            <param name="criteria">Criteria used to filter results.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.GetListForUser(System.Int64,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of activities associated with a user.  These will be activities where the user is the subject or the Actor.
            </summary> 
            <param name="pagingInfo">Paging information for retrieval.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.GetListForUser(System.Int64,Ektron.Cms.PagingInfo,System.Int32)">
            <summary>
            Returns a list of activities associated with a user.  These will be activities where the user is the subject or the Actor.
            </summary> 
            <param name="pagingInfo">Paging information for retrieval.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <param name="returnCommentCount">Number of comments to return with each activity. 0 = no comments, -1 = all</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Activity.ActivityProperty},Ektron.Cms.Common.EkEnumeration.ActivityFeedType,System.Int64)">
            <summary>
            Gets an Activity Feed based upon the feedtype and the Id.
            </summary>
            <param name="criteria">criteria for further filtering the feed, sorting, and paging.</param>
            <param name="feedType">The type of feed to retrieve.  For example, User or CommunityGroup.</param>
            <param name="feedTypeId">The id corresponding to the feed type.  For example, if FeedType = User, FeedTypeId would be the user Id to retrieve feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.IsSiteActivityPublishingEnabled(System.Int64)">
            <summary>
            Returns a boolean indicating wheather Publishing is enabled
            </summary>
            <param name="siteId">a site id</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.EnableActivityPublishing(System.Int64)">
            <summary>
            Enables activity publishing for the site.  This will also stup defualt notification preferences for any existin users.  
            Warning, depending on the number of users, this call could be time consuming.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.DisableActivityPublishing(System.Int64)">
            <summary>
            Disables activity publishing for the site.  
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.IsSiteActivityEmailReplyEnabled(System.Int64)">
            <summary>
            Gets setting indicating if Activity Email Replies are enabled.  Read Only - use EnableActivityEmailReply and DisableActivityEmailReply 
            to set property.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.EnableActivityEmailReply(System.Int64)">
            <summary>
            Enables Activity Email Replies for the site. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.DisableActivityEmailReply(System.Int64)">
            <summary>
            Disables Activity Email Replies for the site.  
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.Activity.Publish(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Publishes an activity to all subscribers.
            </summary>
            <param name="activity">activity that has occured.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.Activity.ActivityService">
            <summary>
            Gets instance to IActivityStream.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.Activity.ActivityStreamService">
            <summary>
            Gets instance to IActivityStream.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.Activity.IsActivityPublishingEnabled">
            <summary>
            Gets setting indicating if Activity Publishing is enabled.  Read Only - use EnableActivityPublishing and DisableActivityPublishing 
            to set property.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.Activity.IsActivityEmailReplyEnabled">
            <summary>
            Gets setting indicating if Activity Email Replies are enabled.  Read Only - use EnableActivityEmailReply and DisableActivityEmailReply 
            to set property.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Activity.ActivityComment">
            <summary>
            Activity Comment 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityComment.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityComment.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityComment.Add(Ektron.Cms.Activity.ActivityCommentData)">
            <summary>
            Adds a new activity comment.
            </summary>
            <param name="comment">Activity comment to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityComment.Update(Ektron.Cms.Activity.ActivityCommentData)">
            <summary>
            Updates an activity comment.
            </summary>
            <param name="comment">Activity comment to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityComment.Delete(System.Int64)">
            <summary>
            Delete's an activity comment.
            </summary>
            <param name="id">The ID of activity comment to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityComment.GetItem(System.Int64)">
            <summary>
            Returns a single Activity comment by ID.
            </summary>
            <param name="id">ID of Activtiy comment to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityComment.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Activity.ActivityCommentProperty})">
            <summary>
            Returns  a list of all activity comments based upon criteria supplied.
            </summary>
            <param name="criteria">Criteria used to filter results.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityComment.ActivityCommentService">
            <summary>
            Gets instance to IActivityStream.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Activity.ActivityQueue">
            <summary>
            Api class for Queuing activities.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityQueue.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityQueue.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">API mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityQueue.Queue(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Queue method
            </summary>
            <param name="item">ActivityData item</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityQueue.Dequeue">
            <summary>
            Dequeue method
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Activity.ActivityStream">
            <summary>
            Api class for managing activities in ActivityStreams.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStream.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStream.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStream.GetUserActivityStream(System.Int64,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of activities in a user's ActivityStream.
            </summary> 
            <param name="paging">Pagign Information for retrieval.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStream.GetUserActivityStream(Ektron.Cms.Common.Criteria{Ektron.Cms.Activity.ActivityProperty},System.Int64)">
            <summary>
            Returns a list of activities in a user's ActivityStream based upon supplied criteria.
            </summary> 
            <param name="criteria">Criteira by which to filter the stream.  UserId filter is ignored.</param>
            <param name="userId">ID of user to retrieve feed for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStream.SendActivityToUsersStream(System.Int64,System.Int64)">
            <summary>
            Adds an activity existing in the general feed to a user's feed.
            </summary>
            <param name="activityId">Id of activity to add to users feed.</param>
            <param name="userId">Id of user.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStream.SendActivityToStreams(System.Int64)">
            <summary>
            Sends the activity to all applicable streams based upon the activity and users preferences.
            </summary>
            <param name="activityId">Id of activity to send to streams.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityStream.SendActivityToAllStreams(System.Int64)">
            <summary>
            Sends the activity directly to all user's streams.
            </summary>
            <param name="activityId">Id of activity to send to streams.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityStream.ActivityStreamService">
            <summary>
            Gets instance to IActivityStream.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Activity.ActivityType">
            <summary>
            Api class for managing builtin activity types and creating custom activity types in ActivityStreams.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityType.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Api mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityType.Add(Ektron.Cms.Activity.ActivityTypeData)">
            <summary>
            Adds a new ActivityType to Cms. The ActivityType.Id property will be populated with the new ActivityType's Id.
            </summary>
            <param name="ActivityTypeData">ActivityTypeData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityType.Update(Ektron.Cms.Activity.ActivityTypeData)">
            <summary>
            Updates an existing ActivityType in Cms.
            </summary>
            <param name="ActivityTypeData">ActivityTypeData object to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityType.Delete(System.Int64)">
            <summary>
            Deletes a ActivityType from the Cms.
            </summary>
            <param name="id">Id of ActivityType to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityType.GetItem(System.Int64)">
            <summary>
            Retrieves a ActivityType by Id.
            </summary>
            <param name="id">Id of ActivityType to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Activity.ActivityType.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Activity.ActivityTypeProperty})">
            <summary>
            Retrieves a list.
            </summary>
            <param name="criteria">Criteria by which to filter ActivityType being retrieved.</param>
            <returns>List of ActivityType data objects.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Activity.ActivityType.ActivityTypeService">
            <summary>
            Activity Type Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty">
            <summary>
            Custom property Class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.#ctor">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor with API mode
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.GetItem(System.Int64,System.Int32)">
            <summary>
            Get item
            </summary>
            <param name="propertyId">propertyId</param>
            <param name="languageId">languageId</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.GetList(System.Int32,Ektron.Cms.PagingInfo)">
            <summary>
            Get list
            </summary>
            <param name="languageId">languageId</param>
            <param name="paging">paging info</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.GetList(Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,System.Int32,Ektron.Cms.PagingInfo)">
            <summary>
            GetList
            </summary>
            <param name="cmsObjectType">cmsObjectType</param>
            <param name="languageId">languageId</param>
            <param name="paging">paging</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.GetListNonTranslated(System.Int64)">
            <summary>
            Get Non translated list
            </summary>
            <param name="propertyId">property id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.GetListTranslated(System.Int64)">
            <summary>
            Get translated list
            </summary>
            <param name="propertyId">property id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.Add(Ektron.Cms.Common.CustomPropertyData)">
            <summary>
            Add method
            </summary>
            <param name="data">Customproperty Data</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.Update(Ektron.Cms.Common.CustomPropertyData)">
            <summary>
            Update method
            </summary>
            <param name="data">CustompropertyData to be updated</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.Delete(System.Int64,System.Int32)">
            <summary>
            Delete by property Id and language id
            </summary>
            <param name="propertyId">property id</param>
            <param name="languageId">language id</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Core.CustomProperty.CustomProperty.GetInstance">
            <summary>
            Get Instance.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Core.CustomProperty.CustomPropertyObject">
            <summary>
            Custom Property Object
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomPropertyObject.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomPropertyObject.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomPropertyObject.GetItem(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,System.Int64)">
            <summary>
            Get item method
            </summary>
            <param name="objectId">Content ID</param>
            <param name="languageId">language id</param>
            <param name="cmsObjectType">Object type</param>
            <param name="propertyId">property id</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomPropertyObject.GetList(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,Ektron.Cms.PagingInfo)">
            <summary>
            Get List method
            </summary>
            <param name="objectId">object id</param>
            <param name="languageId">language id</param>
            <param name="cmsObjectType">object type</param>
            <param name="paging">paging info</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomPropertyObject.Add(Ektron.Cms.Common.CustomPropertyObjectData)">
            <summary>
            Add method
            </summary>
            <param name="data">Custom Property data to be added</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomPropertyObject.Update(Ektron.Cms.Common.CustomPropertyObjectData)">
            <summary>
            Update Method
            </summary>
            <param name="data">Custom property object to be updated</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.CustomProperty.CustomPropertyObject.Delete(System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.CustomPropertyObjectType,System.Int64)">
            <summary>
            Delete method
            </summary>
            <param name="objectId">Content id</param>
            <param name="languageId">Language id</param>
            <param name="cmsObjectType">object type</param>
            <param name="propertyId">property id</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Core.CustomProperty.CustomPropertyObject.GetInstance">
            <summary>
            Get Instance.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Settings.TaskManager">
            <summary>
            Task Manager Class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskManager.Add(Ektron.Cms.TaskData)">
            <summary>
            Adds a new task based on information in an TaskData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="taskData">The TaskData object to add.</param>
            <returns>The added TaskData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskManager.Update(Ektron.Cms.TaskData)">
            <summary>
            Updates an existing task in the CMS.
            </summary>
            <param name="taskData">The TaskData object to update.</param>
            <returns>The updated TaskData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskManager.Delete(System.Int64)">
            <summary>
            Deletes a task in the CMS.
            </summary>
            <param name="id">The ID of the task to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single TaskData object from the CMS.
            </summary>
            <param name="id">The ID of the task to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Settings.TaskManager.GetList(Ektron.Cms.TaskCriteria)">
            <summary>
            Retrieves a list of TaskData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve tasks.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Settings.TaskManager.TaskManagerService">
            <summary>
            returns an instance of the business objects task manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Localization.LocaleManager">
            <summary>
            Localization API
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.Localization.LocaleManager.service">
            <summary>
            Reference to the business object
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.#ctor">
            <summary>
            Initializes a new instance of the Locale class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Initializes a new instance of the Locale class.
            </summary>
            <param name="mode">Authorization mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.Add(Ektron.Cms.Localization.LocaleData)">
            <summary>
            Adds a new locale
            </summary>
            <param name="data">Locale data</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.Update(Ektron.Cms.Localization.LocaleData)">
            <summary>
            Updates an existing locale
            </summary>
            <param name="data">Locale data</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.Delete(System.Int32)">
            <summary>
            Deletes an existing locale
            </summary>
            <param name="id">Unique ID of the locale</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.GetItem(System.Int32)">
            <summary>
            Get locale data by ID
            </summary>
            <param name="id">Unique ID of the locale</param>
            <returns>Locale data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Localization.LocaleProperty})">
            <summary>
            Gets a list of locale data given criteria
            </summary>
            <param name="criteria">Criteria defining which locales to get</param>
            <returns>List of locale data</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.FindLocale(System.Collections.Generic.List{Ektron.Cms.Localization.LocaleData},System.Int32)">
            <summary>
            Finds a locale given a list and an ID
            </summary>
            <param name="list">The list of locales to search</param>
            <param name="id">The locale ID</param>
            <returns>The locale with the given ID or null if not found.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.GetEnabledLocale(System.Int32)">
            <summary>
            Gets locale data for the given id, if it is enabled, otherwise returns null.
            </summary>
            <param name="id">A unique ID</param>
            <returns>An <see cref="T:Ektron.Cms.Localization.LocaleData"/> object or null</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.GetEnabledLocales">
            <summary>
            Gets list of locale data that are enabled.
            </summary>
            <returns>List of LocaleData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.GetEnabledLocales(System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets list of locale data for the given list of ids, for each one that is enabled.
            </summary>
            <param name="ids">List of language ids</param>
            <returns>List of LocaleData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.IsLocaleUsed(System.Int32)">
            <summary>
            Gets a value indicating whether the locale specified is or has been used.
            </summary>
            <param name="id">A unique ID</param>
            <returns>Returns true if the locale is in use, even if it is currently disabled.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocaleManager.IsFallbackLocale(System.Int32)">
            <summary>
            Gets a value indicating whether the locale specified is a fallback locale for at least one other locale.
            </summary>
            <param name="id">A unique ID</param>
            <returns>Returns true if the locale is the fallback for another locale.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Localization.LocaleManager.Service">
            <summary>
            Gets the ILocaleManager instance
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Localization.LocalizationObject">
            <summary>
            ILocalization Object API
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.Localization.LocalizationObject.service">
            <summary>
            member variable to store the server
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.#ctor">
            <summary>
            Initializes a new instance of the LocalizationObject class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Initializes a new instance of the LocalizationObject class
            </summary>
            <param name="mode">Authorization mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.GetContentLocalizationState(System.Int64,Ektron.Cms.ContentData)">
            <summary>
            Get the localization state of the specified content.
            </summary>
            <param name="contentId">Id of the content</param>
            <param name="contentData">ContentData object of the content specified</param>
            <returns>Localization state e.g., Ready for translation, Not ready for translation, Do not translate, Needs translation, Out for translation, Translated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.GetContentLocalizationState(System.Int64,Ektron.Cms.ContentData,System.Int32@,System.DateTime@)">
            <summary>
            Get the localization state of the specified content.
            </summary>
            <param name="contentId">Id of the content</param>
            <param name="contentData">ContentData object of the content specified</param>
            <param name="sourceLanguage">If content is a translation (or will be), sourceLanguage is the original language, otherwise -1</param>
            <param name="sourceDateModified">If content has been translated, the date the original source was last edited, otherwise DateTime.MinValue</param>
            <returns>Localization state e.g., Ready for translation, Not ready for translation, Do not translate, Needs translation, Out for translation, Translated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.GetLocalizationObjectList(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Gets a list of localization object data given object information
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object</param>
            <returns>List of localization object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.GetObjectLanguages(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64)">
            <summary>
            Gets the list of languages that exist for the given CMS object
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <returns>A list of locale IDs</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.MarkReadyForTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as ready to be localized.
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="sourceLanguage">Language of the object</param>
            <returns>ID of the "mark"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.MarkNotReadyForTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as NOT ready to be localized. Published content is always considered ready for translation.
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object</param>
            <returns>ID of the "mark"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.MarkDoNotTranslate(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as do NOT translate. 
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object</param>
            <returns>ID of the "mark"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.MarkNeedsTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32,System.Int32)">
            <summary>
            Marks an object, e.g., content, as existing in the target language, but needs to be localized. 
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="targetLanguage">Language of the object needing translation, i.e., the target language</param>
            <param name="sourceLanguage">Original language of the object</param>
            <returns>Returns an ID to the database record of the "marking"</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.MarkNeedsTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks an object, e.g., content, as existing in the target language, but needs to be localized. 
            </summary>
            <param name="objectType">Type of the object, e.g., content, form, taxonomy</param>
            <param name="objectId">ID of the object</param>
            <param name="objectLanguage">Language of the object needing translation, i.e., the target language</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.MarkOutForTranslation(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks that an object (for a given target language) is currently being translated
            </summary>
            <param name="objectType">The Localizable Cms Object Type</param>
            <param name="objectId">The ID of the object</param>
            <param name="objectLanguage">The target locale of the object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.MarkTranslated(Ektron.Cms.Localization.LocalizableCmsObjectType,System.Int64,System.Int32)">
            <summary>
            Marks that an object (for a given target language) has been translated
            </summary>
            <param name="objectType">The Localizable Cms Object Type</param>
            <param name="objectId">The ID of the object</param>
            <param name="objectLanguage">The target locale of the object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Localization.LocalizationObject.Delete(System.Int64)">
            <summary>
            Deletes the LocalizationObject record from the database
            </summary>
            <param name="id">The record ID as LocalizationObjectData.Id or returned by MarkReadyForTranslation or MarkNeedsTranslation</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Localization.LocalizationObject.Service">
            <summary>
            Gets ILocalizationObject instance
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Organization.TaxonomyItemManager">
            <summary>
            Framework API for managing taxonomy items within the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyItemManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyItemManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor with api mode
            </summary>
            <param name="mode">Api mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyItemManager.Add(Ektron.Cms.TaxonomyItemData)">
            <summary>
            Adds a new taxonomy item.
            </summary>
            <param name="taxonomyData">The TaxonomyItemData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyItemManager.Update(Ektron.Cms.TaxonomyItemData)">
            <summary>
            Updates an existing taxonomy item.
            </summary>
            <param name="taxonomyData">The TaxonomyItemData object to upate.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyItemManager.Delete(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.TaxonomyItemType)">
            <summary>
             Deletes an existing taxonomy item.
            </summary>
            <param name="taxonomyId">The taxonomy id of the item to be deleted</param>
            <param name="taxonomyItemId">The Taxonomy item Id to be deleted</param>
            <param name="type">The item taxonomy type to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyItemManager.Reorder(System.Int64,System.Int64,System.Int32,Ektron.Cms.Common.EkEnumeration.TaxonomyReorderItemType,System.Boolean)">
            <summary>
            Reorder the Taxonomy Items     
            </summary>
            <param name="taxonomyId">Id for taxonomy </param>
            <param name="position">Position to reorder </param>
            <param name="itemId">Id for Item </param>
            <param name="itemType">Type of an Items (Content or users)</param>
            <param name="forAllLanguages">Reorder For All Languages</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyItemManager.GetList(Ektron.Cms.Organization.TaxonomyItemCriteria)">
            <summary>
            Returns a list of all taxonomy items based upon the criteira supplied.
            </summary>
            <param name="criteria">The criteria to filter taxonomy items on.</param>
            <returns>List with the retrieved TaxonomyItemData objects</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Organization.TaxonomyItemManager.TaxonomyService">
            <summary>
            TaxonomyService.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Organization.TaxonomyManager">
            <summary>
            API for Managing Taxonomy and taxonomy nodes in the CMS.  If intent is to retrieve CMS items that have been categorized in Taxonomies, use TaxonomyItemManager.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor with Api mode
            </summary>
            <param name="mode">Api mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.UpdateTaxonomyConfigurations(System.Int64,System.Collections.Generic.List{Ektron.Cms.Common.EkEnumeration.TaxonomyConfiguration})">
            <summary>
            Updates configuration list for a given taxonomy.  The configuration list determines what types of items can be assigned to a Taxonomy.
            </summary>
            <param name="taxonomyId">taxonomy id that will be updated</param>
            <param name="configurationList">List of TaxonomyConfigurations to apply for update</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.Add(Ektron.Cms.TaxonomyData)">
            <summary>
            Adds a new Taxonomy or Taxonomy Node to the CMS.
            </summary>
            <param name="taxonomyData"> The taxonomyData to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.Delete(System.Int64)">
            <summary>
             Deletes a taxonomy from the CMS based on taxonomy Id
            </summary>
            <param name="taxonomyId"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.Update(Ektron.Cms.TaxonomyData)">
            <summary>
            Update a taxonomy in the CMS based on taxonomy Id
            </summary>
            <param name="taxonomyData"></param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.GetItem(System.Int64)">
            <summary>
            Returns a taxonomy node based on taxonomy Id.  Only returns the node itself.  To retrieve child items, use GetTree().
            </summary>
            <param name="id">ID of taxonomy node to return.</param>
            <returns>Taxonony Data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.GetItem(System.String)">
            <summary>
            Returns a taxonomy node based on taxonomy path.  Only returns the node itself.  To retrieve child items, use GetTree().
            </summary>
            <param name="path">Path of taxonomy node to return.</param>
            <returns>Taxonony Data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.GetTree(System.Int64,System.Int32,System.Boolean,Ektron.Cms.PagingInfo,Ektron.Cms.Common.EkEnumeration.TaxonomyType,Ektron.Cms.Common.EkEnumeration.TaxonomyItemsSortOrder)">
            <summary>
            Returns a taxonomy tree based on taxonomy Id.
            </summary>
            <param name="depth">Taxonomy tree depth</param>
            <param name="includeItems">Sets whether the taxonomy items are included</param>
            <param name="pagingInfo">Sets paging info</param>
            <param name="type">Taxonomy type</param>
            <returns>Taxonony Data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.GetTree(System.String,System.Int32,System.Boolean,Ektron.Cms.PagingInfo,Ektron.Cms.Common.EkEnumeration.TaxonomyType,Ektron.Cms.Common.EkEnumeration.TaxonomyItemsSortOrder)">
            <summary>
            Returns a taxonomy tree based on taxonomy path
            </summary>
            <param name="taxonomyPath">Path of the requestes taxonomy</param>
            <param name="depth">Taxonomy tree depth</param>
            <param name="includeItems">Sets whether the taxonomy items are included</param>
            <param name="pagingInfo">Sets paging info</param>
            <param name="type">Taxonomy type</param>
            <returns>Taxonony Data object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.Reorder(System.Int64,System.Int32,System.Boolean)">
            <summary>
             Reorder the taxonomy category based on taxonomy id
            </summary>
            <param name="taxonomyId"></param>
            <param name="position"></param>
            <param name="forAllLanguages"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.GetList(Ektron.Cms.Organization.TaxonomyCriteria)">
            <summary>
            Returns a list of all taxonomies based upon criteira supplied.
            </summary>
            <param name="criteria">criteria to base the filter on</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.GetList(Ektron.Cms.Organization.TaxonomyCustomPropertyCriteria)">
            <summary>
            Returns a list of all taxonomies based upon Custom Property Criteria supplied.
            </summary>
            <param name="criteria">criteria to base the filter on</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.GetTaxonomyConfigurationList(System.Int64)">
            <summary>
            Gets a list of Taxonomy Configurations for a given Taxonomy. Taxonomy Configurations determine what type of CMS objects can be assigned to a Taxonomy.
            </summary>
            <param name="taxonomyId">ID of taxonomy to retrieve configurations for.</param>
            <returns>List of Taxonomy Configuration enumerations.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.ImportTaxonomy(System.String,System.String)">
            <summary>
            Creates a taxonomy using XML file.
            </summary>
            <param name="taxonomyXml">The XML being used to create a taxonomy.</param>
            <param name="title">The title for the new taxonomy.</param>
            <returns>Returns a numeric ID for the newly created taxonomy.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.TaxonomyManager.MoveTaxonomy(System.Int64,System.Int64)">
            <summary>
            Move the taxonomy with items from one to another at any level
            </summary>
            <param name="sourceTaxonomyId">Source Taxonomy Id</param>
            <param name="destinationTaxonmyId">Target Taxonomy Id</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Organization.TaxonomyManager.TaxonomyService">
            <summary>
            Taxonomy Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.SocialNetworking.MicroMessage">
            <summary>
            Micromessage class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">API mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.MicroMessageProperty})">
            <summary>
            Gets data from the database using the criteria object.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.GetUserMessageList(Ektron.Cms.PagingInfo,System.Int64)">
            <summary>
            Gets a list of messages that the user has sent.
            </summary>
            <param name="paging"></param>
            <param name="userId"></param>
            <returns>Returns a list of for the user messages.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.GetTimeLineMessageList(Ektron.Cms.PagingInfo)">
            <summary>
            Gets a filtered list of messages that the requesting user can see. The list includes public and colleagues messages.
            </summary>
            <param name="paging"></param>
            <returns>Returns a list of for the user messages.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.GetTimeLineMessageList(Ektron.Cms.PagingInfo,System.Int64)">
            <summary>
            Gets a filtered list of messages that the requesting user can see. The list includes public and colleagues messages.
            </summary>
            <param name="paging"></param>
            <param name="callerUserId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.GetColleagueMessageList(Ektron.Cms.PagingInfo)">
            <summary>
            Gets a list of only colleagues Messages.
            </summary>
            <param name="paging"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.GetColleagueMessageList(Ektron.Cms.PagingInfo,System.Int64)">
            <summary>
            Gets a list of only colleagues Messages.
            </summary>
            <param name="paging"></param>
            <param name="callerUserId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.GetItem(System.Int64)">
            <summary>
            Gets a single record from the database.
            </summary>
            <param name="id">The id of the message.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.GetSearchList(Ektron.Cms.PagingInfo,System.String)">
            <summary>
            Gets the search results for test search.
            </summary>
            <param name="paging"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.IsFullTextSearchInstalled">
            <summary>
            Checks if full text search is installed on the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.Add(Ektron.Cms.MicroMessageData)">
            <summary>
            Adds a new message.
            </summary>
            <param name="data">The micro message data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.Delete(System.Int64)">
            <summary>
            Deletes a record from the database.
            </summary>
            <param name="Id">The id of the message to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.GetReplyList(System.Int64)">
            <summary>
            Gets a list of replies for a Message.
            </summary>
            <param name="parentMessageId">The id of the message that has replies.</param>
            <returns>Returns a list of replies for the message. </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.AddReply(System.Int64,System.String)">
            <summary>
            Adds a new reply. 
            </summary>
            <param name="parentMessageId">The id of the message to add a reply to.</param>
            <param name="messageText">The text of the reply</param>
        </member>
        <member name="M:Ektron.Cms.Framework.SocialNetworking.MicroMessage.IsSpam(Ektron.Cms.Common.EkEnumeration.MicroMessageSpamControlType,System.Int32,Ektron.Cms.MicroMessageData)">
            <summary>
            IsSpam method
            </summary>
            <param name="spamControlType">spamControlType</param>
            <param name="SpamTimeSpan">SpamTimeSpan</param>
            <param name="data">data</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Notifications.NotificationAgentSetting">
            <summary>
            Api class for managing settings for Notification Agent settings.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.Add(Ektron.Cms.Notifications.NotificationAgentData)">
            <summary>
            Adds a new notification agent to the system.
            </summary>
            <param name="agentData">Agent settings to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.Update(Ektron.Cms.Notifications.NotificationAgentData)">
            <summary>
            Updates an existing notification agent settings.
            </summary>
            <param name="agentData">Agent settings to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.Delete(System.Int64)">
            <summary>
            Deletes a notification agent settings from the CMS.
            </summary>
            <param name="id">Id of agent to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.GetItem(System.Int64)">
            <summary>
            Retrieves a notifcation agent setting object.
            </summary>
            <param name="id">Id of agent to retrieve settings for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Notifications.NotificationAgentProperty})">
            <summary>
            Retrieves a list of Notification Agent settings in the CMS based upon the supplied criteria.
            </summary>
            <param name="criteria">criteira by which to retrieve agent settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.GetAgent(System.Int64)">
            <summary>
            Returns actual NotificationAgent based upon Agent Id.
            </summary>
            <param name="id">Id of agent to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.GetRegisteredAgentList">
            <summary>
            Retrieves a list of the Notification Agents registered in the web.config.
            </summary>
            <returns>a list of notification agent </returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Notifications.NotificationAgentSetting.AgentSettingService">
            <summary>
            Agent Setting Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.WebServices.NotificationService">
            <summary>
            Summary description for NotificationService
            </summary>
        </member>
        <member name="M:Ektron.Cms.WebServices.NotificationService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.WebServices.NotificationService.Send(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Send method
            </summary>
            <param name="activity">activity object</param>
        </member>
        <member name="M:Ektron.Cms.WebServices.NotificationService.ProcessActivityReply(System.Guid,System.String,System.String)">
            <summary>
            Process Activity Reply
            </summary>
            <param name="activityGuid">Activity guid</param>
            <param name="reply">reply string</param>
            <param name="fromEmail">from email string</param>
        </member>
        <member name="M:Ektron.Cms.WebServices.NotificationService.ProcessActivityReplyAttachment(System.Guid,System.String,System.String,System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="activityGuid"></param>
            <param name="reply"></param>
            <param name="fromEmail"></param>
            <param name="document"></param>
            <param name="documentName"></param>
        </member>
        <member name="M:Ektron.Cms.WebServices.NotificationService.ProcessGroupEmail(System.Int64,System.String,System.String)">
            <summary>
            Process group email and post email to group messageboard
            </summary>
            <param name="communityGroupId">Id of communityGroup to add post to.</param>
            <param name="message">Message to post to group.</param>
            <param name="fromEmail">Email address sending message</param>
        </member>
        <member name="M:Ektron.Cms.WebServices.NotificationService.ProcessGroupEmailAttachment(System.Int64,System.String,System.String,System.Byte[],System.String)">
            <summary>
            Process group email to add emailed documents to group workspace.
            </summary>
            <param name="communityGroupId">Id of communityGroup to add document to.</param>
            <param name="message">Message to post to group.</param>
            <param name="fromEmail">Email address sending message</param>
            <param name="document">Document as byte array</param>
            <param name="documentName">Name of document - becomes content title</param>
        </member>
        <member name="T:Ektron.Cms.Framework.Organization.CollectionManager">
            <summary>
            Collection Manager
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.Add(Ektron.Cms.Organization.ContentCollectionData)">
            <summary>
            Adds a new content collection based on information in an ContentCollectionData object. 
            message.
            </summary>
            <param name="contentCollectionData">The ContentCollectionData object to add.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.Update(Ektron.Cms.Organization.ContentCollectionData)">
            <summary>
            Updates an existing content collection in the CMS.
            </summary>
            <param name="contentCollectionData">The ContentCollectionData object to update.</param>
            <returns>Returns the custom CmsData object update</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.Delete(System.Int64)">
            <summary>
            Deletes a content collection in the CMS.
            </summary>
            <param name="id">The ID of the content collection to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.AddContent(System.Int64,System.Int64)">
            <summary>
            Adds a content to a collection
            </summary>
            <param name="collectionId">The ID of the content collection</param>
            <param name="contentId">The ID of the content</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.DeleteContent(System.Int64,System.Int64)">
            <summary>
            Deletes a content from a collection
            </summary>
            <param name="collectionId">The ID of the content collection</param>
            <param name="contentId">The ID of the content</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.UpdateItemOrder(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Updates the contents from a collection
            </summary>
            <param name="collectionId">The ID of the content collection</param>
            <param name="contentIdlist">The IDs of the contents</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.GetItem(System.Int64)">
            <summary>
            Retrieves a single ContentCollectionData object from the CMS.
            </summary>
            <param name="id">The ID of the content collection to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.CollectionManager.GetList(Ektron.Cms.CollectionCriteria)">
            <summary>
            Retrieves a list of ContentCollectionData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve content collections.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Organization.CollectionManager.CollectionManagerService">
            <summary>
            returns an instance of the business objects task manager service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Organization.FolderManager">
            <summary>
            FolderManager Framework class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.Add(Ektron.Cms.FolderData)">
            <summary>
            Adds a new folder based on information in an FolderData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="folderData">The FolderData object to add.</param>
            <returns>Added FolderData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.Update(Ektron.Cms.FolderData)">
            <summary>
            Updates an existing folder in the CMS.
            </summary>
            <param name="folderData">The FolderData object to update.</param>
            <returns>Updated FolderData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.Delete(System.Int64)">
            <summary>
            Deletes a folder in the CMS.
            </summary>
            <param name="folderId">The ID of the folder to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.AssignMetadata(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Assign a metadataType to a Folder
            </summary>
            <param name="folderId">The ID of the folder</param>
            <param name="metadataTypeId">The ID of the metadata type</param>
            <param name="isRequired">indicates if is required</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.AssignMetadata(System.Int64,System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            Assign a metadataType list to a Folder
            </summary>
            <param name="folderId">The ID of the folder</param>
            <param name="metadataTypeIdList">List of metadata type id</param>
            <param name="isRequired">indicates if is required</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.UnassignMetadata(System.Int64,System.Int64)">
            <summary>
            Unassign a metadataType to a Folder
            </summary>
            <param name="folderId">The ID of the folder</param>
            <param name="metadataTypeId">The ID of the metadata type</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.AllowTaxonomy(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Allows these taxonomies to be assigned to content items in the supplied folder.
            </summary>
            <param name="folderId">Folder Id to allow Taxonomies to</param>
            <param name="taxonomyIdList">List of Taxonomies IDs</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.EnableTaxonomy(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Enables these taxonomies to be assigned to content items in the supplied folder.
            </summary>
            <param name="folderId">Folder Id to allow Taxonomies to</param>
            <param name="taxonomyIdList">List of Taxonomies IDs</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.DisableTaxonomy(System.Int64,System.Int64)">
            <summary>
            Disables the supplied taxonomy to be used on content in the folder.
            </summary>
            <param name="folderId">The folder id.</param>
            <param name="taxonomyId">The taxonomy id.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.UnallowTaxonomy(System.Int64,System.Int64)">
            <summary>
            Disallows the supplied taxonomy to be used on content in the folder.
            </summary>
            <param name="folderId">The folder id.</param>
            <param name="taxonomyId">The taxonomy id.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.LinkTaxonomy(System.Int64,System.Int64)">
            <summary>
            Links the supplied taxonomy to supplied folder.  All content in the folder will be automatically assigned to the given taxonomy.
            </summary>
            <param name="folderId">The folder id.</param>
            <param name="taxonomyId">The taxonomy id.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.UnlinkTaxonomy(System.Int64,System.Int64)">
            <summary>
            Unlink the supplied folder from the supplied taxonomy.  All content in the folder will be automatically unassigned from the given taxonomy.
            </summary>
            <param name="folderId">The folder id.</param>
            <param name="taxonomyId">The taxonomy id.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.UnAssignTemplate(System.Int64,System.Int64)">
            <summary>
            UnAssign the template from the folder
            </summary>
            <param name="folderId"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.Purge(System.Int64,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Purge the content history values for the folder till the specified date criteria
            </summary>
            <param name="folderId">FolderId in which the content history is purge</param>
            <param name="purgeDate">Till this date the content history will be purged</param>
            <param name="isRecursive">Include the child folder</param>
            <param name="includePublished">Include the published content to purged</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.MoveFolder(System.Int64,System.Int64,System.Boolean)">
            <summary>
             Move the folder from existing parent folder to another parent folder
            </summary>
            <param name="sourceFolderId">Folder Id to be moved</param>
            <param name="destinationFolderId">New Parent folder Id  to move the source folder</param>
            <param name="breakInheritance">Break the existing inheritance</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.CopyFolder(System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
             Copy the folder from one parent folder to another parent folder
            </summary>
            <param name="sourceFolderId">Folder Id to be moved</param>
            <param name="destinationFolderId">New Parent folder Id  to move the source folder</param>
            <param name="breakInheritance">Break the existing inheritance</param>
            <param name="copyItems">Copy the folder with all the items</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.GetAssignedTaxonomy(System.Int64)">
            <summary>
            Retrieves a list of Taxonomy data assigned to a given folder
            </summary>
            <param name="folderId">folder id to retrieve taxonomy data for</param>
            <returns>List of TaxonomyData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.GetAssignedFolders(System.Int64)">
            <summary>
            Retrieves the list of folders assigned to the given taxonomy
            </summary>
            <param name="taxonomyId">TaxonomyId</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.GetItem(System.Int64,System.Boolean)">
            <summary>
            Retrieves a single FolderData object from the CMS.
            </summary>
            <param name="folderId">The ID of the folder to retrieve.</param>
            <param name="returnChildProperties">indicates if child properties are returned.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.GetTree(System.Int64)">
            <summary>
            
            </summary>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.GetList(Ektron.Cms.FolderCriteria)">
            <summary>
            Retrieves a list of FolderData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve folders.</param>
            <returns>List with retrieved FolderData items</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.IsCommunityFolder(System.Int64)">
            <summary>
            Returns true if the folder is a Community Folder
            </summary>
            <param name="folderId"></param>
            <returns>True if the folder is a Community Folder </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.GetAssignedMetadata(System.Int64)">
            <summary>
             Returns a list of content metadata assigned to a given folder.
            </summary>
            <param name="folderId">Folder id is to retrieve metadata for </param>
            <returns>List with retrieved content metadata items</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Organization.FolderManager.GetSitemapPath(System.Int64)">
            <summary>
            Returns the specified sitemappath object for a given folder.  To get sitemappaths in different languages, change the manager's ekRequestInformation Language.
            </summary>
            <param name="folderId">The folder id to retrieve the path for.</param>
            <returns>A list of SitemapPath data objects in order by oderlocation in the database.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Organization.FolderManager.FolderService">
            <summary>
            Gets instance to IFolder.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.User.UserGroupManager">
            <summary>
            Framework API class for managing User Groups withing the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.Add(Ektron.Cms.UserGroupData)">
            <summary>
            Adds a new UserGroup, with details from the supplied UserGroupData object.
            </summary>
            <param name="userGroup">The UserGroupData object to add to the CMS.</param>
            <returns>Added UserGroupData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.Update(Ektron.Cms.UserGroupData)">
            <summary>
            Updates a UserGroup, with details from the supplied UserGroupData object.
            </summary>
            <param name="userGroup">The UserGroupData object to update in the CMS</param>
            <returns>Updated UserGroupData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.Delete(System.Int64)">
            <summary>
            Deletes an existing UserGroup.
            </summary>
            <param name="id">the identifier of the userGroup to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.AddUser(System.Int64,System.Int64)">
            <summary>
            Adds a user to a group
            </summary>
            <param name="groupId">The identifier of the group</param>
            <param name="userId">The identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.DeleteUser(System.Int64,System.Int64)">
            <summary>
            Deletes a user from a group
            </summary>
            <param name="groupId">the identifier of the group</param>
            <param name="userId">the identifier of the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.GetItem(System.Int64)">
            <summary>
            Returns details of a UserGroup.
            </summary>
            <param name="id">Identifier of the UserGroup to get</param>
            <returns>UserGroup details in a UserGroupData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.GetList(Ektron.Cms.UserGroupCriteria)">
            <summary>
            Returns a list of UserGroups that fit the supplied criteria.
            </summary>
            <param name="criteria">Used to specify, or filter, the UserGroups to return</param>
            <returns>A list of UserGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.IsUserInGroup(System.Int64,System.Int64)">
            <summary>
            Determines if the user is in the specified group
            </summary>
            <param name="userId">Identifier of the User</param>
            <param name="groupId">Identifier of the UserGroup</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.GetListForUser(System.Int64,Ektron.Cms.Common.EkEnumeration.GroupOrderBy)">
            <summary>
            Returns all the groups to which user belongs
            </summary>
            <param name="userId">the identifier of the User</param>
            <param name="orderBy">Indicates the group order</param>
            <returns>a list of UserGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.GetListForUser(System.Int64,Ektron.Cms.UserGroupCriteria)">
            <summary>
            Returns all the groups to which user belongs
            </summary>
            <param name="userId">the identifier of the User</param>
            <param name="criteria">used to specify, or filter, the UserGroups to return</param>
            <returns>a list of UserGroups</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserGroupManager.GetUserList(System.Int64)">
            <summary>
            Returns list of users that belongs to the user group.
            </summary>
            <param name="groupId">The identifier of the user group.</param>
            <returns>A list of users</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.User.UserGroupManager.UserGroupService">
            <summary>
            Returns an instance of the business objects user service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.User.UserManager">
            <summary>
            Framework API class for managing Users withing the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.Add(Ektron.Cms.UserData)">
            <summary>
            Adds a new user, with details from the supplied UserData object.
            </summary>
            <param name="userData">The UserData object to add to the CMS.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.Update(Ektron.Cms.UserData)">
            <summary>
            Updates a user, with details from the supplied UserData object.
            </summary>
            <param name="userData">The UserData object to update in the CMS.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.Delete(System.Int64)">
            <summary>
            Deletes an existing user.
            </summary>
            <param name="id">The identifier of the user to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.LockUser(System.Int64)">
            <summary>
            Lock the userAccount by userId
            </summary>
            <param name="userId">Identifier of the User</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.UnlockUser(System.Int64)">
            <summary>
            UnLock the userAccount by userId
            </summary>
            <param name="userId">Identifier of the User</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.AssignTaxonomy(System.Int64,System.Int64)">
            <summary>
            Assign User Taxonomy to a Category
            </summary>
            <param name="userId">Identifier of the User</param>
            <param name="categoryId">Identifier of the Category</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.RemoveTaxonomy(System.Int64,System.Int64)">
            <summary>
            Remove User Taxonomy to a Category
            </summary>
            <param name="userId">Identifier of the User</param>
            <param name="categoryId">Identifier of the Category</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.ActivateUserAccount(System.String,System.String)">
            <summary>
            Activates a deactivated user into the
            current/active state using the userName and accountId)
            </summary>
            <param name="userName">The login userName for the user</param>
            <param name="accountId">The accountId for the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.ActivateUserAccount(System.Int64)">
            <summary>
            Activates a deactivated user into the current/active state using the userId.
            </summary>
            <param name="userId">A unique userId to activate.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.ActivateUserAccounts(System.Collections.Generic.List{System.Int64})">
            <summary>
            Activates the deactivated users into the current/active state using the userIds.
            </summary>
            <param name="userIds">The List of userIds to activate.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.GetItem(System.Int64)">
            <summary>
            Returns details of a user without custom properties.
            </summary>
            <param name="id"></param>
            <returns>User details in a UserData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.GetItem(System.Int64,System.Boolean)">
            <summary>
            Returns details of a user.
            </summary>
            <param name="id">The identifier of the user to get</param>
            <returns>User details in a UserData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.GetItem(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Returns details of a user.
            </summary>
            <param name="id">The identifier of the user to get</param>
            <param name="includeCustomProperties">indicates if get custom properties</param>
            <returns>User details in a UserData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.GetItem(System.Int64,System.String)">
            <summary>
            Returns details of a user based upon an authentication type and authentication user id.  Authentication Types represent third party integrations for authenticating users.
            For example, Authentication Type Id = 1  is Facebook integration and the authenticationUserId in this case would be the users facebook ID.
            so GetItem(1, '1111111111') would return the cms user who logs in Via facebook and has the facebook ID '1111111111'.
            </summary>
            <param name="authenticationTypeId">ID of authentication type user is associated with</param>
            <param name="authenticationUserId">ID of user based on authentication type.</param>
            <returns>User details in a UserData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.GetList(Ektron.Cms.User.UserCriteria)">
            <summary>
            Returns a list of users that fit the supplied criteria.
            </summary>
            <param name="criteria">Used to specify, or filter, the users to return</param>
            <returns>A list of users</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.GetList(Ektron.Cms.User.UserCustomPropertyCriteria)">
            <summary>
            Returns a list of users that fit the supplied criteria.
            </summary>
            <param name="criteria">Used to specify, or filter, the users to return</param>
            <returns>A list of users</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.GetList(Ektron.Cms.User.UserTaxonomyCriteria)">
            <summary>
            Returns the list of users that based on the User Taxonomy Criteria.
            </summary>
            <param name="criteria">UserTaxonomyCriteria</param>
            <returns>A list of users</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.CanViewUsersProfile(System.Int64,System.Int64)">
            <summary>
            Returns true if the viewer (viewerId) can view the other users profile (userid).
            </summary>
            <param name="userId">ID of user's profile to view.</param>
            <param name="viewerId">ID of user trying to view profile.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.GetCustomPropertyList">
            <summary>
            Gets the list of all user custom properties.
            </summary>
            <returns>CustomAttributeList</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.Login(System.String,System.String,System.String)">
            <summary>
            Logs in a user.
            </summary>
            <param name="userName">Username of user to login.</param>
            <param name="password">User's password</param>
            <param name="domain">Name of domain the user is logging in to. This parameter is only applicable for AD and LDAP configurations</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.Login(System.Int64,System.String)">
            <summary>
            Logs in a user based upon an authentication type and authentication user id.  This will logthe user in automatically, and assumes the user has already been authenticated.
            </summary>
            <param name="authenticationTypeId">ID of authentication type user is associated with</param>
            <param name="authenticationUserId">ID of user based on authentication type.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.Logout">
            <summary>
            Log out the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.Authenticate(System.String,System.String)">
            <summary>
            Returns an authentication token that can be used to authenticate the user.
            </summary>
            <param name="userName">The username of user to validate</param>
            <param name="password">The user's password</param>
            <returns>An authentication token</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.Authenticate(System.String,System.String,System.String)">
            <summary>
            Returns an authentication token that can be used to authenticate the user.
            </summary>
            <param name="userName">The username of user to validate</param>
            <param name="password">The user's password</param>
            <param name="domain">The domain to validate</param>
            <returns>An authentication token</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.ResetPassword(System.String,System.Int64)">
            <summary>
            Reset's the membership user password by user name and message id
            </summary>
            <param name="userName">Username of the user</param>        
            <param name="messageId">Message Id for EmailReply</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.ResetPassword(System.String,System.String,System.String)">
            <summary>
            Reset's the user password by user name ,old password and new password
            </summary>
            <param name="userName">Username of the user</param>
            <param name="oldPassword">Old password of the user</param>
            <param name="newPassword">New password of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.ValidatePassword(System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.User.UserManager.GetRandomPasswordforDefaultRegex">
            <summary>
            
            </summary>
            <returns>Returns random generated password string</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.User.UserManager.UserService">
            <summary>
            returns an instance of the business objects user service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient">
            <summary>
            Currency Service Client for WCF
            </summary>    
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.Add(Ektron.Cms.Commerce.CurrencyData)">
            <summary>
            Adds a new Currency to Cms. The Currency.Id property will be populated with the new Currency's Id.
            </summary>
            <param name="currencyData">Currency data object to be added.</param>
            <returns>Currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.Update(Ektron.Cms.Commerce.CurrencyData)">
            <summary>
            Updates an existing currency in Cms.
            </summary>
            <param name="currencyData">Currency data object to be updated.</param>
            <returns>Currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.Delete(System.Int32)">
            <summary>
            Deletes a currency from the Cms.
            </summary>
            <param name="id">Id of currency to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.GetItem(System.Int32)">
            <summary>
            Retrieves a currency by currency Id.
            </summary>
            <param name="id">Id of currency to be retrieved.</param>
            <returns>Currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Commerce.CurrencyProperty})">
            <summary>
            Retrieves a list of currencies.
            </summary>
            <param name="criteria">Criteria by which to filter currency being retrieved.</param>
            <returns>List of currencies meeting criteria filters.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.GetDefaultCurrency">
            <summary>
            Return default Currency
            </summary>
            <returns>Default currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.GetCurrentCurrency">
            <summary>
            Gets Current Currency
            </summary>
            <returns>Current currency data object.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.GetActiveCurrencyList">
            <summary>
            Gets active Currency List
            </summary>
            <returns>List of active currencies.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Commerce.CurrencyServiceClient.CanDelete(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults@)">
            <summary>
            Checks to see if a currency can be deleted.
            </summary>
            <param name="currencyId">Id of currency to delete.</param>
            <param name="result">ValidationResult returned containing errors if currency cannot be deleted.</param>
            <returns>true if currency can safely be deleted.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Content.ContentServiceClient">
            <summary>
            Content Service Client 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication token
            </summary>
            <param name="authenticationToken"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.Add(Ektron.Cms.ContentData)">
            <summary>
            Adds a new piece of content to the CMS.  contentData.Id will be populated with the Id of the new content item.
            </summary>
            <param name="contentData"> The contentData object to add to the CMS.</param>
            <returns>Returns the custom CmsData object added</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.Update(Ektron.Cms.ContentData)">
            <summary>
            Updates an existing content item in the CMS.
            </summary>
            <param name="contentData">The contentData object to update.</param>
            <returns>Returns the custom CmsData object updated</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.Save(Ektron.Cms.ContentData)">
            <summary>
            Saves an existing content item in the CMS.
            </summary>
            <param name="contentData">The contentData object to save.</param>
            <returns>Returns the custom CmsData object saved</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing content item from the CMS.
            </summary>
            <param name="id">The ID of the content to be deleted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.Checkout(System.Int64)">
            <summary>
            Checks out a content item
            </summary>
            <param name="contentId">ID of the content item to be checked out.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.CheckIn(System.Int64)">
            <summary>
            Checks in a content item.
            </summary>
            <param name="contentId">ID of the content item to be checked in.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.Submit(System.Int64)">
            <summary>
            Submits a content item for publishing.
            </summary>
            <param name="contentId">ID of the content item to be submitted.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.Cancel(System.Int64)">
            <summary>
            Undo the last changes of the content
            </summary>
            <param name="contentId">Content Id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.AssignTaxonomy(System.Int64,System.Int64)">
            <summary>
            Assigns a Content item to a Taxonomy category.
            </summary>
            <param name="contentId">ID of the Content item to assign to a category.</param>
            <param name="categoryId">ID of the Taxonomy Category to assign content to.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.RemoveTaxonomy(System.Int64,System.Int64)">
            <summary>
            Removes a Content item from a Taxonomy category.
            </summary>
            <param name="contentId">ID of the Content item to remove from category.</param>
            <param name="categoryId">ID of the Taxonomy Category to remove content from.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.MoveContent(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            Move content from one folder to another folder that specified as folderid
            </summary>
            <param name="contentIds">List of content Ids to moved</param>        
            <param name="folderId">Id of the folder to hold the content</param>        
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.CopyContent(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Copy content from one folder to another folder that specified as folderid
            </summary>
            <param name="contentId"></param>
            <param name="folderId"></param>
            <param name="languageId"></param>
            <param name="isPublish"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.GetItem(System.Int64,System.Boolean)">
            <summary>
            Retrieves a single content item by ID.
            </summary>
            <param name="id">The ID of the content to retrieve.</param>
            <param name="returnMetadata">Flag indicating whether or not ContentMetadata should also be retreived with the content item.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.GetList(Ektron.Cms.Content.ContentCriteria)">
            <summary>
            Retrieves a list of content based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns>List of ContentData objects matching the supplied criteria.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.Ektron#Cms#Content#IContentManager#GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.ContentProperty})">
            <summary>
            Retrieves a list of content based on the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns>List of ContentData objects matching the supplied criteria.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.GetList(Ektron.Cms.Content.ContentMetadataCriteria)">
            <summary>
            Retrieves a list of content based on metadata criteria.
            </summary>
            <param name="criteria">Metadata criteria used to retrieve content.</param>
            <returns>List of ContentData objects matching the supplied criteria.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.GetList(Ektron.Cms.Content.ContentTaxonomyCriteria)">
            <summary>
            Retrieves a list of content based on taxonomy criteria.
            </summary>
            <param name="criteria">taxonomy criteria used to retrieve content.</param>
            <returns>List of ContentData objects matching the supplied criteria.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.GetList(Ektron.Cms.Content.ContentCollectionCriteria)">
            <summary>
            Retrieves a list of content based on collection criteria. Use this method to retreive content based upon Collections the content is in.
            </summary>
            <param name="criteria">Content collection criteria used to retrieve content by collections.</param>
            <returns>List of ContentData objects matching the supplied criteria.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.GetAssignedTaxonomyList(System.Int64,System.Int32)">
            <summary>
            Retrieves a list of Category/Taxonomy Data that a given content is assigned to.
            </summary>
            <param name="contentId">The content you wish to find all assigned taxonomy for.</param>
            <param name="languageId">The content's language.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.GetContentByHistoryId(System.Int64)">
            <summary>
            Retrieves the corresponding content by the history ID.
            </summary>
            <param name="historyId">The history ID</param>
            <returns>Ektron.Cms.ContentData</returns>
            <remarks>Read permission required.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Content.ContentServiceClient.GetHistoryList(System.Int64)">
            <summary>
            Retrieves a list of ContentHistoryData objects based on Content Id.
            </summary>
            <param name="contentId">Identifier of the Content</param>
            <returns>List of Ektron.Cms.ContentHistoryData</returns>
            <remarks>Read permission is required to perform this operation.</remarks>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.Settings.SiteServiceClient">
            <summary>
             Site service client class for WCF layer
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SiteServiceClient.#ctor">
            <summary>
            Constrcutor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SiteServiceClient.#ctor(System.String)">
            <summary>
            Constructor with authentication token for security.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SiteServiceClient.GetSiteVariableDictionary">
            <summary>
            Returns an IDictionary with Site variables
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SiteServiceClient.UpdateSiteCurrency(System.Int32)">
            <summary>
            Updates site currency
            </summary>
            <param name="defaultCurrency">integer that represents default currency</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.Settings.SiteServiceClient.IsMultiSite">
            <summary>
            Returns true if there exist any multisite folders in the database
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Services.User.UserServiceClient">
            <summary>
            UserManager Service client class for WCF layer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.#ctor(System.String)">
            <summary>
            Constructor with Authentication Token.
            </summary>
            <param name="authenticationToken">AuthenticationToken.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.Add(Ektron.Cms.UserData)">
            <summary>
            Adds a new user
            </summary>
            <param name="userData">a UserData object representing the new user to be created</param>
            <returns>The newly created user</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.Update(Ektron.Cms.UserData)">
            <summary>
            Updates an existing user
            </summary>
            <param name="userData">the user instance to be updated</param>
            <returns>The Updated User</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.Delete(System.Int64)">
            <summary>
            Deletes an existing user by ID
            </summary>
            <param name="id">The UD that identified the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.LockUser(System.Int64)">
            <summary>
            Lock the user account
            </summary>
            <param name="id">identifier of the User</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.UnlockUser(System.Int64)">
            <summary>
            UnLock the user account
            </summary>
            <param name="id">identifier of the User</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.AssignTaxonomy(System.Int64,System.Int64)">
            <summary>
            Asssign a taxonomy to a user
            </summary>
            <param name="userId">the user id</param>
            <param name="categoryId">the category id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.RemoveTaxonomy(System.Int64,System.Int64)">
            <summary>
            Remove taxonomy from user
            </summary>
            <param name="userId">the user id</param>
            <param name="categoryId">the category id</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetItem(System.Int64)">
            <summary>
            Gets an existing user by id without custom properties
            </summary>
            <param name="id"></param>
            <returns>UserData of the existing user</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetItem(System.Int64,System.Boolean)">
            <summary>
            Gets an existing user by id, optionally with custom properties.
            </summary>
            <param name="id">the id of the user</param>
            <returns>UserData of the existing user</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetItem(System.Int64,System.String)">
            <summary>
            Gets a yser by authentication Type id and authentication user ID
            </summary>
            <param name="authenticationTypeId">The authentication Type ID</param>
            <param name="authenticationUserId">The authentication User ID</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetItem(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Gets userdata by id, optionally custom properties
            </summary>
            <param name="id">The ID od the user</param>
            <param name="includeCustomProperties">Flag indicating whether custom properties should be included</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetList(Ektron.Cms.User.UserCriteria)">
            <summary>
            Gets a list of user based on a criteria object
            </summary>
            <param name="criteria">the criteria object</param>
            <returns>a list of users</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetList(Ektron.Cms.User.UserTaxonomyCriteria)">
            <summary>
            Gets a list of user based on a user taxonomy criteria object
            </summary>
            <param name="criteria">the user taxonomy criteria object</param>
            <returns>A list of users</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.Ektron#Cms#User#IUser#GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.User.UserProperty})">
            <summary>
            Gets a list of user based on a criteria object
            </summary>
            <param name="criteria">the criteria object</param>
            <returns>a list of users</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetCustomPropertyList">
            <summary>
            GetCustomPropertyList.
            </summary>
            <returns>CustomAttributeList.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.Login(System.Int64,System.String)">
            <summary>
            Gets userdata based on authenticationTypeID, authenticationUserID and a servername
            </summary>
            <param name="authenticationTypeId">The authentication Type ID</param>
            <param name="authenticationUserId">The authentication User ID</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.Login(System.String,System.String,System.String)">
            <summary>
            Login a user by name and password and servername
            </summary>
            <param name="userName">The User Name</param>
            <param name="password">The Password</param>
            <param name="domain">The domain Name you are logging in to.  This parameter is only applicable for AD and LDAP configurations.</param>
            <returns>The UserData of the logged in user</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.Logout">
            <summary>
            Log out the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticate a user by name and password
            </summary>
            <param name="userName">The User Name</param>
            <param name="password">The Password</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.Authenticate(System.String,System.String,System.String)">
            <summary>
            Authenticate a user by name, password and a domain
            </summary>
            <param name="userName">The User Name</param>
            <param name="password">The Password</param>
            <param name="domain">The Domain</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.ResetPassword(System.String,System.Int64)">
            <summary>
            Reset's the membership user password by user name and new messageId
            </summary>
            <param name="userName">Username of the User</param>        
            <param name="messageId">MessageId for EmailReply</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.ResetPassword(System.String,System.String,System.String)">
            <summary>
            Reset's the user password by user name ,old password and new password
            </summary>
            <param name="userName">Username of the user</param>
            <param name="oldPassword">Old password of the user</param>
            <param name="newPassword">New password of the user</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.ValidatePassword(System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetRandomPasswordforDefaultRegex">
            <summary>
            
            </summary>
            <returns>Returns random generated password string</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetUserTimeZone(System.Int64)">
            <summary>
            Retrieve a user's Time Zone
            </summary>
            <param name="userId">The ID of the user</param>
            <returns>a TimeZone Object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.GetItemByToken(System.String)">
            <summary>
            Get a User by Authentication Token
            </summary>
            <param name="authenticationToken">The Authentication Token</param>
            <returns>The UserData of the authenticated user</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.IsUserCommerceAdmin(System.Int64)">
            <summary>
            Returns true if the supplied userId is a commerce Admin in the CMS.
            </summary>
            <param name="userId">userId to verify as Commerce Admin.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.CanViewUsersProfile(System.Int64,System.Int64)">
            <summary>
            Returns true if the viewer (viewerId) can view the other users profile (userid).
            </summary>
            <param name="userId">ID of user's profile to view.</param>
            <param name="viewerId">ID of user trying to view profile.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.ActivateUserAccount(System.String,System.String)">
            <summary>
            Activates a deactivated user into the
            current/active state using the userName and accountId)
            </summary>
            <param name="userName">The login userName for the user</param>
            <param name="accountId">The accountId for the user</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.ActivateUserAccount(System.Int64)">
            <summary>
            Activates a deactivated user into the current/active state using the userId.
            </summary>
            <param name="userId">A unique userId to activate.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Services.User.UserServiceClient.ActivateUserAccounts(System.Collections.Generic.List{System.Int64})">
            <summary>
            Activates the deactivated users into the current/active state using the userIds.
            </summary>
            <param name="userIds">The List of userIds to activate.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Services.User.UserServiceClient.Ektron#Cms#User#IUser#IsCmsUser">
            <summary>
            Returns a flag that indicates wheather the logged in User is a CMS User
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Services.User.UserServiceClient.Ektron#Cms#User#IUser#IsMembershipUser">
            <summary>
            Returns a flag that indicates wheather the logged in user is a Membership User
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Services.User.UserServiceClient.Ektron#Cms#User#IUser#IsLoggedIn">
            <summary>
            Returns a flag that indicates wheather there is a logged in user or not
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Messaging.CmsMessage">
            <summary>
            Api class for managing Messages in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessage.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessage.Add(Ektron.Cms.Messaging.CmsMessageData)">
            <summary>
            Adds a new message based on information in an CmsMessageData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="message">The CmsMessageData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessage.Update(Ektron.Cms.Messaging.CmsMessageData)">
            <summary>
            Updates an existing message in the CMS.
            </summary>
            <param name="message">The CmsMessageData object to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessage.Delete(System.Int64)">
            <summary>
            Deletes a message in the CMS.
            </summary>
            <param name="id">The ID of the message to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessage.GetItem(System.Int64)">
            <summary>
            Retrieves a single CmsMessageData object from the CMS in the current language.
            </summary>
            <param name="id">The ID of the message to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessage.GetItemCollection(System.Int64)">
            <summary>
            Gets a single message from the CMS in all available languages.
            </summary>
            <param name="id">The ID of the message to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessage.GetDefaultItemByType(System.Int64)">
            <summary>
            Gets the default message for a given message type in the CMS.  
            All available languages of the message are returned as part of the CmsMessageDataCollection.
            </summary>
            <param name="messageTypeId">The ID of the message type to retrieve the default message for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessage.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Messaging.CmsMessageProperty})">
            <summary>
            Retrieves a list of CmsMessageData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve messages.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Messaging.CmsMessage.MessageService">
            <summary>
            Gets instance to ICmsMessage.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Messaging.CmsMessageType">
            <summary>
            Api class for managing MessageTypes in the Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessageType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessageType.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessageType.Add(Ektron.Cms.Messaging.CmsMessageTypeData)">
            <summary>
            Adds a new message type based on information in an CmsMessageTypeData object. 
            messageType.Id will be populated with the newly created ID.
            </summary>
            <param name="messageType">The CmsMessageData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessageType.Update(Ektron.Cms.Messaging.CmsMessageTypeData)">
            <summary>
            Updates an existing message type in the CMS.
            </summary>
            <param name="messageType">The CmsMessageTypeData object to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessageType.Delete(System.Int64)">
            <summary>
            Deletes a message type in the CMS.
            </summary>
            <param name="id">The ID of the message to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessageType.GetItem(System.Int64)">
            <summary>
            Retrieves a single CmsMessageTypeData object from the CMS.
            </summary>
            <param name="id">The ID of the message type to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessageType.GetList(Ektron.Cms.Messaging.CmsMessageTypeCriteria)">
            <summary>
            Retrieves a list of CmsMessageTypeData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve message types.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Messaging.CmsMessageType.GetTokenList(System.Int64)">
            <summary>
            Returns the list of applicable replacement tokens for a given MessageTypeId.
            </summary>
            <param name="messageTypeId">ID of Message Type to retrieve tokens for.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Messaging.CmsMessageType.MessageTypeService">
            <summary>
            Gets instance to ICmsMessageType.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Core.Content.Content">
            <summary>
            Content class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Content.Content.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Content.Content.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the API access mode. There are two possible values:
            * ApiAccessMode.Admin – runs the API as internal administrator. This means the API runs with administrator permissions.
            * ApiAccessMode.LoggedInUser – (default) runs the API as the currently logged in user. This means that the API fails if the user tries to do something for which he lacks permission.
            If you set ApiAccessMode to "Admin", the user is *not* Application Administrator (admin/admin), so the added content does not appear in search results nor is it displayed in activity streams when searching for content added by Admin. 
            As a workaround, you can either *not* set the access mode, or set it to "LoggedInUser."
            </param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Content.Content.Add(Ektron.Cms.ContentData)">
            <summary>
            Add's new content
            </summary>
            <param name="contentData"> The contentData object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Content.Content.Update(Ektron.Cms.ContentData)">
            <summary>
            Update content
            </summary>
            <param name="contentData"> The contentData object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Content.Content.Delete(System.Int64)">
            <summary>
            Delete content
            </summary>
            <param name="contentId"> The ID of the content to be deleted</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Content.Content.GetItem(System.Int64)">
            <summary>
            Get the content item
            </summary>
            <param name="contentId">The ID of the content to Get.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Content.Content.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.ContentProperty})">
            <summary>
            Retrieves a list based on the criteria
            </summary>
            <param name="criteria">Criteria used to retrieve content.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Core.Content.Content.ContentService">
            <summary>
            Content Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Core.Folder.Folder">
            <summary>
            Folder class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Folder.Folder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Folder.Folder.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Folder.Folder.Add(Ektron.Cms.FolderData)">
            <summary>
            Adds a new folder based on information in an FolderData object. 
            message.Id will be populated with the newly created ID.
            </summary>
            <param name="folderData">The FolderData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Folder.Folder.Update(Ektron.Cms.FolderData)">
            <summary>
            Updates an existing folder in the CMS.
            </summary>
            <param name="folderData">The FolderData object to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Folder.Folder.Delete(System.Int64)">
            <summary>
            Deletes a folder in the CMS.
            </summary>
            <param name="folderId">The ID of the folder to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Folder.Folder.GetItem(System.Int64)">
            <summary>
            Retrieves a single FolderData object from the CMS.
            </summary>
            <param name="folderId">The ID of the folder to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Core.Folder.Folder.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.FolderProperty})">
            <summary>
            Retrieves a list of FolderData objects based upon the supplied criteria.
            </summary>
            <param name="criteria">Criteria used to retrieve folders.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Core.Folder.Folder.FolderService">
            <summary>
            Gets instance to IFolder.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Notifications.Notification">
            <summary>
            Api class for sending out notifications in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.Notification.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.Notification.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.Notification.Send(Ektron.Cms.Activity.ActivityData)">
            <summary>
            Sends notifications based upon the supplied activity.
            </summary>
            <param name="activity">The activity that has occured and will result in notifications being sent.  The Activity.Message property is ignored and will be retrieved based upon CMS message settings.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.Notification.Send(Ektron.Cms.Notifications.NotificationMessageData)">
            <summary>
            Sends notifications based upon supplie dnotification message data.
            </summary>
            <param name="notificationMessage">data object defining message to send and the user to send it to.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Notifications.Notification.NotificationService">
            <summary>
            Notification Service
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.Notifications.Notification.IsNotificationReplyMessagePrepended">
            <summary>
            Gets setting indicating if the Notification Email Reply message should be prepended to the notification email.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Notifications.NotificationPreference">
            <summary>
            Api class for managing user notification preferences in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.Add(Ektron.Cms.Notifications.NotificationPreferenceData)">
            <summary>
            Saves a new notification preference.
            </summary>
            <param name="preferenceData">preference data to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.SaveUserPreferences(System.Collections.Generic.List{Ektron.Cms.Notifications.NotificationPreferenceData})">
            <summary>
            Saves a set of notification preferences for a given user. 
            Preferences marked as added will be added and those marked as deleted will be removed.
            </summary>
            <param name="preferenceList">preference data to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.Update(Ektron.Cms.Notifications.NotificationPreferenceData)">
            <summary>
            Updates an existing notification preference.
            </summary>
            <param name="preferenceData">preference data to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.Delete(System.Int64)">
            <summary>
            Deletes a notification preference.
            </summary>
            <param name="id">Id of NotificationPreference to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.GetItem(System.Int64)">
            <summary>
            Returns a single notification preference by Id.
            </summary>
            <param name="id">Id of NotificationPreference to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Notifications.NotificationPreferenceProperty})">
            <summary>
            Returns a list of user notification preferences based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which preferences to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.GetDefaultPreferenceList(Ektron.Cms.Common.Criteria{Ektron.Cms.Notifications.NotificationPreferenceProperty})">
            <summary>
            Returns a list of default notification preferences based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which default preferences to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPreference.GetUserNotificationListForActivity(Ektron.Cms.Activity.ActivityData,Ektron.Cms.PagingInfo)">
            <summary>
            Returns a list of users and their nortfication settings for a given activity ocurrence.
            </summary>
            <param name="activity">Activity defintion to retrieve notifications for.</param>
            <param name="paging">paging information for the retrieval.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Notifications.NotificationPreference.NotificationPreferenceService">
            <summary>
            Notification Preference Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Notifications.NotificationPublishPreference">
            <summary>
            Notification Publish Preference Class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPublishPreference.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPublishPreference.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor with API mode
            </summary>
            <param name="mode">API mode</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPublishPreference.GetList(System.Int64)">
            <summary>
            GetList
            </summary>
            <param name="userId">userid</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPublishPreference.Add(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Add
            </summary>
            <param name="userId">userid</param>
            <param name="ActivityTypeIdList">ActivityTypeIdList</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPublishPreference.AllowPublication(System.Int64,System.Int64)">
            <summary>
            Allow Publication
            </summary>
            <param name="userId">userid</param>
            <param name="activityTypeId">ActivityId</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPublishPreference.GetDefaultList">
            <summary>
            Get Default list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.NotificationPublishPreference.UpdateDefaultPreferences(System.Collections.Generic.List{System.Int64})">
            <summary>
            Update Default Preferences
            </summary>
            <param name="ActivityTypeIdList"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.PageBuilder.PageAssociation.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.PageBuilder.PageAssociation.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.PageBuilder.PageAssociationProperty})">
            <summary>
            Gets the list of page to object associations.
            </summary>
            <returns>List of page to object associations</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.PageBuilder.PageAssociation.PageAssociationService">
            <summary>
            Gets instance to IPageAssociation.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Analytics.ReportAnalytics">
            <summary>
            Report Analytics class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetLocations(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user geographic location report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetLocations(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user geographic location report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetNewVsReturningVisitors(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a report on new visitor vs. returning visitor by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetNewVsReturningVisitors(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a report on new visitor vs. returning visitor by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetLanguages(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a report on different languages used by the visitor by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetLanguages(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a report on different languages used by the visitor by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetVisitsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetVisitsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetAbsoluteUniqueVisitorsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an absolute unique visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetAbsoluteUniqueVisitorsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an absolute unique visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetPageViewsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a pageviews for all visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetPageViewsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a pageviews for all visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetAveragePageViewsTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an average pageviews for all visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetAveragePageViewsTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an average pageviews for all visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetTimeOnSiteTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a time on site for all visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetTimeOnSiteTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a time on site for all visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetBounceRateTrend(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a bounce rate for all visitors trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetBounceRateTrend(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a bounce rate for all visitors trend report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetReportTrend(System.String,Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a generic trend report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="reportName">the name of the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetReportTrend(Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a generic trend report by the default provider
            </summary>
            <param name="reportName">the name of the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.TrendReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetBrowsers(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a browser report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetBrowsers(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a browser report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetOperatingSystems(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an operating systems report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetOperatingSystems(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an operating systems report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetPlatforms(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a platforms report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetPlatforms(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a platforms report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetScreenColors(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a screen colors report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetScreenColors(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a screen colors report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetScreenResolutions(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a screen resolutions report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetScreenResolutions(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a screen resolutions report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetFlashVersions(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a flash versions report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetFlashVersions(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a flash versions report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetJavaSupport(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a java support report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetJavaSupport(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a java support report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetNetworkLocations(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a network location report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetNetworkLocations(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a network location report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetHostnames(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a hostnames report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetHostnames(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a hostnames report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetConnectionSpeeds(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a connection speeds report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetConnectionSpeeds(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user defined value report by the specified provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetUserDefinedValue(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user defined value report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetUserDefinedValue(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an user defined value report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetDirectTraffic(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a direct traffic report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetDirectTraffic(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a direct traffic report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetReferringSites(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a referring sites report by the specified provider 
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetReferringSites(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a referring sites report by the default provider 
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetSearchEngines(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a search engines report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetSearchEngines(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            "a search engines report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetAllTrafficSources(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an all traffic sources report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetAllTrafficSources(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an all traffic sources report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetKeywords(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a keywords report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetKeywords(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a keywords report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetCampaigns(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a campaigns report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetCampaigns(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a campaigns report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetAdVersions(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an ad versions report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetAdVersions(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            an ad versions report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetTopContent(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top content report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetTopContent(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top content report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetContentbyTitle(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a content by title report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetContentbyTitle(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a content by title report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetTopLandingPages(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top landing pages report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetTopLandingPages(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top landing pages report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetTopExitPages(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top exit pages report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetTopExitPages(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top exit pages report by the default provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetReportRanked(System.String,Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a generic ranked report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="reportName">the name of the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetReportRanked(Ektron.Cms.Analytics.Reporting.ReportType,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a generic ranked report by the default provider
            </summary>
            <param name="reportName">the name of the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetCmsSearchTerms(System.DateTime,System.DateTime)">
            <summary>
            a Cms Search terms report
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetContentDetail(System.String,System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top exit pages report by the specified provider
            </summary>
            <param name="provider">the provider to carry out the report</param>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.ReportAnalytics.GetContentDetail(System.DateTime,System.DateTime,Ektron.Cms.Interfaces.Analytics.Provider.AnalyticsCriteria)">
            <summary>
            a top exit pages report by the specified provider
            </summary>
            <param name="startDate">start date of the report</param>
            <param name="endDate">end date of the report</param>
            <param name="criteria">the conditions for the report query</param>
            <returns>Ektron.Cms.Analytics.Reporting.AnalyticsReportData</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Analytics.ReportAnalytics.AnalyticsService">
            <summary>
            Analytics Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Analytics.SearchAnalytics">
            <summary>
            Search Analytics class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.SearchAnalytics.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.SearchAnalytics.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.SearchAnalytics.TrackSearch(System.String,System.Int32,System.Boolean)">
            <summary>
            Track Search 
            </summary>
            <param name="searchPhrase">searchPhrase</param>
            <param name="languageId">languageId</param>
            <param name="isWorkareaSearch">isWorkareaSearch</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Analytics.SearchAnalytics.MarkSearch(System.String,System.Int32,System.Boolean)">
            <summary>
            MarkSearch
            </summary>
            <param name="keywords">keywords</param>
            <param name="language_id">language_id</param>
            <param name="workarea_search">workarea_search</param>
        </member>
        <member name="T:Ektron.Cms.Framework.ToDo.TodoItem">
            <summary>
            Manages access to TodoItemData objects.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItem.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItem.Add(Ektron.Cms.ToDo.TodoItemData)">
            <summary>
            Adds a new TodoItem.
            </summary>
            <param name="TodoItem">TodoItem to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItem.Update(Ektron.Cms.ToDo.TodoItemData)">
            <summary>
            Updates a TodoItem.
            </summary>
            <param name="TodoItem">TodoItem to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItem.Delete(System.Int64)">
            <summary>
            Deletes a TodoItem by its ID.
            </summary>
            <param name="id">ID of the TodoItem to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItem.GetItem(System.Int64)">
            <summary>
            Gets a TodoItem by its ID.
            </summary>
            <param name="id">ID of the TodoItem to get.</param>
            <returns>Instance of requested TodoItem.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItem.GetList(Ektron.Cms.ToDo.TodoItemCriteria)">
            <summary>
            Gets a list of TodoItems filtered by the given criteria.
            </summary>
            <param name="criteria">Criteria with which to filter the TodoItems.</param>
            <returns>A list of TodoItems filtered using the criteria parameter.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.ToDo.TodoItem.TodoItemService">
            <summary>
            Gets instance to ITodoItem.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.ToDo.TodoItemComment">
            <summary>
            Manages access to TodoItemCommentCommentData objects.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItemComment.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItemComment.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItemComment.Add(Ektron.Cms.ToDo.TodoItemCommentData)">
            <summary>
            Adds a new TodoItemComment.
            </summary>
            <param name="TodoItemComment">TodoItemComment to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItemComment.Update(Ektron.Cms.ToDo.TodoItemCommentData)">
            <summary>
            Updates a TodoItemComment.
            </summary>
            <param name="TodoItemComment">TodoItemComment to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItemComment.Delete(System.Int64)">
            <summary>
            Deletes a TodoItemComment by its ID.
            </summary>
            <param name="id">ID of the TodoItemComment to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItemComment.GetItem(System.Int64)">
            <summary>
            Gets a TodoItemComment by its ID.
            </summary>
            <param name="id">ID of the TodoItemComment to get.</param>
            <returns>Instance of requested TodoItemComment.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoItemComment.GetList(Ektron.Cms.ToDo.TodoItemCommentCriteria)">
            <summary>
            Gets a list of TodoItemComments filtered by the given criteria.
            </summary>
            <param name="criteria">Criteria with which to filter the TodoItemComments.</param>
            <returns>A list of TodoItemComments filtered using the criteria parameter.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.ToDo.TodoItemComment.TodoItemCommentService">
            <summary>
            Gets instance to ITodoItemComment.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.ToDo.TodoList">
            <summary>
            Todolist class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoList.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoList.Add(Ektron.Cms.ToDo.TodoListData)">
            <summary>
            Adds a new TodoList.
            </summary>
            <param name="todoList">TodoList to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoList.Update(Ektron.Cms.ToDo.TodoListData)">
            <summary>
            Updates a TodoList.
            </summary>
            <param name="todoList">TodoList to update.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoList.Delete(System.Int64)">
            <summary>
            Deletes a TodoList by its ID.
            </summary>
            <param name="id">ID of the TodoList to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoList.GetItem(System.Int64)">
            <summary>
            Gets a TodoList by its ID.
            </summary>
            <param name="id">ID of the TodoList to get.</param>
            <returns>Instance of requested TodoList.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.ToDo.TodoList.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.ToDo.TodoListProperty})">
            <summary>
            Gets a list of TodoLists filtered by the given criteria.
            </summary>
            <param name="criteria">Criteria with which to filter the TodoLists.</param>
            <returns>A list of TodoLists filtered using the criteria parameter.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.ToDo.TodoList.TodoListService">
            <summary>
            Gets instance to ITodoList.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Users.User">
            <summary>
            User class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.Add(Ektron.Cms.UserData)">
            <summary>
            Adds a new user, with details from the supplied UserData object.
            </summary>
            <param name="userData"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.Update(Ektron.Cms.UserData)">
            <summary>
            Updates a user, with details from the supplied UserData object.
            </summary>
            <param name="userData"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.Delete(System.Int64)">
            <summary>
            Deletes an existing user.
            </summary>
            <param name="id">the identifier of the user to delete</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.GetItem(System.Int64)">
            <summary>
            Returns details of a user.
            </summary>
            <param name="id">the identifier of the user to get</param>
            <returns>user details in a UserData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.GetItem(System.Int64,System.String)">
            <summary>
            Returns details of a user based upon an authentication type and authentication user id.
            </summary>
            <param name="authenticationTypeId">ID of authentication type user is associated with</param>
            <param name="authenticationUserId">ID of user based on authentication type.</param>
            <returns>user details in a UserData object</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.User.UserProperty})">
            <summary>
            Returns a list of users that fit the supplied criteria.
            </summary>
            <param name="criteria">used to specify, or filter, the users to return</param>
            <returns>a list of users</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.Login(System.String,System.String,System.String)">
            <summary>
            Logs in a user.
            </summary>
            <param name="userName">username of user to login.</param>
            <param name="password">user's password</param>
            <param name="serverName">Name of server or site the user is logging in to.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Users.User.Login(System.Int64,System.String,System.String)">
            <summary>
            Logs in a user based upon an authentication type and authentication user id.  This will logthe user in automatically, and assumes the user has already been authenticated.
            </summary>
            <param name="authenticationTypeId">ID of authentication type user is associated with</param>
            <param name="authenticationUserId">ID of user based on authentication type.</param>\
            <param name="serverName">Name of server user is logging into.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.Users.User.UserService">
            <summary>
            returns an instance of the business objects user service.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Notifications.UserNotificationSetting">
            <summary>
            Api class for managing user notification settings in the CMS.  UserNotificationSettigns are user settings per notification agent.  
            For example, to recieve notifications via Email, the user would need to provide his\her email address, etc.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.UserNotificationSetting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.UserNotificationSetting.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            Constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.UserNotificationSetting.Add(Ektron.Cms.Notifications.UserNotificationSettingData)">
            <summary>
            Adds a new user notification setting.
            </summary>
            <param name="userSettingData">user setting data to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.UserNotificationSetting.Update(Ektron.Cms.Notifications.UserNotificationSettingData)">
            <summary>
            Updates an existing user notification setting.
            </summary>
            <param name="userSettingData">user setting data to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.UserNotificationSetting.Delete(System.Int64)">
            <summary>
            Deletes a User Notification Setting.
            </summary>
            <param name="id">Id of User Notification Setting to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.UserNotificationSetting.GetItem(System.Int64)">
            <summary>
            Returns a single UserNotificationSettingData by Id.
            </summary>
            <param name="id">Id of UserNotificationSettingData to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.UserNotificationSetting.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Notifications.UserNotificationSettingProperty})">
            <summary>
            Returns a list of UserNotificationSettingData based upon the supplied criteira.
            </summary>
            <param name="criteria">criteria used to determine which UserNotificationSettingData to return.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Notifications.UserNotificationSetting.VerifyValidationCode(System.Int64,System.String)">
            <summary>
            Verifies that the validation code is correct and enables users notfication settings.
            </summary>
            <param name="userSettingId">Id of user notification setting.</param>
            <param name="verificationCode">Verification code to validate.</param>
            <returns>true if the verification code is correct.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Notifications.UserNotificationSetting.UserSettingService">
            <summary>
            User Setting Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Calendar.WebCalendar">
            <summary>
            Web Calendar Class 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendar.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendar.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendar.Add(Ektron.Cms.Common.Calendar.WebCalendarData)">
            <summary>
             Saves the current calendar as a new calendar.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendar.Update(Ektron.Cms.Common.Calendar.WebCalendarData)">
            <summary>
            Saves this calendar.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendar.Delete(System.Int64)">
            <summary>
            Deletes the current calendar.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendar.GetCalendar(System.Int64)">
            <summary>
            Retrieves a calendar.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve.</param>
            <returns>WebCalendarData</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendar.GetPublicCalendar(System.Int64)">
            <summary>
            Retrieves a calendar with only public fields populated.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve.</param>
            <returns>WebCalendarData with only public fields populated.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebCalendar.GetICalendarFeed(System.Int64)">
            <summary>
            Returns the ICalendar representation of the supplied calendar Id.
            </summary>
            <param name="calendarId">Id of calendar to retrieve ICalendar feed for.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.Calendar.WebCalendar.CalendarService">
            <summary>
            Calendar Service
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.Calendar.WebEvent">
            <summary>
            Webevent Class 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.#ctor(Ektron.Cms.Framework.ApiAccessMode)">
            <summary>
            constructor
            </summary>
            <param name="mode">Sets the current API access mode.  If set to Admin, the API runs with the permissions of an administrator.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.Add(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            Adds a new WebEvent object to Cms. The WebEvent.Id property will be populated with the new WebEvent's Id.
            </summary>
            <param name="eventData">WebEventData object to add.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.Update(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            Updates an existing WebEventData object in Cms.
            </summary>
            <param name="eventData">WebEventData object to save.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.Delete(System.Int64)">
            <summary>
            Deletes a WebEvent from the Cms.
            </summary>
            <param name="id">Id of WebEvent to delete.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.CreateVariance(System.Int64,System.DateTime)">
            <summary>
            Creates a variance event for the supplied recurring event id.
            </summary>
            <param name="eventId">Id of the recurring event to create variance for.</param>
            <param name="occurrenceStartUtc">The event occurance date for which to create a variance.</param>
            <returns>An unsaved WebEvent representing the event variance/</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.CreateVariance(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a variance event for the supplied recurring event id.
            </summary>
            <param name="eventId">Id of the recurring event to create variance for.</param>
            <param name="occurrenceStartUtc">The event occurance date for which to create a variance.</param>
            <param name="newStartUtc">The new occureance start date (UTC).</param>
            <returns>An unsaved WebEvent representing the event variance/</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.CancelOccurrence(System.Int64,System.DateTime)">
            <summary>
            Cancels an occurence of a recurring event.
            </summary>
            <param name="eventId">Id of the recurring event to cancel an occurrence for.</param>
            <param name="occurrenceStartUtc">The event occurance date to cancel.</param>
            <returns>Id of the event variance created for the cancellation.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.GetItem(System.Int64)">
            <summary>
            Gets the fully populated EventData object for the supplied eventId.
            </summary>
            <param name="eventId">Id of the event to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.GetList(System.Int64)">
            <summary>
            Returns list of eventdata items for the calendar.  This will only return the actual event items and not the occurrences of the event.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <returns></returns>
            <remarks>EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.GetList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns list of eventdata items for the calendar.  This will only return the actual event items and not the occurrences of the event.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <returns></returns>
            <remarks>EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.</remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.GetList(Ektron.Cms.Common.WebEventCriteria)">
            <summary>
             Returns a list of WebEvents based upon the supplied criteria.
             </summary>
             <param name="criteria">criteria used to restrict WebEvent retrieval.</param>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.GetNonVariantEventList(System.Int64)">
            <summary>
            Returns list of original eventdata items for the calendar.  For recurring events, this will only return the actual event items and not the occurrences or variants of recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.GetNonVariantEventList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns list of original eventdata items for the calendar.  For recurring events, this will only return the actual event items and not the occurrences or variants of recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.GetVarianceEventList(System.Int64)">
            <summary>
            Returns an EventVarianceDictionary containing all the variances for the supplied calendar in the given time frame.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.GetVarianceEventList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns an EventVarianceDictionary containing all the variances for the supplied calendar in the given time frame.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of time period to retrieve.</param>
            <param name="endUtc">end of time period to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.Calendar.WebEvent.GetEventOccurrenceList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Returns a list of events for the calendar that occur during the supplied time period.  This will return all event occurrences 
            including individual occurrences for recurring events.
            </summary>
            <param name="calendarId">Id of the calendar to retrieve events for.</param>
            <param name="startUtc">start of search span</param>
            <param name="endUtc">end of search span</param>
            <returns></returns>
            <remarks>
            EventData objects are not fully populated.  Only contains enough data to display event information and retrieve full EventData object when neccesary.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Framework.Calendar.WebEvent.WebEventManagerService">
            <summary>
            Web Event Manager Service
            </summary>
        </member>
    </members>
</doc>
